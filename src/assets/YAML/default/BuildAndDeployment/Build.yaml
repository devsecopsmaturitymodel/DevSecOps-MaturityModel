---
Build and Deployment:
  Build:
    Building and testing of artifacts in virtual environments:
      description: |-
        While building and testing artifacts, third party systems, application frameworks
        and 3rd party libraries are used. These might be malicious as a result of
        vulnerable libraries or because they are altered during the delivery phase.
      risk: |-
        While building and testing artifacts, third party systems, application frameworks
        and 3rd party libraries are used. These might be malicious as a result of
        vulnerable libraries or because they are altered during the delivery phase.
      measure: Each step during within the build and testing phase is performed in
        a separate virtual environments, which is destroyed afterward.
      meta:
        implementationGuide: Depending on your environment, usage of virtual machines
          or container technology is a good way. After the build, the filesystem should
          not be used again in other builds.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 2
      level: 2
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/ci-cd-tools
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/container-technologi
      references:
        samm2:
        - I-SB-2-A
        iso27001-2017:
        - 14.2.6
        iso27001-2022:
        - 8.31
      isImplemented: false
      evidence: ""
      comments: ""
    Defined build process:
      risk: Performing builds without a defined process is error prone; for example,
        as a result of incorrect security related configuration.
      measure: A well defined build process lowers the possibility of errors during
        the build process.
      description: |
        Sample evidence as an attribute in the yaml: The build process is defined in [REPLACE-ME Pipeline](https://replace-me/jenkins/job)
        in the folder _vars_. Projects are using a _Jenkinsfile_ to use the
        defined process.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 2
      usefulness: 4
      level: 1
      assessment: |
        - Show your build pipeline and an exemplary job (build + test).
        - Show that every team member has access.
        - Show that failed jobs are fixed.

        Credits: AppSecure-nrw [Security Belts](https://github.com/AppSecure-nrw/security-belts/)
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/ci-cd-tools
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/container-technologi
      references:
        samm2:
        - I-SB-1-A
        iso27001-2017:
        - 12.1.1
        - 14.2.2
        iso27001-2022:
        - 5.37
        - 8.32
      isImplemented: false
      evidence: ""
      comments: ""
    Pinning of artifacts:
      risk: Unauthorized manipulation of artifacts might be difficult to spot. For
        example, this may result in using images with malicious code. Also, intendend
        major changes, which are automatically used in an image used might break the
        functionality.
      measure: Pinning of artifacts ensure that changes are performed only when intended.
      comment: The usage of pinning requires a good processes for patching. Therefore,
        choose this activity wisly.
      meta:
        implementationGuide: Pinning artifacts in Dockerfile refers to the practice of using specific,
          immutable versions of base images and dependencies in your build process. Instead of using the
          latest tag for your base image, select a specific version or digest. For example, replace FROM node:latest,
          to FROM node@sha256:abcdef12.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 2
      implementation:
      - Container technology automatically creates a hash for images, which can be
        used.
      - Immutable images are an other way, e.g. by using a registry, which doesn't
        allow overriding of images.
      dependsOn:
      - Defined build process
      references:
        samm2:
        - I-SB-1-A
        iso27001-2017:
        - 14.2.6
        iso27001-2022:
        - 8.31
      isImplemented: false
      evidence: ""
      comments: ""
    SBOM of components:
      description: |-
       SBOM (Software Bill of Materials) is a document that lists all components, libraries,
       and dependencies used in a software application or container image. Creating an SBOM
       during the build process can help ensure transparency, security, and license compliance
       for your application.
      risk: In case a vulnerability of severity high or critical exists, it needs
        to be known where an artifacts with that vulnerability is deployed with which
        dependencies.
      measure: Creation of an SBOM of components (e.g. application and container image
        content) during build.
      dependsOn:
      - Defined build process
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 3
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2: []
        iso27001-2017:
        - 8.1
        - 8.2
        iso27001-2022:
        - 5.9
        - 5.12
      isImplemented: false
      evidence: ""
      comments: ""
    Signing of artifacts:
      risk: &execution-maliciuous Execution or usage of malicious code or data e.g. via executables, libraries or container images.
      measure: Digitally signing artifacts for all steps during the build and especially
        docker images, helps to ensure their integrity and autenticity.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 4
      level: 5
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/docker-content-trust
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/in-toto
      dependsOn:
      - Defined build process
      - Pinning of artifacts
      references:
        samm2:
        - I-SB-1-A
        iso27001-2017:
        - 14.2.6
        iso27001-2022:
        - 8.31
      isImplemented: false
      evidence: ""
      comments: ""
    Signing of code:
      risk: *execution-maliciuous
      measure: Digitally signing commits helps to prevent unauthorized manipulation
        of source code.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 4
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/signing-of-commits
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/signing-of-commits-protection
      dependsOn:
      - Defined build process
      references:
        samm2:
        - I-SB-2-A
        iso27001-2017:
        - 14.2.6
        iso27001-2022:
        - 8.31
      isImplemented: false
      evidence: ""
      comments: ""
...
