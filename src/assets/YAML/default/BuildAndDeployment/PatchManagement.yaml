---
Build and Deployment:
  Patch Management:
    A patch policy is defined:
      risk: Vulnerabilities in running containers stay for long and might get exploited.
      measure: A patch policy for all artifacts (e.g. in images) is defined. How often
        is an image rebuilt?
      difficultyOfImplementation:
        knowledge: 3
        time: 1
        resources: 2
      usefulness: 4
      level: 1
      implementation: []
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
        - 12.5.1
        - 14.2.5
        iso27001-2022:
        - 8.8
        - 8.19
        - 8.27
      isImplemented: false
      evidence: ""
      comments: ""
    Automated PRs for patches:
      risk: Components with known (or unknown) vulnerabilities might stay for long and get exploited,
        even when a patch is available.
      measure: Fast patching of third party component is needed. The DevOps way is
        to have an automated pull request for new components. This includes 
        * Applications
        * Virtualized operating system components (e.g. container images)
        * Operating Systems
        * Infrastructure as Code/GitOps (e.g. argocd based on a git repository or terraform)
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 5
      level: 1
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dependabot
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jenkins
      # - $ref: src/assets/YAML/default/implementations.yaml#/implementations/argocd TODO
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/terraform
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
        - 14.2.5
        iso27001-2022:
        - 8.8
        - 8.27
      isImplemented: false
      evidence: ""
      comments: ""
    Nightly build of images (base images):
      description: |-
        A base image is a pre-built image that serves as a starting point for building
        new images or containers. These base images usually include an operating system,
        necessary dependencies, libraries, and other components that are required to run
        a specific application or service. Nightly builds of custom base images refer to
        an automated process that occurs daily or on a scheduled basis, usually during
        nighttime or off-peak hours, to create updated versions of custom base images.
      risk: Vulnerabilities in running containers stay for too long and might get
        exploited.
      measure: Custom base images are getting build at least nightly. In case the
        packages in the base image e.g. <i>centos</i> has changed, the build server
        triggers the build of depending images.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 2
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
        iso27001-2022:
        - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
    Reduction of the attack surface:
      description: |-
        Distroless images are minimal, stripped-down base images that contain only the
        essential components required to run your application. They do not include package
        managers, shells, or any other tools that are commonly found in standard Linux
        distributions. Using distroless images can help reduce the attack surface and
        overall size of your container images.
      risk: Components, dependencies, files or file access rights might have vulnerabilities,
        but the they are not needed.
      measure: Removal of unneeded components, dependencies, files or file access
        rights. For container images the usage of distroless images is recommended.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 2
      usefulness: 3
      level: 2
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/distroless
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fedora-coreos
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/distroless-usage
      references:
        samm2:
        - I-SB-2
        iso27001-2017:
        - hardening is missing in ISO 27001
        - 14.2.1
        iso27001-2022:
        - 8.25
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of a maximum lifetime for images:
      description: |-
        The maximum lifetime for a Docker container refers to the duration a container
        should be allowed to run before it is considered outdated, stale, or insecure.
        There is not a fixed, universally applicable maximum lifetime for a Docker
        container, as it varies depending on the specific use case, application
        requirements, and security needs. As a best practice, it is essential to define
        a reasonable maximum lifetime for containers to ensure that you consistently
        deploy the most recent, patched, and secure versions of both your custom base
        images and third-party images.
      risk: Vulnerabilities in images of running containers stay for too long and
        might get exploited. Long running containers have potential memory leaks.
        A compromised container might get killed by restarting the container (e.g.
        in case the attacker has not reached the persistence layer).
      measure: A short maximum lifetime for images is defined, e.g. 30 days. The project
        images, based on the nightly builded images, are deployed at leased once within
        the defined lifetime. Third Party images are deployed at leased once within
        the defined lifetime.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
        iso27001-2022:
        - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of a short maximum lifetime for images:
      description: |-
        The maximum lifetime for a Docker container refers to the duration a container
        should be allowed to run before it is considered outdated, stale, or insecure.
        There is not a fixed, universally applicable maximum lifetime for a Docker
        container, as it varies depending on the specific use case, application
        requirements, and security needs. As a best practice, it is essential to define
        a reasonable maximum lifetime for containers to ensure that you consistently
        deploy the most recent, patched, and secure versions of both your custom base
        images and third-party images.
      risk: Vulnerabilities in running containers stay for too long and might get
        exploited.
      measure: |
        A good practice is to perform the build and deployment daily or even just-in-time, when a new component (e.g. package) for the image is available.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 3
      level: 4
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/sample-concept-1
      references:
        samm2:
        - O-EM-2-B
        iso27001-2017:
        - 12.6.1
        iso27001-2022:
        - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
...
