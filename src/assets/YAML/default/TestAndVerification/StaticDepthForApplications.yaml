---
Test and Verification:
  Static depth for applications:
    Exclusion of source code duplicates: &Exclusion-of-source-code-duplicates
      risk: Duplicates in source code might influence the stability of the application.
      measure: Automatic Detection and manual removal of duplicates in source code.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 4
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pmd
      dependsOn:
      - Defined build process
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Dead code elimination:
      <<: *Exclusion-of-source-code-duplicates
      risk: Dead code increases the attack surface (use of hard coded credentials and
        variables, sensitive information)
      measure: Collection of unused code and then manual removal of unused code.
    Local development security checks performed:
      risk: Creating and developing code contains code smells and quality issues.
      measure: |
        Integration of quality and linting plugins with interactive development environment (IDEs).
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pre-commit
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    API design validation:
      risk: Creation of insecure or non-compliant API.
      measure: |
        Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP
        and validate the specification using specific tools.
        Checks should be integrated in IDEs and CI/CD pipelines.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/stoplight-spectral
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/api-oas-checker
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 8.25  # Secure development lifecycle
        - 8.27  # Secure system architecture and engineering principles
        - 8.28  # Secure coding
        d3f:
        - AccessModeling
        - DataExchangeMapping
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for all components/libraries:
      risk: Used components like libraries and legacy applications might have vulnerabilities
      measure: Usage of a static analysis for all used components.
      difficultyOfImplementation:
        knowledge: 2
        time: 4
        resources: 2
      usefulness: 3
      level: 4
      dependsOn:
      - Static analysis for important client side components
      - Static analysis for important server side components
      implementation: []
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for all self written components:
      risk: Parts in the source code of the frontend or middleware have vulnerabilities.
      measure: Usage of static analysis tools for all parts of the middleware and
        frontend. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 4
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/eslint
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/findsecuritybugs
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jsprime
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
      dependsOn:
      - Static analysis for important client side components
      - Static analysis for important server side components
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for important client side components:
      risk: Important parts in the source code of the frontend have vulnerabilities.
      measure: Usage of static analysis tools for important parts of the frontend
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/eslint
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/findsecuritybugs
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jsprime
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/bdd-mobile-security
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
      dependsOn:
      - Defined build process
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for important server side components:
      risk: Important parts in the source code of the middleware have vulnerabilities.
      measure: Usage of static analysis tools for important parts of the middleware
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/eslint
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/findsecuritybugs
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jsprime
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
      dependsOn:
      - Defined build process
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Stylistic analysis:
      risk: Unclear or obfuscated code might have unexpected behavior.
      measure: Analysis of compliance to style guides of the source code ensures that
        source code formatting rules are met (e.g. indentation, loops, ...).
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 4
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pmd
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/stylecop
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/sonarqube
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/github-super-linter
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Test of client side components with known vulnerabilities:
      risk: Client side components might have vulnerabilities.
      measure: Tests for known vulnerabilities in components via Software Composition Analysis of the frontend are performed.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 2
      level: 3
      dependsOn:
      - Defined build process
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/retire-js
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/npm-audit
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dependencyTrack
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/github-dependabot
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Test of server side components with known vulnerabilities:
      risk: Server side components might have vulnerabilities.
      measure: Tests for known vulnerabilities in server side components (e.g. backend/middleware)
        are performed.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 5
      level: 1
      dependsOn:
      - Defined build process
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-dependency-che
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dependencyTrack
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/retire-js
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/npm-audit
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/github-dependabot
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of multiple analyzers:
      risk: Each vulnerability analyzer has different opportunities. By using just
        one analyzer, some vulnerabilities might not be found.
      measure: Usage of multiple static tools to find more vulnerabilities.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 5
      usefulness: 1
      level: 4
      dependsOn:
      - Test of server side components with known vulnerabilities
      - Test of client side components with known vulnerabilities
      - Static analysis for all self written components
      implementation: []
      references:
        samm2:
        - V-ST-3-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
...
