---
Build and Deployment:
  Build:
    Building and testing of artifacts in virtual environments:
      description: |-
        While building and testing artifacts, third party systems, application frameworks
        and 3rd party libraries are used. These might be malicious as a result of
        vulnerable libraries or because they are altered during the delivery phase.
      risk: |-
        While building and testing artifacts, third party systems, application frameworks
        and 3rd party libraries are used. These might be malicious as a result of
        vulnerable libraries or because they are altered during the delivery phase.
      measure: Each step during within the build and testing phase is performed in
        a separate virtual environments, which is destroyed afterward.
      meta:
        implementationGuide: Depending on your environment, usage of virtual machines
          or container technology is a good way. After the build, the filesystem should
          not be used again in other builds.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 2
      level: 2
      implementation:
      - name: CI/CD tools
        tags:
        - ci-cd
        url: https://martinfowler.com/articles/continuousIntegration.html
        description: CI/CD tools such as jenkins, gitlab-ci or github-actions
      - name: Container technologies and orchestration like Docker, Kubernetes
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
      references:
        samm2:
        - I-SB-2-A
        iso27001-2017:
        - 14.2.6
      isImplemented: false
      evidence: ""
      comments: ""
    Defined build process:
      risk: Performing builds without a defined process is error prone; for example,
        as a result of incorrect security related configuration.
      measure: A well defined build process lowers the possibility of errors during
        the build process.
      description: |
        Sample evidence as an attribute in the yaml: The build process is defined in <a href="REPLACE-ME">REPLACE-ME Pipeline</a>
        in the folder <i>vars</>. Projects are using a <i>Jenkinsfile</i> to use the
        defined process.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 2
      usefulness: 4
      level: 1
      assessment: |
        - Show your build pipeline and an exemplary job (build + test).
        - Show that every team member has access.
        - Show that failed jobs are fixed.

        Credits: AppSecure-nrw [Security Belts](https://github.com/AppSecure-nrw/security-belts/)
      implementation:
      - name: CI/CD tools
        tags:
        - ci-cd
        url: https://martinfowler.com/articles/continuousIntegration.html
        description: CI/CD tools such as jenkins, gitlab-ci or github-actions
      - name: Container technologies and orchestration like Docker, Kubernetes
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
      references:
        samm2:
        - I-SB-1-A
        iso27001-2017:
        - 12.1.1
        - 14.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Pinning of artifacts:
      risk: Unauthorized manipulation of artifacts might be difficult to spot. For
        example, this may result in using images with malicious code. Also, intendend
        major changes, which are automatically used in an image used might break the
        functionality.
      measure: Pinning of artifacts ensure that changes are performed only when intended.
      comment: The usage of pinning requires a good processes for patching. Therefore,
        choose this activity wisly.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 2
      implementation:
      - Container technology automatically creates a hash for images, which can be
        used.
      - Immutable images are an other way, e.g. by using a registry, which doesn't
        allow overriding of images.
      dependsOn:
      - Defined build process
      references:
        samm2:
        - I-SB-1-A
        iso27001-2017:
        - 14.2.6
      isImplemented: false
      evidence: ""
      comments: ""
    SBOM of components:
      risk: In case a vulnerability of severity high or critical exists, it needs
        to be known where an artifacts with that vulnerability is deployed with which
        dependencies.
      measure: Creation of an SBOM of components (e.g. application and container image
        content) during build.
      dependsOn:
      - Defined build process
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 3
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2: []
        iso27001-2017:
        - "8.1"
        - "8.2"
      isImplemented: false
      evidence: ""
      comments: ""
    Signing of artifacts:
      risk: Execution or usage of malicious code or data e.g. via executables, libraries
        or container images.
      measure: Digitally signing artifacts for all steps during the build and especially
        docker images, helps to ensure their integrity and autenticity.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 4
      level: 3
      implementation:
      - name: Docker Content Trust
        tags: []
        url: https://docs.docker.com/notary/getting_started/
      - name: in-toto
        tags: []
        url: https://in-toto.github.io/
      dependsOn:
      - Defined build process
      - Pinning of artifacts
      references:
        samm2:
        - I-SB-1-A
        iso27001-2017:
        - 14.2.6
      isImplemented: false
      evidence: ""
      comments: ""
    Signing of code:
      risk: Execution or usage of malicious code or data e.g. via executables, libraries
        or container images.
      measure: Digitally signing commits helps to prevent unauthorized manipulation
        of source code.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 3
      implementation:
      - name: Signing of commits
        tags:
        - signing
        url: https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work
        description: Signing of commits in git
      - name: Enforcement of commit signing
        tags:
        - signing
        url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
        description: Usage of branch protection rules
      dependsOn:
      - Defined build process
      references:
        samm2:
        - I-SB-2-A
        iso27001-2017:
        - 14.2.6
      isImplemented: false
      evidence: ""
      comments: ""
  Deployment:
    Blue/Green Deployment:
      risk: A new artifact's version can have unknown defects.
      measure: |-
        Using a blue/green deployment strategy increases application availability
        and reduces deployment risk by simplifying the rollback process if a deployment fails.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 2
      level: 4
      implementation:
      - name: Blue/Green Deployments
        tags: []
        url: https://martinfowler.com/bliki/BlueGreenDeployment.html
      dependsOn:
      - Smoke Test
      references:
        samm2:
        - TODO
        iso27001-2017:
        - 17.2.1
        - 12.1.1
        - 12.1.2
        - 12.1.4
        - 12.5.1
        - 14.2.9
      isImplemented: false
      evidence: ""
      comments: ""
    Defined decommissioning process:
      risk: Unused applications are not maintained and may contain vulnerabilities.
        Once exploited they can be used to attack other applications or to perform
        lateral movements within the organization.
      measure: A clear decommissioning process ensures the removal of unused applications.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 2
      level: 2
      references:
        samm2:
        - O-OM-2-B
        iso27001-2017:
        - 11.2.7
        d3f:
        - SoftwareInventory
      isImplemented: false
      evidence: ""
      comments: ""
    Defined deployment process:
      risk: Deployment of insecure or malfunctioning artifacts.
      measure: Defining a deployment process ensures that there are established criteria
        in terms of functionalities, security, compliance, and performance, and that
        the artifacts meet them.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 1
      dependsOn:
      - Continuous Integration
      implementation:
      - name: CI/CD tools
        tags:
        - ci-cd
        url: https://martinfowler.com/articles/continuousIntegration.html
        description: CI/CD tools such as jenkins, gitlab-ci or github-actions
      - name: Container technologies and orchestration like Docker, Kubernetes
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
      - name: Ansible
        description: |-
          Ansible is an open-source software provisioning, configuration management,
          and application-deployment tool enabling infrastructure as code.
        tags:
        - d3f:SoftwareDeploymentTool
        url: https://github.com/ansible/ansible
      - description: Puppet is an open-source software configuration management tool.
        name: Puppet
        tags:
        - d3f:SoftwareDeploymentTool
        url: https://github.com/puppetlabs/puppet
      - name: Chef
        description: |-
          Chef is an open-source software automation platform that
          helps system administrators manage infrastructure and applications.
        tags:
        - d3f:SoftwareDeploymentTool
        url: https://github.com/chef/chef
      references:
        samm2:
        - I-SD-1-A
        iso27001-2017:
        - 12.1.1
        - 14.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Environment depending configuration parameters (secrets):
      risk: Unauthorized access to secrets stored in source code or in artifacts (e.g.
        container images) through process listing (e.g. ps -ef).
      measure: Set configuration parameters via environment variables stored using
        specific platform functionalities or secrets management systems (e.g. Kubernetes
        secrets or Hashicorp Vault).
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - signing-of-commits-protection:
          name: Enforcement of commit signing
          tags:
          - signing
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
          description: Usage of branch protection rules
        signing-of-commits:
          name: Signing of commits
          tags:
          - signing
          url: https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work
          description: Signing of commits in git
        ci-cd-tools:
          name: CI/CD tools
          tags:
          - ci-cd
          url: https://martinfowler.com/articles/continuousIntegration.html
          description: CI/CD tools such as jenkins, gitlab-ci or github-actions
        apimaturity:
          name: API Security Maturity Model for Authorization
          tags:
          - api
          url: https://curity.io/resources/learn/the-api-security-maturity-model/
        container-orchestration:
          name: Container technologies and orchestration like Docker, Kubernetes
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
        cwe25:
          name: CWE Top 25 Most Dangerous Software Weaknesses
          tags:
          - documentation
          - threat
          url: https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html
        docker-content-trust:
          name: Docker Content Trust
          tags: []
          url: https://docs.docker.com/notary/getting_started/
        in-toto:
          name: in-toto
          tags: []
          url: https://in-toto.github.io/
        a-complete-backup-of:
          name: A complete backup of persisted data might be performed.
          tags: []
        a-point-in-time-reco:
          name: A Point in Time Recovery for databases should be implemented.
          tags: []
        blue-green-deploymen:
          name: Blue/Green Deployments
          tags: []
          url: https://martinfowler.com/bliki/BlueGreenDeployment.html
        docker:
          name: Docker
          url: https://github.com/moby/moby
          tags: []
        webserver:
          name: Webserver
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebServer/
        rolling-update:
          name: rolling update
          tags: []
        kubernetes-admission:
          name: Kubernetes Admission Controller can whitelist registries and/or whitelist
            a signing key.
          tags:
          - d3f:ContainerOrchestrationSoftware
        dependabot:
          name: dependabot
          tags: []
          url: https://dependabot.com/
        jenkins:
          name: Jenkins
          tags: []
          url: https://www.jenkins.io/
        sample-concept-1:
          name: Daily rebuild of container images
          tags: []
          description: |
            Sample concept:
            1. each container has a set lifetime and is killed/replaced with a new container
            multiple times a day where you have
            some form of a graceful replacement to ensure no (short) service outage will
            occur to the end users.
            2. twice a day a rebuild of images is done. The rebuilds are put into a automated testing pipeline.
            If the testing has no blocking issues the new images will be released for deployment during the
            next "restart" of a container. What has to be done, is to ensure the new
            containers are deployed in some canary deployment manner, this will ensure
            that if (and only if) something buggy has been introduced which breaks functionality
            the canary deployment will make sure the "older version" is being used and
                            not the buggy newer one.
        distroless:
          name: Distroless Container Images
          tags:
          - d3f:ContainerImage
          url: https://github.com/GoogleContainerTools/distroless
        fedora-coreos:
          name: Fedora CoreOS
          tags: []
          url: https://getfedora.org/coreos
        threat-modeling-play:
          name: Threat Modeling Playbook
          tags:
          - owasp
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/Toreon/threat-model-playbook
        owasp-samm:
          name: OWASP SAMM
          tags:
          - threat-modeling
          - owasp
          - defender
          url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
        whiteboard:
          name: Whiteboard
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://en.wikipedia.org/wiki/Whiteboard
        miro-or-any-other-c:
          name: Miro (or any other collaborative board)
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://miro.com/
        draw-io:
          name: Draw.io
          tags:
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/jgraph/drawio-desktop
        threagile:
          name: Threagile
          tags:
          - threat-modeling
          url: https://github.com/Threagile/threagile
        don-t-forget-evil-u:
          name: Don't Forget EVIL User stories
          tags: []
          url: https://www.owasp.org/index.php/Agile_Software_Development
          description: '[Do not Forget EVIL User Stories](https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories)
            and [Practical Security Stories and Security Tasks for Agile Development
            Environments](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
        owasp-juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: |-
            In case you do not have the budget to hire an external security expert,
            an option is to use the OWASP JuiceShop on a "hacking Friday"
        owasp-cheatsheet-ser:
          name: OWASP Cheatsheet Series
          tags:
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        https-cheatsheetse:
          name: https://cheatsheetseries.owasp.org/
          tags:
          - training
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        owasp-security-champ:
          name: OWASP Security Champions Playbook
          tags:
          - security champions
          url: https://github.com/c0rdis/security-champions-playbook
        build-it-break-it-fi:
          name: Build it Break it Fix it Contest
          tags: []
          url: https://builditbreakit.org/
        motivate-people:
          name: Motivate people
          tags:
          - security champions
          - gamification
          - nudging
          url: https://github.com/wurstbrot/security-pins
          description: |-
            Enhance motivation can be performed with the distribution of pins
            as a reward, see [OWASP Security Pins Project](https://github.com/wurstbrot/security-pins)
        owasp-top-10-maturit:
          name: OWASP Top 10 Maturity Categories for Security Champions
          tags:
          - security champions
          url: https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
        involve-security-sme:
          name: Involve Security SME
          tags: []
          description: Security SME are involved in discussion for requirements analysis,
            software design and sprint planning to provide guidance and suggestions.
        damn-vulnerable-web:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        example-all-docker:
          name: 'Example: All docker images used by teams need to be based on standard
            images.'
          tags: []
        owasp-asvs:
          name: OWASP ASVS
          tags: []
          url: https://owasp.org/www-project-application-security-verification-standard/
        owasp-masvs:
          name: OWASP MASVS
          tags: []
          url: https://github.com/OWASP/owasp-masvs
        cis-kubernetes-bench:
          name: CIS Kubernetes Bench for Security
          tags:
          - d3f:ContainerOrchestrationSoftware
          url: https://www.cisecurity.org/cis-benchmarks/
        cis-docker-bench-for:
          name: CIS Docker Bench for Security
          tags:
          - d3f:ContainerRuntime
          url: https://www.cisecurity.org/cis-benchmarks/
        container-execution-isolation:
          name: Isolate containers execution
          tags:
          - d3f:ContainerOrchestrationSoftware
          - d3f:ContainerImage
          description: 'For example for Containers: Deny running containers as root,
            deny using advanced privileges, deny mounting of the hole filesystem,
            ...'
          url: https://d3fend.mitre.org/technique/d3f:ExecutionIsolation/
        attack-matrix-cloud:
          name: Attack Matrix Cloud
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for cloud
        attack-matrix-contai:
          name: Attack Matrix Containers
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for containers
        attack-matrix-kubern:
          name: Attack Matrix Kubernetes
          tags:
          - mitre
          - d3f:ContainerOrchestrationSoftware
          url: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/
          description: Attack matrix for kubernetes
        istio:
          name: istio
          tags: []
          description: Istio is an open platform to connect, manage, and secure microservices.
          url: https://istio.io/
        bridges:
          name: bridges
          tags: []
        firewalls:
          name: firewalls
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Firewall/
        open-policy-agent:
          name: Open Policy Agent
          description: |-
            Open Policy Agent is an open source,
            general-purpose policy engine that unifies policy enforcement across the stack.
          tags: []
          url: https://www.openpolicyagent.org/
        gitops:
          name: GitOps
          description: |-
            GitOps is a way to do Kubernetes application delivery.
            It works by using Git as a single source of truth for Kubernetes resources
            and everything else.
          tags: []
          url: https://www.redhat.com/en/topics/devops/what-is-gitops
        ansible:
          name: Ansible
          description: |-
            Ansible is an open-source software provisioning, configuration management,
            and application-deployment tool enabling infrastructure as code.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/ansible/ansible
        chef:
          name: Chef
          description: |-
            Chef is an open-source software automation platform that
            helps system administrators manage infrastructure and applications.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/chef/chef
        puppet:
          description: Puppet is an open-source software configuration management
            tool.
          name: Puppet
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/puppetlabs/puppet
        argocd:
          name: ArgoCD
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/argoproj/argo-cd
        jenkinsfile:
          name: Jenkinsfile
          tags: []
          url: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
        seccomp:
          name: seccomp
          tags: []
          url: https://man7.org/linux/man-pages/man2/seccomp.2.html
        strace:
          name: strace
          tags: []
          url: https://man7.org/linux/man-pages/man1/strace.1.html
        remove-direct-access:
          name: Remove direct access to infrastructure
          tags: []
        directory-service:
          name: Directory Service
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:DirectoryService/
        plugins:
          name: Plugins
          tags: []
        smartcard:
          name: Smartcard
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        yubikey:
          name: YubiKey
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        sms:
          name: SMS
          tags:
          - d3f:Multi-factorAuthentication
        totp:
          name: TOTP
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:One-timePassword/
        http-basic-authentic:
          name: HTTP-Basic Authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebAuthentication/
        vpn:
          name: VPN
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:VPN/
        for-applications-ch:
          name: 'For applications: Check default encoding'
          tags: []
        managing-secrets:
          name: managing secrets
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:CredentialHardening/
        crypto:
          name: crypto
          tags: []
        authentication:
          name: authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Authentication/
        rsyslog:
          name: rsyslog
          url: https://www.rsyslog.com/
          tags:
          - tool
          - logging
        logstash:
          name: logstash
          url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
          tags:
          - tool
          - logging
        fluentd:
          name: fluentd
          tags:
          - tool
          url: https://www.fluentd.org/
        bash:
          name: bash
          tags:
          - tool
          url: https://www.gnu.org/software/bash/
        owasp-logging-cheats:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        elk-stack:
          name: ELK-Stack
          tags: []
          url: https://www.elastic.co/elk-stack
        https-ht-transpare:
          name: https://ht.transpare
          tags: []
          url: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD
          description: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD%20Fileserver/books/SICUREZZA/Addison.Wesley.Security.Metrics.Mar.2007.pdf
        prometheus:
          name: Prometheus
          tags: []
          url: https://prometheus.io/
        collected:
          name: collected
          tags: []
        httpunit:
          name: HttpUnit
          tags: []
          url: http://httpunit.sourceforge.net/
        junit:
          name: JUnit
          tags:
          - unittest
          - d3f:UnitTestExecutionTool
          url: https://junit.org/junit5/
        karma:
          name: Karma
          description: Karma is a test runner for JavaScript.
          tags:
          - d3f:UnitTestExecutionTool
          url: https://karma-runner.github.io
        owasp-defectdojo:
          name: OWASP DefectDojo
          tags:
          - vulnerability management system
          - owasp
          url: https://github.com/DefectDojo/django-DefectDojo
          description: DefectDojo is a security program and vulnerability management
            tool. DefectDojo allows you to manage your application security program,
            maintain product and application information, triage vulnerabilities and
            push findings into defect trackers. Consolidate your findings into one
            source of truth with DefectDojo.
        purify:
          name: Purify
          tags:
          - vulnerability management system
          url: https://github.com/faloker/purify/
          description: |
            The goal of Purify to be an easy-in-use and efficient tool to
            simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
        see-other-actions-e:
          name: See other actions, e.g. "Treatment of defects with severity high".
          tags: []
        sast:
          name: SAST
          tags:
          - d3f:StaticAnalysisTool
          description: 'At SAST (Static Application Security Testing): Server-side
            / client-side teams can easily be recorded. With microservice architecture
            individual microservices can be used usually Teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:StaticAnalysisTool/
        dast:
          name: DAST
          tags:
          - d3f:DynamicAnalysisTool
          description: 'At DAST (Dynamic Application Security Testing): vulnerabilities
            are classified and can be assigned to server-side and client-side teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:DynamicAnalysisTool/
        owasp-defect-dojo:
          name: OWASP Defect Dojo
          tags: []
          url: https://github.com/DefectDojo/django-DefectDojo
        owasp-dependency-che:
          name: OWASP Dependency Check
          tags: []
          url: https://owasp.org/www-project-dependency-check/
        logparser-jenkins-pl:
          name: LogParser Jenkins Plugins
          tags: []
        owasp-code-pulse:
          name: OWASP Code Pulse
          tags: []
          url: https://www.owasp.org/index.php/OWASP_Code_Pulse
        ajax-spider:
          name: Ajax Spider
          tags:
          - d3f:DynamicAnalysisTool
          url: https://www.zaproxy.org/docs/desktop/addons/ajax-spider/
        curl:
          name: cURL
          tags: []
          url: https://curl.se/
        openapi:
          name: OpenAPI Specifications
          tags: []
          url: https://spec.openapis.org/
        owasp-zap:
          name: OWASP Zap
          tags:
          - vulnerability
          - scanner
          - d3f:DynamicAnalysisTool
          url: https://github.com/zaproxy/zaproxy
          description: |
            The OWASP Zed Attack Proxy (ZAP) is one of the world's most popular free security tools
            and is actively maintained by a dedicated international team of ...
        arachni:
          name: Arachni
          description: Arachni is a feature-full, modular, high-performance Ruby framework
            aimed towards helping penetration testers and administrators evaluate
            the security of web applications.
          url: https://github.com/Arachni/arachni
        zest:
          name: Zest
          url: https://www.zaproxy.org/docs/desktop/addons/zest/
          tags:
          - zap
          description: Zest is an experimental specialized scripting language (also
            known as a domain-specific language) originally developed by the Mozilla
            security team and is intended to be used in web oriented security tools.
        owasp-securecodebox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: |
            secureCodeBox is a kubernetes based, modularized toolchain for continuous security scans of your software project. Its goal is to orchestrate and easily automate a bunch of security-testing tools out of the box.
        kube-hunter:
          name: kube-hunter
          description: kube-hunter is a tool that helps you to hunt for security weaknesses
            in Kubernetes clusters. It is a customizable, easy to use and powerful
            hunting framework that enables security researchers and developers to
            test the security of their Kubernetes clusters and workloads.
          tags:
          - d3f:DynamicAnalysisTool
          - d3f:ContainerOrchestrationSoftware
          url: https://github.com/aquasecurity/kube-hunter
        openvas:
          name: openVAS
          tags: []
          url: https://www.openvas.org/
        htc-hydra:
          name: HTC Hydra
          tags:
          - password
          url: https://www.htc-cs.com/en/products/htc-hydra/
        netassert:
          name: netassert
          tags: []
          url: https://github.com/controlplaneio/netassert
        nmap:
          name: nmap
          tags: []
          url: https://nmap.org/
        owasp-amass:
          name: OWASP Amass
          tags: []
          url: https://github.com/OWASP/Amass
        k8spurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          - d3f:ContainerOrchestrationSoftware
          - d3f:DynamicAnalysisTool
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        pmd:
          name: PMD
          tags: []
        eslint:
          name: eslint
          tags:
          - d3f:StaticAnalysisTool
          url: https://eslint.org/
        findsecuritybugs:
          name: FindSecurityBugs
          tags: []
        jsprime:
          name: jsprime
          description: jsprime is a static analysis tool for JavaScript that detects
            security vulnerabilities in web applications. It is based on the JavaScript
            parser Esprima and the static analysis framework TSLint.
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/dpnishant/jsprime
        bdd-mobile-security:
          name: '[bdd-mobile-security'
          tags: []
          url: https://github.com/ing-bank/bdd-mobile-security-automation-framework
          description: '[bdd-mobile-security-automation-framework](https://github.com/ing-bank/bdd-mobile-security-automation-framework)'
        retire-js:
          name: retire.js
          tags: []
          url: https://github.com/RetireJS/retire.js/
        npm-audit:
          name: npm audit
          tags:
          - d3f:StaticAnalysisTool
          url: https://docs.npmjs.com/cli/audit
        sigmahq:
          name: SigmaHQ
          tags: []
          url: https://github.com/SigmaHQ/sigma
        dive-to-inspect-a-co:
          name: Dive to inspect a container images
          tags: []
          url: https://github.com/wagoodman/dive
        clusterscanner:
          url: https://github.com/SDA-SE/clusterscanner
          name: ClusterScanner
          tags:
          - docker
          - image
          - container
          - vulnerability
          - misconfiguration
          - securiity-tools
          - scanning
          description: Discover vulnerabilities and container image misconfiguration
            in production environments.
        dockerfile-with-hado:
          name: Dockerfile with hadolint
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/hadolint/hadolint
        deployment-with-kube:
          name: Deployment with kube-score
          tags: []
          url: https://github.com/zegl/kube-score
        kubesec:
          name: kubesec
          tags: []
          url: https://kubesec.io
        anchore-io:
          name: Anchore.io
          description: Anchore is a container image analysis and policy engine that
            enables you to understand the contents of your container images and ensure
            that they are secure and compliant.
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://anchore.com/
        clair:
          name: Clair
          description: Clair is an open source project for the static analysis of
            vulnerabilities in application containers (currently including appc and
            docker).
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/quay/clair
        openscap:
          name: OpenSCAP
          tags: []
          url: https://www.open-scap.org/
        vuls:
          name: Vuls
          tags: []
          url: https://github.com/future-architect/vuls
        kube-bench:
          name: kube-bench
          tags: []
          url: https://github.com/aquasecurity/kube-bench
        trufflehog:
          name: truffleHog
          description: Searches through git repositories for high entropy strings,
            digging deep into commit history.
          tags: []
          url: https://github.com/dxa4481/truffleHog
        go-pillage-registrie:
          name: go-pillage-registries
          tags: []
          url: https://github.com/nccgroup/go-pillage-registries
        trivy:
          name: https://github.com/aquasecurity/trivy
          description: A Simple and Comprehensive Vulnerability Scanner for Containers,
            Suitable for CI
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/aquasecurity/trivy
        registries-like-quay:
          name: Registries like quay
          tags: []
          description: Registries like quay, dockerhub provide (commercial) offerings,
            often not suitable for distroless images
        dockerfilelint:
          name: dockerfilelint
          tags:
          - sast
          - docker
          - dockerfile
          - d3f:StaticAnalysisTool
          - d3f:ContainerBuildTool
          url: https://github.com/replicatedhq/dockerfilelint
          description: dockerfilelint is an node module that analyzes a Dockerfile
            and looks for common traps, mistakes and helps enforce best practices.
        threat-matrix-for-storage:
          name: Threat Matrix for Storage
          url: https://www.microsoft.com/security/blog/2021/04/08/threat-matrix-for-storage/
          tags:
          - documentation
          - storage
          - cluster
          - kubernetes
        defend-the-core-kubernetes:
          name: Defend the core kubernetes security at every layer
          url: https://thenewstack.io/defend-the-core-kubernetes-security-at-every-layer/
          tags:
          - documentation
          - cluster
          - kubernetes
        business-friendly-vulnerability-metrics:
          name: Business friendly vulnerability management metrics
          url: https://medium.com/uber-security-privacy/business-friendly-vulnerability-management-metrics-cfd702fd7705
          tags:
          - documentation
          - vulnerability
          - vulnerability management system
        kubescape:
          name: kubescape
          description: kubescape is a tool that helps you scan your Kubernetes clusters
            to identify security misconfigurations as defined in Kubernetes Hardening
            Guidance by to NSA and CISA_
          url: https://github.com/armosec/kubescape
          tags:
          - kubernetes
          - vulnerability
          - misconfiguration
        azuredevops:
          name: Improve code quality with branch policies
          url: https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops
          tags:
          - source-code-protection
          - scm
        github-policies:
          name: About protected branches
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
          tags:
          - source-code-protection
          - scm
        sonarqube:
          name: In-Depth Linting of Your TypeScript While Coding
          url: https://blog.sonarsource.com/in-depth-linting-of-your-typescript-while-coding
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        stylecop:
          name: How to enforce a consistent coding style in your projects
          url: https://www.meziantou.net/how-to-enforce-a-consistent-coding-style-in-your-projects.htm
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        fortify-vscode-extension:
          name: Fortify Extension for Visual Studio Code
          url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
          tags:
          - ide
          - sast
        appscan-vscode-extension:
          name: HCL AppScan CodeSweep
          url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
          tags:
          - ide
          - sast
        checkmarx-vscode-extension:
          name: Setting Up the Visual Studio Code Extension Plugin
          url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
          tags:
          - ide
          - sast
        pre-commit-microsoft:
          name: DevSecOps control Pre-commit
          url: https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls#plan-and-develop
          tags:
          - pre-commit
        pre-commit-synopsis:
          name: Building your DevSecOps pipeline 5 essential activities
          url: https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/
          tags:
          - pre-commit
        pre-commit-python:
          name: Pre-commit hooks in Python
          url: https://github.com/pre-commit/pre-commit
          tags:
          - pre-commit
          - d3f:StaticAnalysisTool
        dependencyTrack:
          name: Dependency-Track is an intelligent Component Analysis platform that
            allows organizations to identify and reduce risk in the software supply
            chain. Dependency-Track takes a unique and highly beneficial approach
            by leveraging the capabilities of Software Bill of Materials (SBOM).
          url: https://github.com/DependencyTrack/dependency-track
          tags:
          - sca
          - inventory
        juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: In case you do not have the budget to hire an external security
            expert, an option is to use the OWASP JuiceShop on a "hacking Friday"
        dvwa:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        loggingCheatSheet:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        secureCodeBox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: secureCodeBox is a kubernetes based, modularized toolchain
            for continuous security scans of your software project. Its goal is to
            orchestrate and easily automate a bunch of security-testing tools out
            of the box.
        K8sPurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        hashicorp-vault:
          name: Hashicorp Vault
          tags:
          - authentication
          - authorization
          - secrets
          - infrastructure
          url: https://github.com/hashicorp/vault
          description: |
            A tool for secrets management, encryption as a service, and privileged access management.
        stoplight-spectral:
          name: Spectral
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/stoplightio/spectral
          description: |
            Spectral is a flexible JSON/YAML linter built with extensibility in mind.
            It uses JSON/YAML path rules to describe the problems you want to find.
        api-oas-checker:
          name: API OAS Checker
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/italia/api-oas-checker
          description: |
            A tool to check OpenAPI specifications using a comprehensive ruleset based
            on API best practices.
        coveragepy:
          name: Coverage.py
          tags:
          - testing
          - coverage
          - d3f:DynamicAnalysisTool
          url: https://github.com/nedbat/coveragepy
          description: |
            Code coverage measurement for Python
        github-dependabot:
          name: Dependabot
          tags:
          - dependency
          - dependency-management
          - scm
          url: https://github.com/dependabot/dependabot-core
          description: |
            Dependabot creates pull requests to keep your dependencies secure and up-to-date.
        github-super-linter:
          name: Super-Linter
          tags:
          - linting
          - scm
          - d3f:StaticAnalysisTool
          url: https://github.com/github/super-linter
          description: |
            Lint code bases to catch common errors and enforce code style
        schemathesis:
          name: Schemathesis
          tags:
          - testing
          - api
          - documentation
          url: https://github.com/schemathesis/schemathesis
          description: |
            Schemathesis is a tool for testing web applications and services by sending requests based on the Open API / Swagger schema.
        martin-feature-toggles:
          name: Feature Toggles
          tags:
          - development
          - architecture
          url: https://martinfowler.com/articles/feature-toggles.html
          description: |
            Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. (Pete Hodgson)
        tw-talisman:
          name: Talisman
          tags:
          - scm
          - secrets
          - d3f:StaticAnalysisTool
          url: https://github.com/thoughtworks/talisman
          description: |
            Talisman is a git hook that scans your commits for secrets before you push them to a remote repository.
        spotbugs:
          name: SpotBugs
          tags:
          - static-analysis
          - java
          - d3f:StaticAnalysisTool
          url: https://github.com/spotbugs/spotbugs
          description: |
            SpotBugs is a program which uses static analysis to look for bugs in Java code.
      references:
        samm2:
        - I-SD-1-B
        iso27001-2017:
        - 9.4.5
        - 14.2.6
        d3f:
        - ApplicationConfigurationHardening
      isImplemented: false
      evidence: ""
      comments: ""
    Handover of confidential parameters:
      risk: Parameters are often used to set credentials, for example by starting
        containers or applications; these parameters can often be seen by any one
        listing running processes on the target system.
      measure: Encryption ensures confidentiality of credentials e.g. from unauthorized
        access on the file system. Also, the usage of a credential management system
        can help protect credentials.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 3
      implementation: ""
      dependsOn:
      - Environment depending configuration parameters (secrets)
      references:
        samm2:
        - I-SD-2-B
        iso27001-2017:
        - 14.1.3
        - 13.1.3
        - 9.4.3
        - 9.4.1
        - 10.1.2
        d3f:
        - ApplicationConfigurationHardening
      isImplemented: false
      evidence: ""
      comments: ""
    Inventory of dependencies:
      risk: In case a vulnerability of severity high or critical is known by the organization,
        it needs to be known where an artifacts with that vulnerability is deployed
        with which dependencies.
      measure: A documented inventory of dependencies used in images and containers
        exists.
      dependsOn:
      - Defined deployment process
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 3
      usefulness: 3
      dependesOn:
      - SBOM of components
      level: 3
      implementation:
      - name: Dependency-Track is an intelligent Component Analysis platform that
          allows organizations to identify and reduce risk in the software supply
          chain. Dependency-Track takes a unique and highly beneficial approach by
          leveraging the capabilities of Software Bill of Materials (SBOM).
        url: https://github.com/DependencyTrack/dependency-track
        tags:
        - sca
        - inventory
      references:
        samm2:
        - I-SD-2-A
        iso27001-2017:
        - "8.1"
        - "8.2"
        d3f:
        - SoftwareInventory
      isImplemented: false
      evidence: ""
      comments: ""
    Inventory of running artifacts:
      risk: In case a vulnerability of severity high or critical exists, it needs
        to be known where an artifacts (e.g. container image) with that vulnerability
        is deployed.
      measure: A documented inventory or a possibility to gather the needed information.
      dependsOn:
      - Defined deployment process
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 3
      usefulness: 3
      level: 3
      implementation: []
      references:
        samm2:
        - I-SD-2-A
        iso27001-2017:
        - "8.1"
        - "8.2"
        d3f:
        - SoftwareInventory
      isImplemented: false
      evidence: ""
      comments: ""
    Rolling update on deployment:
      risk: While a deployment is performed, the application can not be reached.
      measure: A deployment without downtime is performed*.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 2
      level: 3
      implementation:
      - name: Docker
        url: https://github.com/moby/moby
        tags: []
      - name: Webserver
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:WebServer/
      - name: rolling update
        tags: []
      dependsOn:
      - Defined deployment process
      references:
        samm2:
        - I-SD-1-A
        iso27001-2017:
        - 12.5.1
        - 14.2.2
        - 17.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Same artifact for environments:
      risk: Building of an artifact for different environments means that an untested
        artifact might reach the production environment.
      measure: Building an artifact once and deploying it to different environments
        means that only tested artifacts are allowed to reach the production environment
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 3
      implementation:
      - name: Docker
        url: https://github.com/moby/moby
        tags: []
      dependsOn:
      - Defined build process
      references:
        samm2:
        - I-SD-2-A
        iso27001-2017:
        - 14.3.1
        - 14.2.8
        - 12.1.4
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of feature toggles:
      risk: Using environment variables to enable or disable features can lead to
        a situation where a feature is accidentally enabled in the production environment.
      measure: Usage of environment independent configuration parameter, called static
        feature toggles, mitigates the risk of accidentally enabling insecure features
        in production.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 2
      level: 3
      implementation:
      - name: Docker
        url: https://github.com/moby/moby
        tags: []
      - name: Feature Toggles
        tags:
        - development
        - architecture
        url: https://martinfowler.com/articles/feature-toggles.html
        description: |
          Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. (Pete Hodgson)
      dependsOn:
      - Same artifact for environments
      references:
        samm2: []
        iso27001-2017:
        - 14.3.1
        - 14.2.8
        - 14.2.9
        - 12.1.4
        d3f:
        - ApplicationConfigurationHardening
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of trusted images:
      risk: Developers or operations might start random images in the production cluster
        which have malicious code or known vulnerabilities.
      measure: Create image assessment criteria, perform an evaluation of images and
        create a whitelist of artifacts/container images/virtual machine images.
      implementation:
      - name: Kubernetes Admission Controller can whitelist registries and/or whitelist
          a signing key.
        tags:
        - d3f:ContainerOrchestrationSoftware
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 3
      level: 2
      references:
        samm2:
        - I-SD-2-A
        iso27001-2017:
        - 15.1.1
        - 15.1.2
        - 15.1.3
        - 14.1.3
      isImplemented: false
      evidence: ""
      comments: ""
  Patch Management:
    A patch policy is defined:
      risk: Exploit of known vulnerabilities in long-running artifacts.
      measure: A patch policy for all artifacts (e.g. in container images) is defined.
        Images are periodically rebuilt according to a defined policy.
      difficultyOfImplementation:
        knowledge: 3
        time: 1
        resources: 2
      usefulness: 4
      level: 1
      implementation: []
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
        - 12.5.1
        - 14.2.5
        d3f:
        - SoftwareUpdate
      isImplemented: false
      evidence: ""
      comments: ""
    Automated PRs for patches:
      risk: Exploit of known vulnerabilities in long-running artifacts.
      measure: |-
        Fast patching of third party component is needed. The DevOps way is
        to have an automated pull request for new components. This includes:

        - Applications
        - Virtualized operating system components (e.g. container images)
        - Operating Systems
        - Infrastructure as Code/GitOps (e.g. argocd)
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 5
      level: 1
      implementation:
      - name: dependabot
        tags: []
        url: https://dependabot.com/
      - name: Jenkins
        tags: []
        url: https://www.jenkins.io/
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Nightly build of images (base images):
      risk: Vulnerabilities in running containers stay for too long and might get
        exploited.
      measure: Custom base images are getting build at least nightly. In case the
        packages in the base image e.g. <i>centos</i> has changed, the build server
        triggers the build of depending images.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 2
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Reduction of the attack surface:
      risk: Unneeded components and permissions can be exploited.
      measure: Removal of unneeded components, dependencies, files or file access
        rights. For container images the usage of distroless images is recommended.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 2
      usefulness: 3
      level: 2
      implementation:
      - name: Distroless Container Images
        tags:
        - d3f:ContainerImage
        url: https://github.com/GoogleContainerTools/distroless
      - name: Fedora CoreOS
        tags: []
        url: https://getfedora.org/coreos
      references:
        samm2:
        - I-SB-2
        iso27001-2017:
        - hardening is missing in ISO 27001
        - 14.2.1
        d3f:
        - LocalFilePermissions
        - SystemConfigurationPermissions
        - DeadCodeElimination
        - ApplicationConfigurationHardening
        - SoftwareInventory
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of a maximum lifetime for images:
      risk: Vulnerabilities in long-running container images can be exploited. Long
        running containers have potential memory leaks. A compromised container might
        get killed by restarting the container (e.g. in case the attacker has not
        reached the persistence layer).
      measure: A maximum lifetime for images is defined, e.g. 30 days. The project
        images, based on the nightly builded images, are deployed at leased once within
        the defined lifetime. Third Party images are deployed at least once within
        the defined lifetime.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2:
        - O-EM-1-B
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of a short maximum lifetime for images:
      risk: Exploit of known vulnerabilities in long-running artifacts.
      measure: |
        Build and deploy an artifact whenever a new component (e.g. package, container base image)
        is available, or on a periodic basis, according to an established policy.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 3
      level: 4
      implementation:
      - name: Daily rebuild of container images
        tags: []
        description: |
          Sample concept:
          1. each container has a set lifetime and is killed/replaced with a new container
          multiple times a day where you have
          some form of a graceful replacement to ensure no (short) service outage will
          occur to the end users.
          2. twice a day a rebuild of images is done. The rebuilds are put into a automated testing pipeline.
          If the testing has no blocking issues the new images will be released for deployment during the
          next "restart" of a container. What has to be done, is to ensure the new
          containers are deployed in some canary deployment manner, this will ensure
          that if (and only if) something buggy has been introduced which breaks functionality
          the canary deployment will make sure the "older version" is being used and
                          not the buggy newer one.
      references:
        samm2:
        - O-EM-2-B
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
Culture and Organization:
  Design:
    Conduction of advanced threat modeling:
      risk: Inadequate identification of business and technical risks.
      measure: Threat modeling is performed by using reviewing user stories and producing
        security driven data flow diagrams.
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 2
      usefulness: 3
      level: 3
      dependsOn:
      - Conduction of simple threat modeling on technical level
      - Creation of threat modeling processes and standards
      description: |
        **Example High Maturity Scenario:**

        Based on a detailed threat model defined and updated through code, the team decides the following:

        * Local encrypted caches need to expire and auto-purged.
        * Communication channels encrypted and authenticated.
        * All secrets persisted in shared secrets store.
        * Frontend designed with permissions model integration.
        * Permissions matrix defined.
        * Input is escaped output is encoded appropriately using well established libraries.

        Source: OWASP Project Integration Project
      implementation:
      - name: Whiteboard
        tags:
        - defender
        - threat-modeling
        - collaboration
        - whiteboard
        url: https://en.wikipedia.org/wiki/Whiteboard
      - name: Miro (or any other collaborative board)
        tags:
        - defender
        - threat-modeling
        - collaboration
        - whiteboard
        url: https://miro.com/
      - name: Draw.io
        tags:
        - defender
        - threat-modeling
        - whiteboard
        url: https://github.com/jgraph/drawio-desktop
      - name: Threat Modeling Playbook
        tags:
        - owasp
        - defender
        - threat-modeling
        - whiteboard
        url: https://github.com/Toreon/threat-model-playbook
      - name: OWASP SAMM
        tags:
        - threat-modeling
        - owasp
        - defender
        url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
      - name: Threagile
        tags:
        - threat-modeling
        url: https://github.com/Threagile/threagile
      - name: Threat Matrix for Storage
        url: https://www.microsoft.com/security/blog/2021/04/08/threat-matrix-for-storage/
        tags:
        - documentation
        - storage
        - cluster
        - kubernetes
      references:
        samm2:
        - D-TA-2-B
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of risk assessment
        - 8.2.1
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of simple threat modeling on business level:
      risk: Business related threats are discovered too late in the development and
        deployment process.
      measure: Threat modeling of business functionality is performed during the product
        backlog creation to facilitate early detection of security defects.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      implementation: []
      references:
        samm2:
        - D-TA-2-B
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of risk assessment
        - 8.2.1
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of simple threat modeling on technical level:
      risk: Technical related threats are discovered too late in the development and
        deployment process.
      measure: Threat modeling of technical features is performed during the product
        sprint planning.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 1
      usefulness: 3
      level: 1
      implementation:
      - name: Whiteboard
        tags:
        - defender
        - threat-modeling
        - collaboration
        - whiteboard
        url: https://en.wikipedia.org/wiki/Whiteboard
      - name: Miro (or any other collaborative board)
        tags:
        - defender
        - threat-modeling
        - collaboration
        - whiteboard
        url: https://miro.com/
      - name: Draw.io
        tags:
        - defender
        - threat-modeling
        - whiteboard
        url: https://github.com/jgraph/drawio-desktop
      - name: Threat Modeling Playbook
        tags:
        - owasp
        - defender
        - threat-modeling
        - whiteboard
        url: https://github.com/Toreon/threat-model-playbook
      - name: OWASP SAMM
        tags:
        - threat-modeling
        - owasp
        - defender
        url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
      - name: Threat Matrix for Storage
        url: https://www.microsoft.com/security/blog/2021/04/08/threat-matrix-for-storage/
        tags:
        - documentation
        - storage
        - cluster
        - kubernetes
      description: |
        # OWASP SAMM Description
        Threat modeling is a structured activity for identifying, evaluating, and managing system threats, architectural design flaws, and recommended security mitigations. It is typically done as part of the design phase or as part of a security assessment.

        Threat modeling is a team exercise, including product owners, architects, security champions, and security testers. At this maturity level, expose teams and stakeholders to threat modeling to increase security awareness and to create a shared vision on the security of the system.

        At maturity level 1, you perform threat modeling ad-hoc for high-risk applications and use simple threat checklists, such as STRIDE. Avoid lengthy workshops and overly detailed lists of low-relevant threats. Perform threat modeling iteratively to align to more iterative development paradigms. If you add new functionality to an existing application, look only into the newly added functions instead of trying to cover the entire scope. A good starting point is the existing diagrams that you annotate during discussion workshops. Always make sure to persist the outcome of a threat modeling discussion for later use.

        Your most important tool to start threat modeling is a whiteboard, smartboard, or a piece of paper. Aim for security awareness, a simple process, and actionable outcomes that you agree upon with your team.      Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage.

        Source: https://owaspsamm.org/model/design/threat-assessment/stream-b/
        # OWASP Project Integration Description
        There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one.

        A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/).

        OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/).

        There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another.

        > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._

        ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png "Threat Model")

        Last, if the organizations maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function.

        ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png "SKF")

        This practice has the side effect that it trains non-security specialists to think like attackers.

        The outcomes of this stage should help lay the foundation of secure design and considerations.

        **Example Low Maturity Scenario:**

        Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password.

        Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext.

        Frontend serves data over GraphQL as a thin layer between caching system and end user.

        GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes.

        Source: OWASP Project Integration Project
      references:
        samm2:
        - D-TA-2-B
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of risk assessment
        - 8.2.1
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Creation of advanced abuse stories:
      risk: Simple user stories are not going deep enough. Relevant security considerations
        are performed. Security flaws are discovered too late in the development and
        deployment process
      measure: Advanced abuse stories are created as part of threat modeling activities.
      difficultyOfImplementation:
        knowledge: 4
        time: 2
        resources: 1
      usefulness: 4
      level: 4
      dependsOn:
      - Creation of simple abuse stories
      implementation:
      - name: Don't Forget EVIL User stories
        tags: []
        url: https://www.owasp.org/index.php/Agile_Software_Development
        description: '[Do not Forget EVIL User Stories](https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories)
          and [Practical Security Stories and Security Tasks for Agile Development
          Environments](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
      references:
        samm2:
        - D-TA-2-B
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of project management
        - 6.1.5
        - may be part of risk assessment
        - 8.1.2
      isImplemented: false
      evidence: ""
      comments: ""
    Creation of simple abuse stories:
      risk: User stories mostly don't consider security implications. Security flaws
        are discovered too late in the development and deployment process.
      measure: Abuse stories are created during the creation of user stories.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 3
      implementation:
      - name: Don't Forget EVIL User stories
        tags: []
        url: https://www.owasp.org/index.php/Agile_Software_Development
        description: '[Do not Forget EVIL User Stories](https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories)
          and [Practical Security Stories and Security Tasks for Agile Development
          Environments](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
      dependsOn:
      - Conduction of simple threat modeling on technical level
      - Creation of threat modeling processes and standards
      references:
        samm2:
        - D-TA-2-B
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of project management
        - 6.1.5
        - may be part of risk assessment
        - 8.1.2
      isImplemented: false
      evidence: ""
      comments: ""
    Creation of threat modeling processes and standards:
      risk: Inadequate identification of business and technical risks.
      measure: Creation of threat modeling processes and standards through the organization
        helps to enhance the security culture and provide more structure to the threat
        model exercises.
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 2
      usefulness: 3
      level: 3
      description: ""
      implementation:
      - name: Threat Modeling Playbook
        tags:
        - owasp
        - defender
        - threat-modeling
        - whiteboard
        url: https://github.com/Toreon/threat-model-playbook
      - name: OWASP SAMM
        tags:
        - threat-modeling
        - owasp
        - defender
        url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
      dependsOn:
      - Conduction of simple threat modeling on technical level
      references:
        samm2:
        - D-TA-3-B
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of risk assessment
        - 8.2.1
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Information security targets are communicated:
      risk: Employees don't known their organizations security targets. Therefore
        security is not considered during development and administration as much as
        it should be.
      measure: Transparent and timely communication of the security targets by senior
        management is essential to ensure teams' buy-in and support.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 4
      level: 1
      implementation: []
      references:
        samm2: []
        iso27001-2017:
        - 5.1.1
        - 7.2.1
      isImplemented: false
      evidence: ""
      comments: ""
  Education and Guidance:
    Ad-Hoc Security trainings for software developers:
      risk: Understanding security is hard and personnel needs to be trained on it.
        Otherwise, flaws like an SQL Injection might be introduced into the software
        which might get exploited.
      measure: Provide security awareness training for all personnel involved in software
        development Ad-Hoc.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 3
      level: 1
      implementation:
      - name: OWASP Juice Shop
        tags:
        - training
        url: https://github.com/bkimminich/juiceshop
        description: |-
          In case you do not have the budget to hire an external security expert,
          an option is to use the OWASP JuiceShop on a "hacking Friday"
      - name: OWASP Cheatsheet Series
        tags:
        - secure coding
        url: https://cheatsheetseries.owasp.org/
      references:
        samm2:
        - G-EG-1-A
        iso27001-2017:
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Aligning security in teams:
      risk: The concept of Security Champions might suggest that only he/she is responsible
        for security. However, everyone in the project team should be responsible
        for security.
      measure: By aligning security SME with project teams, a higher security standard
        can be achieved.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 1
      usefulness: 5
      implementation:
      - name: Involve Security SME
        tags: []
        description: Security SME are involved in discussion for requirements analysis,
          software design and sprint planning to provide guidance and suggestions.
      level: 4
      references:
        samm2:
        - G-EG-3-B
        iso27001-2017:
        - 7.1.1
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of build-it, break-it, fix-it contests:
      risk: Understanding security is hard, even for security champions and the conduction
        of security training often focuses on breaking a component instead of building
        a component secure.
      measure: The build-it, break-it, fix-it contest allows to train people with
        security related roles like security champions the build, break and fix part
        of a secure application. This increases the learning of building secure components.
      difficultyOfImplementation:
        knowledge: 5
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      implementation:
      - name: Build it Break it Fix it Contest
        tags: []
        url: https://builditbreakit.org/
      references:
        samm2:
        - G-EG-2-A
        iso27001-2017:
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of collaborative security checks with developers and system administrators:
      risk: Security checks by external companies do not increase the understanding
        of an application/system for internal employees.
      measure: Periodically security reviews of source code (SCA), in which security
        SME, developers and operations are involved, are effective at increasing the
        robustness of software and the security knowledge of the teams involved.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      implementation: []
      references:
        samm2:
        - G-EG-2-A
        iso27001-2017:
        - Mutual review of source code is not explicitly required in ISO 27001 may
          be
        - 7.2.2
        - 12.6.1
        - 12.7.1
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of collaborative team security checks:
      risk: Development teams limited insight over security practices.
      measure: Mutual security testing the security of other teams project enhances
        security awareness and knowledge.
      difficultyOfImplementation:
        resources: 2
        knowledge: 4
        time: 4
      usefulness: 2
      level: 4
      implementation: []
      references:
        samm2:
        - G-EG-1-A
        - G-EG-2-A
        iso27001-2017:
        - Mutual security testing is not explicitly required in ISO 27001 may be
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of war games:
      risk: Understanding incident response plans during an incident is hard and ineffective.
      measure: War Games like activities help train for incidents. Security SMEs create
        attack scenarios in a testing environment enabling the trainees to learn how
        to react in case of an incident.
      difficultyOfImplementation:
        knowledge: 4
        time: 5
        resources: 4
      usefulness: 3
      level: 4
      implementation: []
      references:
        samm2:
        - G-EG-2-A
        iso27001-2017:
        - ware games are not explicitly required in ISO 27001 may be
        - 7.2.2
        - "16.1"
        - 16.1.5
      isImplemented: false
      evidence: ""
      comments: ""
    Each team has a security champion:
      risk: No one feels directly responsible for security and the security champion
        does not have enough time to allocate to each team.
      measure: Each team defines an individual to be responsible for security. These
        individuals are often referred to as 'security champions'
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      description: "Implement a program where each software development team has a
        member considered a \u201CSecurity Champion\u201D who is the liaison between
        Information Security and developers. Depending on the size and structure of
        the team the \u201CSecurity Champion\u201D may be a software developer, tester,
        or a product manager. The \u201CSecurity Champion\u201D has a set number of
        hours per week for Information Security related activities. They participate
        in periodic briefings to increase awareness and expertise in different security
        disciplines. \u201CSecurity Champions\u201D have additional training to help
        develop these roles as Software Security subject-matter experts. You may need
        to customize the way you create and support \u201CSecurity Champions\u201D
        for cultural reasons.\n\nThe goals of the position are to increase effectiveness
        and efficiency of application security and compliance and to strengthen the
        relationship between various teams and Information Security. To achieve these
        objectives, \u201CSecurity Champions\u201D assist with researching, verifying,
        and prioritizing security and compliance related software defects. They are
        involved in all Risk Assessments, Threat Assessments, and Architectural Reviews
        to help identify opportunities to remediate security defects by making the
        architecture of the application more resilient and reducing the attack threat
        surface.\nSource: [OWASP SAMM](https://owaspsamm.org/model/governance/education-and-guidance/stream-b/)\n"
      implementation:
      - name: OWASP Security Champions Playbook
        tags:
        - security champions
        url: https://github.com/c0rdis/security-champions-playbook
      references:
        samm2:
        - G-EG-1-B
        - G-EG-2-B
        iso27001-2017:
        - security champions are missing in ISO 27001 most likely
        - 7.2.1
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Regular security training for all:
      risk: Understanding security is hard.
      measure: Provide security awareness training for all internal personnel involved
        in software development on a regular basis like twice in a year for 1-3 days.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 4
      level: 2
      description: |
        Conduct security awareness training for all roles currently involved in the management, development, testing, or auditing of the software. The goal is to increase the awareness of application security threats and risks, security best practices, and secure software design principles. Develop training internally or procure it externally. Ideally, deliver training in person so participants can have discussions as a team, but Computer-Based Training (CBT) is also an option.

        Course content should include a range of topics relevant to application security and privacy, while remaining accessible to a non-technical audience. Suitable concepts are secure design principles including Least Privilege, Defense-in-Depth, Fail Secure (Safe), Complete Mediation, Session Management, Open Design, and Psychological Acceptability. Additionally, the training should include references to any organization-wide standards, policies, and procedures defined to improve application security. The OWASP Top 10 vulnerabilities should be covered at a high level.

        Training is mandatory for all employees and contractors involved with software development and includes an auditable sign-off to demonstrate compliance. Consider incorporating innovative ways of delivery (such as gamification) to maximize its effectiveness and combat desensitization.

        [Source: OWASP SAMM 2](https://owaspsamm.org/model/governance/education-and-guidance/stream-a/)
      implementation:
      - name: OWASP Juice Shop
        tags:
        - training
        url: https://github.com/bkimminich/juiceshop
        description: |-
          In case you do not have the budget to hire an external security expert,
          an option is to use the OWASP JuiceShop on a "hacking Friday"
      - name: OWASP Cheatsheet Series
        tags:
        - secure coding
        url: https://cheatsheetseries.owasp.org/
      references:
        samm2:
        - G-EG-1-A
        iso27001-2017:
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Regular security training for externals:
      risk: Understanding security is hard.
      measure: Provide security awareness training for all personnel including externals
        involved in software development on a regular basis.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 3
      usefulness: 4
      level: 4
      implementation:
      - name: OWASP Juice Shop
        tags:
        - training
        url: https://github.com/bkimminich/juiceshop
        description: |-
          In case you do not have the budget to hire an external security expert,
          an option is to use the OWASP JuiceShop on a "hacking Friday"
      - name: https://cheatsheetseries.owasp.org/
        tags:
        - training
        - secure coding
        url: https://cheatsheetseries.owasp.org/
      references:
        samm2:
        - G-EG-3-A
        iso27001-2017:
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Regular security training of security champions:
      risk: Understanding security is hard, even for security champions.
      measure: Regular security training of security champions.
      assessment: |
        - Process Documentation: TODO
        - Training Content: TOODO
      difficultyOfImplementation:
        knowledge: 4
        time: 2
        resources: 2
      usefulness: 5
      level: 2
      implementation:
      - name: OWASP Cheatsheet Series
        tags:
        - secure coding
        url: https://cheatsheetseries.owasp.org/
      dependsOn:
      - Each team has a security champion
      references:
        samm2:
        - D-TA-2-B
        - G-EG-1-A
        iso27001-2017:
        - security champions are missing in ISO 27001
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    Reward of good communication:
      risk: Employees are not getting excited about security.
      measure: Good communication and transparency encourages cross-organizational
        support. Gamification of security is also known to help, examples include
        T-Shirts, mugs, cups, giftcards and 'High-Fives'.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 3
      level: 2
      implementation:
      - name: Motivate people
        tags:
        - security champions
        - gamification
        - nudging
        url: https://github.com/wurstbrot/security-pins
        description: |-
          Enhance motivation can be performed with the distribution of pins
          as a reward, see [OWASP Security Pins Project](https://github.com/wurstbrot/security-pins)
      - name: OWASP Top 10 Maturity Categories for Security Champions
        tags:
        - security champions
        url: https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
      references:
        samm2:
        - G-EG-1-B
        iso27001-2017:
        - not required by ISO 27001
        - interestingly enough A7.2.3 is requiring a process to handle misconduct
          but nothing to promote good behavior.
      isImplemented: false
      evidence: ""
      comments: ""
    Security code review:
      risk: Understanding security is hard.
      measure: |
        The following areas of code tend to have a high-risk of containing security vulnerabilities:
          - Crypto implementations / usage
          - Parser, unparser
          - System configuration
          - Authentication, authorization
          - Session management
          - Request throttling
          - :unicorn: (self-developed code, only used in that one software)
      description: |
        ### Benefits
        - New vulnerabilities may be found before reaching production.
        - Old vulnerabilities are found and fixed.
      assessment: |
        - Present the performed reviews (including participants, findings, consequences) and assess whether it is reasonable.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 3
      level: 1
      implementation:
      - name: CWE Top 25 Most Dangerous Software Weaknesses
        tags:
        - documentation
        - threat
        url: https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html
      credits: |
        AppSecure-nrw [Security Belts](https://github.com/AppSecure-nrw/security-belts/)
      references:
        samm2:
        - V-ST-1-B
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    Security consulting on request:
      risk: Not asking a security expert when questions regarding security appear
        might lead to flaws.
      measure: Security consulting to teams is given on request. The security consultants
        can be internal or external.
      difficultyOfImplementation:
        knowledge: 3
        time: 1
        resources: 1
      usefulness: 3
      level: 1
      implementation:
      - name: OWASP Cheatsheet Series
        tags:
        - secure coding
        url: https://cheatsheetseries.owasp.org/
      references:
        samm2:
        - G-EG-1-A
        iso27001-2017:
        - security consulting is missing in ISO 27001 may be
        - 6.1.1
        - 6.1.4
        - 6.1.5
      isImplemented: false
      evidence: ""
      comments: ""
    Security-Lessoned-Learned:
      risk: After an incident, a similar incident might reoccur.
      measure: Running a 'lessons learned' session after an incident helps drive continuous
        improvement. Regular meetings with security champions are a good place to
        share and discuss lessons learned.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      implementation: []
      references:
        samm2:
        - O-IM-3-B
        iso27001-2017:
        - 16.1.6
      isImplemented: false
      evidence: ""
      comments: ""
    Simple mob hacking:
      risk: Understanding security is hard.
      measure: |
        Participate with your whole team in a simple mob hacking session organized by the Security Champion Guild.
        In the session the guild presents a vulnerable application and together you look at possible exploits.
        Just like in mob programming there is one driver and several navigators.
      description: |
        ### Guidelines for your simple mob hacking session
        - All exploits happen via the user interface.
        - No need for security/hacking tools.
        - No need for deep technical or security knowledge.
        - Use an insecure training app, e.g., [DVWA](https://dvwa.co.uk/) or [OWASP Juice Shop](https://owasp.org/www-project-juiceshop/).
        - Encourage active participation, e.g., use small groups.
        - Allow enough time for everyone to run at least one exploit.

        ### Benefits
        - The team gets an idea of how exploits can look like and how easy applications can be attacked.
        - The team understands functional correct working software can be highly insecure and easy to exploit.
      difficultyOfImplementation:
        knowledge: 5
        time: 3
        resources: 1
      usefulness: 3
      level: 2
      credits: |
        AppSecure-nrw [Security Belts](https://github.com/AppSecure-nrw/security-belts/)
      implementation:
      - name: OWASP Juice Shop
        tags:
        - training
        url: https://github.com/bkimminich/juiceshop
        description: |-
          In case you do not have the budget to hire an external security expert,
          an option is to use the OWASP JuiceShop on a "hacking Friday"
      - name: Damn Vulnerable Web Application
        tags:
        - training
        description: Simple Application with intended vulnerabilities. HTML based.
      references:
        samm2:
        - G-EG-1-A
        iso27001-2017:
        - 7.2.2
      isImplemented: false
      evidence: ""
      comments: ""
  Process:
    Approval by reviewing any new version:
      risk: An individual might forget to implement security measures to protect source
        code or infrastructure components.
      measure: On each new version (e.g. Pull Request) of source code or infrastructure
        components a security peer review of the changes is performed (two eyes principle)
        and approval given by the reviewer.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      implementation: []
      references:
        samm2: []
        iso27001-2017:
        - peer review - four eyes principle is not explicitly required by ISO 27001
        - 6.1.2
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Definition of a change management process:
      risk: The impact of a change is not controlled because these are not recorded
        or documented.
      measure: Each change of a system is automatically recorded and adequately logged.
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      implementation: []
      references:
        samm2: []
        iso27001-2017:
        - 14.2.2
        - 12.1.2
        - 12.4.1
      isImplemented: false
      evidence: ""
      comments: ""
    Definition of simple BCDR practices for critical components:
      risk: In case of an emergency, like a power outage, DR actions to perform are
        not clear. This leads to reaction and remediation delays.
      measure: By understanding and documenting a business continuity and disaster
        recovery (BCDR) plan, the overall availability of systems and applications
        is increased. Success factors like responsibilities, Service Level Agreements,
        Recovery Point Objectives, Recovery Time Objectives or Failover must be fully
        documented and understood.
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 2
      usefulness: 4
      level: 1
      implementation: []
      references:
        samm2: []
        iso27001-2017:
        - 17.1.1
      isImplemented: false
      evidence: ""
      comments: ""
    Prevention of unauthorized installation:
      risk: Unapproved components are used.
      measure: Components must be whitelisted. Regular scans on the docker infrastructure
        (e.g. cluster) need to be performed, to verify that only standardized base
        images are used.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 3
      level: 3
      implementation:
      - name: 'Example: All docker images used by teams need to be based on standard
          images.'
        tags: []
      comment: By preventing teams from trying out new components, innovation might
        be hampered
      references:
        samm2: []
        iso27001-2017:
        - 12.5.1
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
Implementation:
  Application Hardening:
    App. Hardening Level 2:
      risk: Using an insecure application might lead to a compromised application.
        This might lead to total data theft or data modification.
      measure: |
        Following frameworks like the
          <ul>
            <li>OWASP Application Security Verification Standard Level 2</li>
            <li>OWASP Mobile Application Security Verification Standard Level 2</li>
          </ul>
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - name: OWASP ASVS
        tags: []
        url: https://owasp.org/www-project-application-security-verification-standard/
      - name: OWASP MASVS
        tags: []
        url: https://github.com/OWASP/owasp-masvs
      references:
        samm2:
        - D-SR-2-A
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    App. Hardening Level 3:
      risk: Using an insecure application might lead to a compromised application.
        This might lead to total data theft or data modification.
      measure: |
        Following frameworks like the
          <ul>
            <li>OWASP Application Security Verification Standard Level 3</li>
            <li>OWASP Mobile Application Security Verification Standard Maturity Requirements</li>
          </ul>
          and gain around 75% coverage of both.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 2
      usefulness: 4
      level: 3
      implementation:
      - name: OWASP ASVS
        tags: []
        url: https://owasp.org/www-project-application-security-verification-standard/
      - name: OWASP MASVS
        tags: []
        url: https://github.com/OWASP/owasp-masvs
      references:
        samm2:
        - D-SR-3-A
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Application Hardening Level 1:
      risk: Using an insecure application might lead to a compromised application.
        This might lead to total data theft or data modification.
      measure: |
        Following frameworks like the
          <ul>
            <li>OWASP Application Security Verification Standard Level 1</li>
            <li>OWASP Mobile Application Security Verification Standard Level 1</li>
          </ul>

        in all applications provides a good baseline.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 2
      usefulness: 4
      level: 1
      description: |
        To tackle the security of code developed in-house, OWASP offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/) demonstrating how to implement features securely. Moreover, the Security Knowledge Framework[1] offers an extensive library of code patterns spanning several programming languages. These patterns can be used to not only jumpstart the development process, but also do so securely.

        [...]

        ### Planning aka Requirements Gathering & Analysis
        The Requirements gathering process tries to answer the question: _"What is the system going to do?"_ At this stage, the [SAMM project](https://owaspsamm.org/model/) offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/security-requirements/stream-a/) software development and [third party](https://owaspsamm.org/model/design/security-requirements/stream-b/) supplier security.

        ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png)

        Organizations can use these to add solid security considerations at the start of the Software Development or Procurement process.

        These general security considerations can be audited by using a subsection of the ASVS controls in section V1 as a questionnaire. This process attempts to ensure that every feature has concrete security considerations.

        In case of internal development and if the organization maps Features to Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/) can be used to facilitate this process by leveraging its questionnaire function, shown below.

        Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)
      implementation:
      - name: OWASP ASVS
        tags: []
        url: https://owasp.org/www-project-application-security-verification-standard/
      - name: OWASP MASVS
        tags: []
        url: https://github.com/OWASP/owasp-masvs
      - name: API Security Maturity Model for Authorization
        tags:
        - api
        url: https://curity.io/resources/learn/the-api-security-maturity-model/
      references:
        samm2:
        - D-SR-1-A
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Full Coverage of App. Hardening Level 3:
      risk: Using an insecure application might lead to a compromised application.
        This might lead to total data theft or data modification.
      measure: |
        Following frameworks like the
          <ul>
            <li>OWASP Application Security Verification Standard Level 3</li>
            <li>OWASP Mobile Application Security Verification Standard Maturity Requirements</li>
          </ul>
          and gain around 95% coverage of both.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 2
      usefulness: 4
      level: 4
      implementation:
      - name: OWASP ASVS
        tags: []
        url: https://owasp.org/www-project-application-security-verification-standard/
      - name: OWASP MASVS
        tags: []
        url: https://github.com/OWASP/owasp-masvs
      references:
        samm2:
        - D-SR-3-A
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
      isImplemented: false
      evidence: ""
      comments: ""
  Development and Source Control:
    API design validation:
      risk: Creation of insecure or non-compliant API.
      measure: |
        Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP
        and validate the specification using specific tools.
        Checks should be integrated in IDEs and CI/CD pipelines.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - name: Spectral
        tags:
        - linting
        - api
        - d3f:StaticAnalysisTool
        url: https://github.com/stoplightio/spectral
        description: |
          Spectral is a flexible JSON/YAML linter built with extensibility in mind.
          It uses JSON/YAML path rules to describe the problems you want to find.
      - name: API OAS Checker
        tags:
        - linting
        - api
        - d3f:StaticAnalysisTool
        url: https://github.com/italia/api-oas-checker
        description: |
          A tool to check OpenAPI specifications using a comprehensive ruleset based
          on API best practices.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 8.25
        - 8.27
        - 8.28
      isImplemented: false
      evidence: ""
      comments: ""
    Local development linting & style checks performed:
      risk: Insecure or unmaintenable code base.
      measure: Integrate static code analysis tools in IDEs.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 2
      level: 4
      description: ""
      implementation:
      - name: How to enforce a consistent coding style in your projects
        url: https://www.meziantou.net/how-to-enforce-a-consistent-coding-style-in-your-projects.htm
        tags:
        - ide
        - linting
        - d3f:StaticAnalysisTool
      - name: In-Depth Linting of Your TypeScript While Coding
        url: https://blog.sonarsource.com/in-depth-linting-of-your-typescript-while-coding
        tags:
        - ide
        - linting
        - d3f:StaticAnalysisTool
      - name: SpotBugs
        tags:
        - static-analysis
        - java
        - d3f:StaticAnalysisTool
        url: https://github.com/spotbugs/spotbugs
        description: |
          SpotBugs is a program which uses static analysis to look for bugs in Java code.
      - signing-of-commits-protection:
          name: Enforcement of commit signing
          tags:
          - signing
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
          description: Usage of branch protection rules
        signing-of-commits:
          name: Signing of commits
          tags:
          - signing
          url: https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work
          description: Signing of commits in git
        ci-cd-tools:
          name: CI/CD tools
          tags:
          - ci-cd
          url: https://martinfowler.com/articles/continuousIntegration.html
          description: CI/CD tools such as jenkins, gitlab-ci or github-actions
        apimaturity:
          name: API Security Maturity Model for Authorization
          tags:
          - api
          url: https://curity.io/resources/learn/the-api-security-maturity-model/
        container-orchestration:
          name: Container technologies and orchestration like Docker, Kubernetes
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
        cwe25:
          name: CWE Top 25 Most Dangerous Software Weaknesses
          tags:
          - documentation
          - threat
          url: https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html
        docker-content-trust:
          name: Docker Content Trust
          tags: []
          url: https://docs.docker.com/notary/getting_started/
        in-toto:
          name: in-toto
          tags: []
          url: https://in-toto.github.io/
        a-complete-backup-of:
          name: A complete backup of persisted data might be performed.
          tags: []
        a-point-in-time-reco:
          name: A Point in Time Recovery for databases should be implemented.
          tags: []
        blue-green-deploymen:
          name: Blue/Green Deployments
          tags: []
          url: https://martinfowler.com/bliki/BlueGreenDeployment.html
        docker:
          name: Docker
          url: https://github.com/moby/moby
          tags: []
        webserver:
          name: Webserver
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebServer/
        rolling-update:
          name: rolling update
          tags: []
        kubernetes-admission:
          name: Kubernetes Admission Controller can whitelist registries and/or whitelist
            a signing key.
          tags:
          - d3f:ContainerOrchestrationSoftware
        dependabot:
          name: dependabot
          tags: []
          url: https://dependabot.com/
        jenkins:
          name: Jenkins
          tags: []
          url: https://www.jenkins.io/
        sample-concept-1:
          name: Daily rebuild of container images
          tags: []
          description: |
            Sample concept:
            1. each container has a set lifetime and is killed/replaced with a new container
            multiple times a day where you have
            some form of a graceful replacement to ensure no (short) service outage will
            occur to the end users.
            2. twice a day a rebuild of images is done. The rebuilds are put into a automated testing pipeline.
            If the testing has no blocking issues the new images will be released for deployment during the
            next "restart" of a container. What has to be done, is to ensure the new
            containers are deployed in some canary deployment manner, this will ensure
            that if (and only if) something buggy has been introduced which breaks functionality
            the canary deployment will make sure the "older version" is being used and
                            not the buggy newer one.
        distroless:
          name: Distroless Container Images
          tags:
          - d3f:ContainerImage
          url: https://github.com/GoogleContainerTools/distroless
        fedora-coreos:
          name: Fedora CoreOS
          tags: []
          url: https://getfedora.org/coreos
        threat-modeling-play:
          name: Threat Modeling Playbook
          tags:
          - owasp
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/Toreon/threat-model-playbook
        owasp-samm:
          name: OWASP SAMM
          tags:
          - threat-modeling
          - owasp
          - defender
          url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
        whiteboard:
          name: Whiteboard
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://en.wikipedia.org/wiki/Whiteboard
        miro-or-any-other-c:
          name: Miro (or any other collaborative board)
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://miro.com/
        draw-io:
          name: Draw.io
          tags:
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/jgraph/drawio-desktop
        threagile:
          name: Threagile
          tags:
          - threat-modeling
          url: https://github.com/Threagile/threagile
        don-t-forget-evil-u:
          name: Don't Forget EVIL User stories
          tags: []
          url: https://www.owasp.org/index.php/Agile_Software_Development
          description: '[Do not Forget EVIL User Stories](https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories)
            and [Practical Security Stories and Security Tasks for Agile Development
            Environments](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
        owasp-juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: |-
            In case you do not have the budget to hire an external security expert,
            an option is to use the OWASP JuiceShop on a "hacking Friday"
        owasp-cheatsheet-ser:
          name: OWASP Cheatsheet Series
          tags:
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        https-cheatsheetse:
          name: https://cheatsheetseries.owasp.org/
          tags:
          - training
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        owasp-security-champ:
          name: OWASP Security Champions Playbook
          tags:
          - security champions
          url: https://github.com/c0rdis/security-champions-playbook
        build-it-break-it-fi:
          name: Build it Break it Fix it Contest
          tags: []
          url: https://builditbreakit.org/
        motivate-people:
          name: Motivate people
          tags:
          - security champions
          - gamification
          - nudging
          url: https://github.com/wurstbrot/security-pins
          description: |-
            Enhance motivation can be performed with the distribution of pins
            as a reward, see [OWASP Security Pins Project](https://github.com/wurstbrot/security-pins)
        owasp-top-10-maturit:
          name: OWASP Top 10 Maturity Categories for Security Champions
          tags:
          - security champions
          url: https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
        involve-security-sme:
          name: Involve Security SME
          tags: []
          description: Security SME are involved in discussion for requirements analysis,
            software design and sprint planning to provide guidance and suggestions.
        damn-vulnerable-web:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        example-all-docker:
          name: 'Example: All docker images used by teams need to be based on standard
            images.'
          tags: []
        owasp-asvs:
          name: OWASP ASVS
          tags: []
          url: https://owasp.org/www-project-application-security-verification-standard/
        owasp-masvs:
          name: OWASP MASVS
          tags: []
          url: https://github.com/OWASP/owasp-masvs
        cis-kubernetes-bench:
          name: CIS Kubernetes Bench for Security
          tags:
          - d3f:ContainerOrchestrationSoftware
          url: https://www.cisecurity.org/cis-benchmarks/
        cis-docker-bench-for:
          name: CIS Docker Bench for Security
          tags:
          - d3f:ContainerRuntime
          url: https://www.cisecurity.org/cis-benchmarks/
        container-execution-isolation:
          name: Isolate containers execution
          tags:
          - d3f:ContainerOrchestrationSoftware
          - d3f:ContainerImage
          description: 'For example for Containers: Deny running containers as root,
            deny using advanced privileges, deny mounting of the hole filesystem,
            ...'
          url: https://d3fend.mitre.org/technique/d3f:ExecutionIsolation/
        attack-matrix-cloud:
          name: Attack Matrix Cloud
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for cloud
        attack-matrix-contai:
          name: Attack Matrix Containers
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for containers
        attack-matrix-kubern:
          name: Attack Matrix Kubernetes
          tags:
          - mitre
          - d3f:ContainerOrchestrationSoftware
          url: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/
          description: Attack matrix for kubernetes
        istio:
          name: istio
          tags: []
          description: Istio is an open platform to connect, manage, and secure microservices.
          url: https://istio.io/
        bridges:
          name: bridges
          tags: []
        firewalls:
          name: firewalls
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Firewall/
        open-policy-agent:
          name: Open Policy Agent
          description: |-
            Open Policy Agent is an open source,
            general-purpose policy engine that unifies policy enforcement across the stack.
          tags: []
          url: https://www.openpolicyagent.org/
        gitops:
          name: GitOps
          description: |-
            GitOps is a way to do Kubernetes application delivery.
            It works by using Git as a single source of truth for Kubernetes resources
            and everything else.
          tags: []
          url: https://www.redhat.com/en/topics/devops/what-is-gitops
        ansible:
          name: Ansible
          description: |-
            Ansible is an open-source software provisioning, configuration management,
            and application-deployment tool enabling infrastructure as code.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/ansible/ansible
        chef:
          name: Chef
          description: |-
            Chef is an open-source software automation platform that
            helps system administrators manage infrastructure and applications.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/chef/chef
        puppet:
          description: Puppet is an open-source software configuration management
            tool.
          name: Puppet
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/puppetlabs/puppet
        argocd:
          name: ArgoCD
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/argoproj/argo-cd
        jenkinsfile:
          name: Jenkinsfile
          tags: []
          url: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
        seccomp:
          name: seccomp
          tags: []
          url: https://man7.org/linux/man-pages/man2/seccomp.2.html
        strace:
          name: strace
          tags: []
          url: https://man7.org/linux/man-pages/man1/strace.1.html
        remove-direct-access:
          name: Remove direct access to infrastructure
          tags: []
        directory-service:
          name: Directory Service
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:DirectoryService/
        plugins:
          name: Plugins
          tags: []
        smartcard:
          name: Smartcard
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        yubikey:
          name: YubiKey
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        sms:
          name: SMS
          tags:
          - d3f:Multi-factorAuthentication
        totp:
          name: TOTP
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:One-timePassword/
        http-basic-authentic:
          name: HTTP-Basic Authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebAuthentication/
        vpn:
          name: VPN
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:VPN/
        for-applications-ch:
          name: 'For applications: Check default encoding'
          tags: []
        managing-secrets:
          name: managing secrets
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:CredentialHardening/
        crypto:
          name: crypto
          tags: []
        authentication:
          name: authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Authentication/
        rsyslog:
          name: rsyslog
          url: https://www.rsyslog.com/
          tags:
          - tool
          - logging
        logstash:
          name: logstash
          url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
          tags:
          - tool
          - logging
        fluentd:
          name: fluentd
          tags:
          - tool
          url: https://www.fluentd.org/
        bash:
          name: bash
          tags:
          - tool
          url: https://www.gnu.org/software/bash/
        owasp-logging-cheats:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        elk-stack:
          name: ELK-Stack
          tags: []
          url: https://www.elastic.co/elk-stack
        https-ht-transpare:
          name: https://ht.transpare
          tags: []
          url: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD
          description: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD%20Fileserver/books/SICUREZZA/Addison.Wesley.Security.Metrics.Mar.2007.pdf
        prometheus:
          name: Prometheus
          tags: []
          url: https://prometheus.io/
        collected:
          name: collected
          tags: []
        httpunit:
          name: HttpUnit
          tags: []
          url: http://httpunit.sourceforge.net/
        junit:
          name: JUnit
          tags:
          - unittest
          - d3f:UnitTestExecutionTool
          url: https://junit.org/junit5/
        karma:
          name: Karma
          description: Karma is a test runner for JavaScript.
          tags:
          - d3f:UnitTestExecutionTool
          url: https://karma-runner.github.io
        owasp-defectdojo:
          name: OWASP DefectDojo
          tags:
          - vulnerability management system
          - owasp
          url: https://github.com/DefectDojo/django-DefectDojo
          description: DefectDojo is a security program and vulnerability management
            tool. DefectDojo allows you to manage your application security program,
            maintain product and application information, triage vulnerabilities and
            push findings into defect trackers. Consolidate your findings into one
            source of truth with DefectDojo.
        purify:
          name: Purify
          tags:
          - vulnerability management system
          url: https://github.com/faloker/purify/
          description: |
            The goal of Purify to be an easy-in-use and efficient tool to
            simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
        see-other-actions-e:
          name: See other actions, e.g. "Treatment of defects with severity high".
          tags: []
        sast:
          name: SAST
          tags:
          - d3f:StaticAnalysisTool
          description: 'At SAST (Static Application Security Testing): Server-side
            / client-side teams can easily be recorded. With microservice architecture
            individual microservices can be used usually Teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:StaticAnalysisTool/
        dast:
          name: DAST
          tags:
          - d3f:DynamicAnalysisTool
          description: 'At DAST (Dynamic Application Security Testing): vulnerabilities
            are classified and can be assigned to server-side and client-side teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:DynamicAnalysisTool/
        owasp-defect-dojo:
          name: OWASP Defect Dojo
          tags: []
          url: https://github.com/DefectDojo/django-DefectDojo
        owasp-dependency-che:
          name: OWASP Dependency Check
          tags: []
          url: https://owasp.org/www-project-dependency-check/
        logparser-jenkins-pl:
          name: LogParser Jenkins Plugins
          tags: []
        owasp-code-pulse:
          name: OWASP Code Pulse
          tags: []
          url: https://www.owasp.org/index.php/OWASP_Code_Pulse
        ajax-spider:
          name: Ajax Spider
          tags:
          - d3f:DynamicAnalysisTool
          url: https://www.zaproxy.org/docs/desktop/addons/ajax-spider/
        curl:
          name: cURL
          tags: []
          url: https://curl.se/
        openapi:
          name: OpenAPI Specifications
          tags: []
          url: https://spec.openapis.org/
        owasp-zap:
          name: OWASP Zap
          tags:
          - vulnerability
          - scanner
          - d3f:DynamicAnalysisTool
          url: https://github.com/zaproxy/zaproxy
          description: |
            The OWASP Zed Attack Proxy (ZAP) is one of the world's most popular free security tools
            and is actively maintained by a dedicated international team of ...
        arachni:
          name: Arachni
          description: Arachni is a feature-full, modular, high-performance Ruby framework
            aimed towards helping penetration testers and administrators evaluate
            the security of web applications.
          url: https://github.com/Arachni/arachni
        zest:
          name: Zest
          url: https://www.zaproxy.org/docs/desktop/addons/zest/
          tags:
          - zap
          description: Zest is an experimental specialized scripting language (also
            known as a domain-specific language) originally developed by the Mozilla
            security team and is intended to be used in web oriented security tools.
        owasp-securecodebox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: |
            secureCodeBox is a kubernetes based, modularized toolchain for continuous security scans of your software project. Its goal is to orchestrate and easily automate a bunch of security-testing tools out of the box.
        kube-hunter:
          name: kube-hunter
          description: kube-hunter is a tool that helps you to hunt for security weaknesses
            in Kubernetes clusters. It is a customizable, easy to use and powerful
            hunting framework that enables security researchers and developers to
            test the security of their Kubernetes clusters and workloads.
          tags:
          - d3f:DynamicAnalysisTool
          - d3f:ContainerOrchestrationSoftware
          url: https://github.com/aquasecurity/kube-hunter
        openvas:
          name: openVAS
          tags: []
          url: https://www.openvas.org/
        htc-hydra:
          name: HTC Hydra
          tags:
          - password
          url: https://www.htc-cs.com/en/products/htc-hydra/
        netassert:
          name: netassert
          tags: []
          url: https://github.com/controlplaneio/netassert
        nmap:
          name: nmap
          tags: []
          url: https://nmap.org/
        owasp-amass:
          name: OWASP Amass
          tags: []
          url: https://github.com/OWASP/Amass
        k8spurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          - d3f:ContainerOrchestrationSoftware
          - d3f:DynamicAnalysisTool
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        pmd:
          name: PMD
          tags: []
        eslint:
          name: eslint
          tags:
          - d3f:StaticAnalysisTool
          url: https://eslint.org/
        findsecuritybugs:
          name: FindSecurityBugs
          tags: []
        jsprime:
          name: jsprime
          description: jsprime is a static analysis tool for JavaScript that detects
            security vulnerabilities in web applications. It is based on the JavaScript
            parser Esprima and the static analysis framework TSLint.
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/dpnishant/jsprime
        bdd-mobile-security:
          name: '[bdd-mobile-security'
          tags: []
          url: https://github.com/ing-bank/bdd-mobile-security-automation-framework
          description: '[bdd-mobile-security-automation-framework](https://github.com/ing-bank/bdd-mobile-security-automation-framework)'
        retire-js:
          name: retire.js
          tags: []
          url: https://github.com/RetireJS/retire.js/
        npm-audit:
          name: npm audit
          tags:
          - d3f:StaticAnalysisTool
          url: https://docs.npmjs.com/cli/audit
        sigmahq:
          name: SigmaHQ
          tags: []
          url: https://github.com/SigmaHQ/sigma
        dive-to-inspect-a-co:
          name: Dive to inspect a container images
          tags: []
          url: https://github.com/wagoodman/dive
        clusterscanner:
          url: https://github.com/SDA-SE/clusterscanner
          name: ClusterScanner
          tags:
          - docker
          - image
          - container
          - vulnerability
          - misconfiguration
          - securiity-tools
          - scanning
          description: Discover vulnerabilities and container image misconfiguration
            in production environments.
        dockerfile-with-hado:
          name: Dockerfile with hadolint
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/hadolint/hadolint
        deployment-with-kube:
          name: Deployment with kube-score
          tags: []
          url: https://github.com/zegl/kube-score
        kubesec:
          name: kubesec
          tags: []
          url: https://kubesec.io
        anchore-io:
          name: Anchore.io
          description: Anchore is a container image analysis and policy engine that
            enables you to understand the contents of your container images and ensure
            that they are secure and compliant.
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://anchore.com/
        clair:
          name: Clair
          description: Clair is an open source project for the static analysis of
            vulnerabilities in application containers (currently including appc and
            docker).
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/quay/clair
        openscap:
          name: OpenSCAP
          tags: []
          url: https://www.open-scap.org/
        vuls:
          name: Vuls
          tags: []
          url: https://github.com/future-architect/vuls
        kube-bench:
          name: kube-bench
          tags: []
          url: https://github.com/aquasecurity/kube-bench
        trufflehog:
          name: truffleHog
          description: Searches through git repositories for high entropy strings,
            digging deep into commit history.
          tags: []
          url: https://github.com/dxa4481/truffleHog
        go-pillage-registrie:
          name: go-pillage-registries
          tags: []
          url: https://github.com/nccgroup/go-pillage-registries
        trivy:
          name: https://github.com/aquasecurity/trivy
          description: A Simple and Comprehensive Vulnerability Scanner for Containers,
            Suitable for CI
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/aquasecurity/trivy
        registries-like-quay:
          name: Registries like quay
          tags: []
          description: Registries like quay, dockerhub provide (commercial) offerings,
            often not suitable for distroless images
        dockerfilelint:
          name: dockerfilelint
          tags:
          - sast
          - docker
          - dockerfile
          - d3f:StaticAnalysisTool
          - d3f:ContainerBuildTool
          url: https://github.com/replicatedhq/dockerfilelint
          description: dockerfilelint is an node module that analyzes a Dockerfile
            and looks for common traps, mistakes and helps enforce best practices.
        threat-matrix-for-storage:
          name: Threat Matrix for Storage
          url: https://www.microsoft.com/security/blog/2021/04/08/threat-matrix-for-storage/
          tags:
          - documentation
          - storage
          - cluster
          - kubernetes
        defend-the-core-kubernetes:
          name: Defend the core kubernetes security at every layer
          url: https://thenewstack.io/defend-the-core-kubernetes-security-at-every-layer/
          tags:
          - documentation
          - cluster
          - kubernetes
        business-friendly-vulnerability-metrics:
          name: Business friendly vulnerability management metrics
          url: https://medium.com/uber-security-privacy/business-friendly-vulnerability-management-metrics-cfd702fd7705
          tags:
          - documentation
          - vulnerability
          - vulnerability management system
        kubescape:
          name: kubescape
          description: kubescape is a tool that helps you scan your Kubernetes clusters
            to identify security misconfigurations as defined in Kubernetes Hardening
            Guidance by to NSA and CISA_
          url: https://github.com/armosec/kubescape
          tags:
          - kubernetes
          - vulnerability
          - misconfiguration
        azuredevops:
          name: Improve code quality with branch policies
          url: https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops
          tags:
          - source-code-protection
          - scm
        github-policies:
          name: About protected branches
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
          tags:
          - source-code-protection
          - scm
        sonarqube:
          name: In-Depth Linting of Your TypeScript While Coding
          url: https://blog.sonarsource.com/in-depth-linting-of-your-typescript-while-coding
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        stylecop:
          name: How to enforce a consistent coding style in your projects
          url: https://www.meziantou.net/how-to-enforce-a-consistent-coding-style-in-your-projects.htm
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        fortify-vscode-extension:
          name: Fortify Extension for Visual Studio Code
          url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
          tags:
          - ide
          - sast
        appscan-vscode-extension:
          name: HCL AppScan CodeSweep
          url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
          tags:
          - ide
          - sast
        checkmarx-vscode-extension:
          name: Setting Up the Visual Studio Code Extension Plugin
          url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
          tags:
          - ide
          - sast
        pre-commit-microsoft:
          name: DevSecOps control Pre-commit
          url: https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls#plan-and-develop
          tags:
          - pre-commit
        pre-commit-synopsis:
          name: Building your DevSecOps pipeline 5 essential activities
          url: https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/
          tags:
          - pre-commit
        pre-commit-python:
          name: Pre-commit hooks in Python
          url: https://github.com/pre-commit/pre-commit
          tags:
          - pre-commit
          - d3f:StaticAnalysisTool
        dependencyTrack:
          name: Dependency-Track is an intelligent Component Analysis platform that
            allows organizations to identify and reduce risk in the software supply
            chain. Dependency-Track takes a unique and highly beneficial approach
            by leveraging the capabilities of Software Bill of Materials (SBOM).
          url: https://github.com/DependencyTrack/dependency-track
          tags:
          - sca
          - inventory
        juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: In case you do not have the budget to hire an external security
            expert, an option is to use the OWASP JuiceShop on a "hacking Friday"
        dvwa:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        loggingCheatSheet:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        secureCodeBox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: secureCodeBox is a kubernetes based, modularized toolchain
            for continuous security scans of your software project. Its goal is to
            orchestrate and easily automate a bunch of security-testing tools out
            of the box.
        K8sPurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        hashicorp-vault:
          name: Hashicorp Vault
          tags:
          - authentication
          - authorization
          - secrets
          - infrastructure
          url: https://github.com/hashicorp/vault
          description: |
            A tool for secrets management, encryption as a service, and privileged access management.
        stoplight-spectral:
          name: Spectral
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/stoplightio/spectral
          description: |
            Spectral is a flexible JSON/YAML linter built with extensibility in mind.
            It uses JSON/YAML path rules to describe the problems you want to find.
        api-oas-checker:
          name: API OAS Checker
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/italia/api-oas-checker
          description: |
            A tool to check OpenAPI specifications using a comprehensive ruleset based
            on API best practices.
        coveragepy:
          name: Coverage.py
          tags:
          - testing
          - coverage
          - d3f:DynamicAnalysisTool
          url: https://github.com/nedbat/coveragepy
          description: |
            Code coverage measurement for Python
        github-dependabot:
          name: Dependabot
          tags:
          - dependency
          - dependency-management
          - scm
          url: https://github.com/dependabot/dependabot-core
          description: |
            Dependabot creates pull requests to keep your dependencies secure and up-to-date.
        github-super-linter:
          name: Super-Linter
          tags:
          - linting
          - scm
          - d3f:StaticAnalysisTool
          url: https://github.com/github/super-linter
          description: |
            Lint code bases to catch common errors and enforce code style
        schemathesis:
          name: Schemathesis
          tags:
          - testing
          - api
          - documentation
          url: https://github.com/schemathesis/schemathesis
          description: |
            Schemathesis is a tool for testing web applications and services by sending requests based on the Open API / Swagger schema.
        martin-feature-toggles:
          name: Feature Toggles
          tags:
          - development
          - architecture
          url: https://martinfowler.com/articles/feature-toggles.html
          description: |
            Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. (Pete Hodgson)
        tw-talisman:
          name: Talisman
          tags:
          - scm
          - secrets
          - d3f:StaticAnalysisTool
          url: https://github.com/thoughtworks/talisman
          description: |
            Talisman is a git hook that scans your commits for secrets before you push them to a remote repository.
        spotbugs:
          name: SpotBugs
          tags:
          - static-analysis
          - java
          - d3f:StaticAnalysisTool
          url: https://github.com/spotbugs/spotbugs
          description: |
            SpotBugs is a program which uses static analysis to look for bugs in Java code.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    MFA to SCM:
      risk: Unauthorized access to source code.
      measure: Enforce Multi-Factor authentication to source code management platforms.
        These policies can be implemented at repository level or organization level,
        depending on the source code management system.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 4
      level: 1
      implementation:
      - name: YubiKey
        tags:
        - d3f:Multi-factorAuthentication
        url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
      - name: TOTP
        tags: []
        url: https://d3fend.mitre.org/technique/d3f:One-timePassword/
      - name: Smartcard
        tags:
        - d3f:Multi-factorAuthentication
        url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - 5.17
        - 6.1.2
        - 14.2.1
        d3f:
        - Multi-factorAuthentication
      isImplemented: false
      evidence: ""
      comments: ""
    Pre-Commit checks and validations:
      risk: Using an insecure application might lead to a compromised application.
        This might lead to total data theft or data modification.
      measure: |
        Implement pre-commit checks to prevent secrets & other security issues being commit to source code.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - name: DevSecOps control Pre-commit
        url: https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls#plan-and-develop
        tags:
        - pre-commit
      - name: Building your DevSecOps pipeline 5 essential activities
        url: https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/
        tags:
        - pre-commit
      - name: Pre-commit hooks in Python
        url: https://github.com/pre-commit/pre-commit
        tags:
        - pre-commit
        - d3f:StaticAnalysisTool
      - name: Talisman
        tags:
        - scm
        - secrets
        - d3f:StaticAnalysisTool
        url: https://github.com/thoughtworks/talisman
        description: |
          Talisman is a git hook that scans your commits for secrets before you push them to a remote repository.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    Source Control Protection:
      risk: Intentional or accidental alterations in critical branches like master.
      measure: Define source code management system policies (e.g. branch protection
        rules, mandatory code reviews, ...) to ensure that changes to critical branches
        are only possible under defined conditions. These policies can be implemented
        at repository level or organization level, depending on the source code management
        system.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 4
      level: 1
      implementation:
      - name: Improve code quality with branch policies
        url: https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops
        tags:
        - source-code-protection
        - scm
      - name: About protected branches
        url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
        tags:
        - source-code-protection
        - scm
      - name: Enforcement of commit signing
        tags:
        - signing
        url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
        description: Usage of branch protection rules
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - peer review - four eyes principle is not explicitly required by ISO 27001
        - 6.1.2
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Versioning:
      risk: Deployment of untracked artifacts.
      measure: Version artifacts in order to identify deployed features and issues.
        This includes application and infrastructure code, jenkins configuration,
        container and virtual machine images.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 5
      level: 1
      dependsOn:
      - Defined deployment process
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.1
        - 12.1.2
        - 14.2.2
      isImplemented: false
      evidence: ""
      comments: ""
  Infrastructure Hardening:
    2FA:
      risk: Unauthorized credential access.
      measure: Multi-factor authentication for all accounts on systems and applications
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 3
      usefulness: 4
      level: 2
      implementation:
      - name: Smartcard
        tags:
        - d3f:Multi-factorAuthentication
        url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
      - name: YubiKey
        tags:
        - d3f:Multi-factorAuthentication
        url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
      - name: SMS
        tags:
        - d3f:Multi-factorAuthentication
      - name: TOTP
        tags: []
        url: https://d3fend.mitre.org/technique/d3f:One-timePassword/
      references:
        samm2:
        - TODO
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 9.1.1
        - 9.4.2
        - 14.2.5
        d3f:
        - CredentialHardening
      isImplemented: false
      evidence: ""
      comments: ""
    Applications are running in virtualized environments:
      risk: Through a vulnerability in one service on a server, the attacker gains
        access to other services running on the same server.
      measure: Applications are running in a dedicated and isolated virtualized environments.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 5
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        d3f:
        - KernelBasedIsolation
      isImplemented: false
      evidence: ""
      comments: ""
    Backup:
      risk: If errors are experienced during the deployment process you want to deploy
        an old release. However, due to changes in the database this is often unfeasible.
      measure: Performing automated periodical backups are used. Backup before deployment
        can help facilitate deployments whilst testing the backup restore processes.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - name: A complete backup of persisted data might be performed.
        tags: []
      - name: A Point in Time Recovery for databases should be implemented.
        tags: []
      dependsOn:
      - Defined deployment process
      references:
        samm2:
        - TODO
        iso27001-2017:
        - "12.3"
        - 14.2.6
      isImplemented: false
      evidence: ""
      comments: ""
    Checking the sources of used libraries:
      risk: Use of vulnerable dependencies (application or libraries).
      measure: Each dependency's source code is checked.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 1
      usefulness: 3
      level: 2
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.1
        - 14.2.5
        d3f:
        - SoftwareInventory
      isImplemented: false
      evidence: ""
      comments: ""
    Filter outgoing traffic:
      risk: A compromised infrastructure component might try to send out stolen data.
      measure: Having a whitelist and explicitly allowing egress traffic provides
        the ability to stop unauthorized data leakage.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 2
      level: 2
      dependsOn: []
      implementation:
      - name: Open Policy Agent
        description: |-
          Open Policy Agent is an open source,
          general-purpose policy engine that unifies policy enforcement across the stack.
        tags: []
        url: https://www.openpolicyagent.org/
      - name: firewalls
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:Firewall/
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        d3f:
        - NetworkTrafficAnalysis
      isImplemented: false
      evidence: ""
      comments: ""
    Immutable Infrastructure:
      risk: The availability of IT systems might be disturbed due to components failures
      measure: Redundancies in the IT systems
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      dependsOn:
      - Infrastructure as Code
      implementation:
      - name: Remove direct access to infrastructure
        tags: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 17.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Infrastructure as Code:
      risk: No tracking of changes in systems might lead to errors in the configuration.
        In additions, it might lead to unauthorized changes. An examples is jenkins.
      measure: Systems are setup by code. A full environment can be provisioned. In
        addition, software like Jenkins 2 can be setup and configured in in code too.
        The code should be stored in a version control system.
      difficultyOfImplementation:
        knowledge: 3
        time: 5
        resources: 4
      usefulness: 4
      level: 3
      implementation:
      - name: GitOps
        description: |-
          GitOps is a way to do Kubernetes application delivery.
          It works by using Git as a single source of truth for Kubernetes resources
          and everything else.
        tags: []
        url: https://www.redhat.com/en/topics/devops/what-is-gitops
      - name: Ansible
        description: |-
          Ansible is an open-source software provisioning, configuration management,
          and application-deployment tool enabling infrastructure as code.
        tags:
        - d3f:SoftwareDeploymentTool
        url: https://github.com/ansible/ansible
      - name: Chef
        description: |-
          Chef is an open-source software automation platform that
          helps system administrators manage infrastructure and applications.
        tags:
        - d3f:SoftwareDeploymentTool
        url: https://github.com/chef/chef
      - description: Puppet is an open-source software configuration management tool.
        name: Puppet
        tags:
        - d3f:SoftwareDeploymentTool
        url: https://github.com/puppetlabs/puppet
      - name: Jenkinsfile
        tags: []
        url: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.1
        - 12.1.2
      isImplemented: false
      evidence: ""
      comments: ""
    Isolated networks for virtual environments:
      risk: Virtual environments in default settings are able to access other virtual
        environments on the network stack. By using virtual machines, it is often
        possible to connect to other virtual machines. By using docker, one bridge
        is used by default so that all containers on one host can communicate with
        each other.
      measure: The communication between virtual environments is controlled and regulated.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 5
      level: 1
      dependsOn: []
      implementation:
      - name: istio
        tags: []
        description: Istio is an open platform to connect, manage, and secure microservices.
        url: https://istio.io/
      - name: bridges
        tags: []
      - name: firewalls
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:Firewall/
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        d3f:
        - NetworkIsolation
      isImplemented: false
      evidence: ""
      comments: ""
    Limitation of system calls in virtual environments:
      risk: System calls in virtual environments like docker can lead to privilege
        escalation.
      measure: System calls in virtual environments like docker are audited and limited.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 5
      level: 4
      dependsOn:
      - Applications are running in virtualized environments
      implementation:
      - name: seccomp
        tags: []
        url: https://man7.org/linux/man-pages/man2/seccomp.2.html
      - name: strace
        tags: []
        url: https://man7.org/linux/man-pages/man1/strace.1.html
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        d3f:
        - SystemCallFiltering
      isImplemented: false
      evidence: ""
      comments: ""
    Microservice-Architecture:
      risk: Monolithic applications are hard to test.
      measure: A microservice-architecture helps to have small components, which are
        more easy to test.
      difficultyOfImplementation:
        knowledge: 4
        time: 5
        resources: 5
      usefulness: 3
      level: 4
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001
      isImplemented: false
      evidence: ""
      comments: ""
    Production near environments are used by developers:
      risk: In case an errors occurs in production, the developer need to be able
        to create a production near environment on a local development environment.
      measure: Usage of infrastructure as code helps to create a production near environment.
        The developer needs to be trained in order to setup a local development environment.
        In addition, it should be possible to create production like test data. Often
        personal identifiable information is anonymized in order to comply with data
        protection laws.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 4
      level: 4
      dependsOn:
      - Defined deployment process
      - Infrastructure as Code
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - 12.1.4
        - 17.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Role based authentication and authorization:
      risk: Everyone is able to get unauthorized access to information on systems
        or to modify information unauthorized on systems.
      measure: The usage of a (role based) access control helps to restrict system
        access to authorized users.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      implementation:
      - name: Directory Service
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:DirectoryService/
      - name: Plugins
        tags: []
      dependsOn:
      - Defined deployment process
      - Defined build process
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - 9.4.1
      isImplemented: false
      evidence: ""
      comments: ""
    Simple access control for systems:
      risk: Attackers a gaining access to internal systems and application interfaces
      measure: All internal systems are using simple authentication
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 5
      level: 1
      dependsOn:
      - Defined deployment process
      implementation:
      - name: HTTP-Basic Authentication
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:WebAuthentication/
      - name: VPN
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:VPN/
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - 9.4.1
      isImplemented: false
      evidence: ""
      comments: ""
    The environment is hardened:
      risk: Using default configurations for a cluster environment leads to potential
        risks.
      measure: Harden cluster environments according to best practices. Level 1 and
        partially level 2 from hardening practices like 'CIS Kubernetes Bench for
        Security' should considered.
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - name: CIS Kubernetes Bench for Security
        tags:
        - d3f:ContainerOrchestrationSoftware
        url: https://www.cisecurity.org/cis-benchmarks/
      - name: CIS Docker Bench for Security
        tags:
        - d3f:ContainerRuntime
        url: https://www.cisecurity.org/cis-benchmarks/
      - name: Isolate containers execution
        tags:
        - d3f:ContainerOrchestrationSoftware
        - d3f:ContainerImage
        description: 'For example for Containers: Deny running containers as root,
          deny using advanced privileges, deny mounting of the hole filesystem, ...'
        url: https://d3fend.mitre.org/technique/d3f:ExecutionIsolation/
      - name: Attack Matrix Cloud
        tags:
        - mitre
        url: https://attack.mitre.org/matrices/enterprise/cloud/
        description: Attack matrix for cloud
      - name: Attack Matrix Containers
        tags:
        - mitre
        url: https://attack.mitre.org/matrices/enterprise/cloud/
        description: Attack matrix for containers
      - name: Attack Matrix Kubernetes
        tags:
        - mitre
        - d3f:ContainerOrchestrationSoftware
        url: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/
        description: Attack matrix for kubernetes
      - name: Defend the core kubernetes security at every layer
        url: https://thenewstack.io/defend-the-core-kubernetes-security-at-every-layer/
        tags:
        - documentation
        - cluster
        - kubernetes
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of a chaos monkey:
      risk: Due to manual changes on a system, they are not replaceable anymore. In
        case of a crash it might happen that a planned redundant system is unavailable.
        In addition, it is hard to replay manual changes.
      measure: A randomized periodically shutdown of systems makes sure, that nobody
        will perform manual changes to a system.
      difficultyOfImplementation:
        knowledge: 3
        time: 5
        resources: 5
      usefulness: 3
      level: 4
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 17.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of an security account:
      risk: Having security auditing in the same account as infrastructure and applications
        at the cloud provide might cause evil administrators (or threat actors taking
        over an account of an administrator) to alter evidence like audit logs.
      measure: Usage of a seperate account dedicated for security activities.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 3
      usefulness: 4
      level: 2
      implementation: ""
      references:
        samm2:
        - I-SD-2-B
        iso27001-2017:
        - 10.1
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of edge encryption at transit:
      risk: Evil actors might be able to perform a man in the middle attack and sniff
        confidential information (e.g. authentication factors like passwords)
      measure: By using encryption at the edge of traffic in transit, it is impossible
        or at least harder to sniff credentials beeing outside of the organization.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 1
      implementation: ""
      references:
        samm2:
        - I-SD-2-B
        iso27001-2017:
        - 10.1
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of encryption at rest:
      risk: Evil actors might be able to access data and read information, e.g. from
        physical hard disks.
      measure: By using encryption at trdt, it is impossible or at least harder to
        to read information.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 1
      implementation: ""
      references:
        samm2:
        - I-SD-2-B
        iso27001-2017:
        - 10.1
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of internal encryption at tansit:
      risk: Evil actors within the organization of traffic in transit might be able
        to perform a man in the middle attack and sniff confidential information (e.g.
        authentication factors like passwords)
      measure: By using encryption internally, e.g. inside of a cluster, it is impossible
        or at least harder to sniff credentials.
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 2
      usefulness: 4
      level: 2
      implementation: ""
      references:
        samm2:
        - I-SD-2-B
        iso27001-2017:
        - 10.1
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of security by default for components:
      risk: Components (images, libraries, applications) are not hardened.
      measure: Hardening of components is important, specially for image on which
        other teams base on. Hardening should be performed on the operation system
        and on the services inside (e.g. Nginx or a Java-Application).
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 1
      usefulness: 3
      level: 2
      implementation:
      - name: 'For applications: Check default encoding'
        tags: []
      - name: managing secrets
        tags: []
        url: https://d3fend.mitre.org/technique/d3f:CredentialHardening/
      - name: crypto
        tags: []
      - name: authentication
        tags: []
        url: https://d3fend.mitre.org/dao/artifact/d3f:Authentication/
      dependsOn:
      - Defined build process
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of test and production environments:
      risk: Security tests are not running regularly because test environments are
        missing
      measure: A production and a production like environment is used
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 5
      usefulness: 4
      level: 1
      dependsOn:
      - Defined deployment process
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.4
        - 17.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Virtual environments are limited:
      risk: Denial of service (internally by an attacker or unintentionally by a bug)
        on one service effects other services
      measure: All virtual environments are using resource limits on hard disks, memory
        and CPU
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 3
      usefulness: 3
      level: 2
      dependsOn:
      - Applications are running in virtualized environments
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 12.1.3
        - 13.1.3
        - 17.2.1
      isImplemented: false
      evidence: ""
      comments: ""
Information Gathering:
  Logging:
    Centralized application logging:
      risk: Local stored logs can be unauthorized manipulated by attackers with system
        access or might be corrupt after an incident. In addition, it is hard to perform
        an correlation of logs. This leads attacks, which can be performed silently.
      measure: A centralized logging system is used and applications logs (including
        application exceptions) are shipped to it.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 5
      level: 3
      dependsOn:
      - Visualized logging
      - Alerting
      implementation: []
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
      isImplemented: false
      evidence: ""
      comments: ""
    Centralized system logging:
      risk: Local stored system logs can be unauthorized manipulated by attackers
        or might be corrupt after an incident. In addition, it is hard to perform
        a aggregation of logs.
      measure: By using centralized logging logs are protected against unauthorized
        modification.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 2
      level: 1
      implementation:
      - name: rsyslog
        url: https://www.rsyslog.com/
        tags:
        - tool
        - logging
      - name: logstash
        url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
        tags:
        - tool
        - logging
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
      isImplemented: false
      evidence: ""
      comments: ""
    Correlation of security events:
      risk: Detection of security related events with hints on different systems/tools/metrics
        is not possible.
      measure: Events are correlated on one system. For example the correlation and
        visualization of failed login attempts combined with successful login attempts.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 4
      usefulness: 3
      level: 4
      dependsOn:
      - Visualized logging
      - Alerting
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
      isImplemented: false
      evidence: ""
      comments: ""
    Logging of security events:
      description: |
        Implement logging of security relevant events. The following events tend to be security relevant:
          - successful/failed login/logout
          - creation, change, and deletion of users
          - errors during input validation and output creation
          - exceptions and errors with security in their name
          - transactions of value (e.g., financial transactions, costly operations)
          - :unicorn: (special things of your application)
      measure: Security-relevant events like login/logout or creation, change, deletion
        of users should be logged.
      assessment: |
        - Show which events are logged.
        - Show a test for one event logging.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 4
      level: 1
      credits: |
        [AppSecure-nrw](https://github.com/AppSecure-nrw/security-belts/blob/master/orange/logging-of-security-events.md)
      implementation:
      - name: logstash
        url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
        tags:
        - tool
        - logging
      - name: fluentd
        tags:
        - tool
        url: https://www.fluentd.org/
      - name: bash
        tags:
        - tool
        url: https://www.gnu.org/software/bash/
      - name: OWASP Logging CheatSheet
        url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
        tags:
        - logging
        - documentation
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - 12.4.1
      risk: |-
        <ul>
        <li>No track of security-relevant events makes it harder to analyze an incident.</li>
        <li>Security incident analysis takes significantly less time with proper security events, such that an attack can be stopped before the attacker reaches his goal.</li>
        </ul>
      isImplemented: false
      evidence: ""
      comments: ""
    PII logging concept:
      risk: Personal identifiable information (PII) is logged and the law of GDPR
        is not followed.
      measure: A concept how to log PII is documented and applied.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 1
      implementation:
      - name: rsyslog
        url: https://www.rsyslog.com/
        tags:
        - tool
        - logging
      - name: logstash
        url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
        tags:
        - tool
        - logging
      - name: fluentd
        tags:
        - tool
        url: https://www.fluentd.org/
      - name: bash
        tags:
        - tool
        url: https://www.gnu.org/software/bash/
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
        - 18.1.1
      isImplemented: false
      evidence: ""
      comments: ""
    Visualized logging:
      risk: System and application protocols are not visualized properly which leads
        to no or very limited logging assessment. Specially developers might have
        difficulty to read applications logs with unusually tools like the Linux tool
        'cat'
      measure: Protocols are visualized in a simple to use real time monitoring system.
        The GUI gives the ability to search for special attributes in the protocol.
      difficultyOfImplementation:
        knowledge: 1
        time: 3
        resources: 3
      usefulness: 4
      level: 2
      dependsOn:
      - Centralized system logging
      - Centralized application logging
      implementation:
      - name: ELK-Stack
        tags: []
        url: https://www.elastic.co/elk-stack
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
      isImplemented: false
      evidence: ""
      comments: ""
  Monitoring:
    Advanced availability and stability metrics:
      risk: Trends and advanced attacks are not detected.
      measure: Advanced metrics are gathered in relation to availability and stability.
        For example unplanned downtime's per year.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 2
      usefulness: 4
      level: 3
      dependsOn:
      - Simple application metrics
      - Visualized metrics
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - 12.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Advanced webapplication metrics:
      risk: People are not looking into tests results. Vulnerabilities not recolonized,
        even they are detected by tools.
      measure: All defects from the dimension Test- and Verification are instrumented.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 2
      usefulness: 4
      level: 3
      dependsOn:
      - Simple application metrics
      - Visualized metrics
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Alerting:
      risk: Incidents are discovered after they happened.
      measure: |
        Thresholds for metrics are set. In case the thresholds are reached, alarms are send out. Which should get attention due to the critically.
      difficultyOfImplementation:
        knowledge: 2
        time: 5
        resources: 5
      usefulness: 5
      level: 2
      dependsOn:
      - Visualized metrics
      implementation: []
      references:
        samm2:
        - I-DM-A 3
        iso27001-2017:
        - 16.1.2
        - 16.1.4
        - 12.1.4
      isImplemented: false
      evidence: ""
      comments: ""
    Coverage and control metrics:
      risk: The effectiveness of configuration, patch and vulnerability management
        is unknown.
      measure: "Usage of Coverage- and control-metrics to show the effectiveness of
        the security program. Coverage is the degree in \n        which a specific
        security control for a specific target group is applied with all resources.\n
        \       The control degree shows the actual application of security standards
        and security-guidelines. Examples are gathering information on anti-virus,
        anti-rootkits, patch management, server configuration and vulnerability management."
      difficultyOfImplementation:
        knowledge: 3
        time: 5
        resources: 2
      usefulness: 4
      level: 4
      dependsOn:
      - Visualized metrics
      implementation:
      - name: https://ht.transpare
        tags: []
        url: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD
        description: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD%20Fileserver/books/SICUREZZA/Addison.Wesley.Security.Metrics.Mar.2007.pdf
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
      isImplemented: false
      evidence: ""
      comments: ""
    Deactivation of unused metrics:
      risk: High resources are used while gathering unused metrics.
      measure: Deactivation of unused metrics helps to free resources.
      difficultyOfImplementation:
        knowledge: 2
        time: 5
        resources: 5
      usefulness: 5
      level: 3
      dependsOn:
      - Visualized metrics
      implementation: []
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Defense metrics:
      risk: IDS/IPS systems like packet- or application-firewalls detect and prevent
        attacks. It is not known how many attacks has been detected and blocked.
      measure: |
        Gathering of defense metrics like TCP/UDP sources enables to assume the geographic location of the request.
        Assuming a Kubernetes cluster with an egress-traffic filter (e.g. IP/domain based), an alert might be send out in case of every violation. For ingress-traffic, alerting might not even be considered.
      difficultyOfImplementation:
        knowledge: 3
        time: 5
        resources: 2
      usefulness: 4
      level: 4
      dependsOn:
      - Visualized metrics
      - Filter outgoing traffic
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - 12.4.1
        - 13.1.1
      isImplemented: false
      evidence: ""
      comments: ""
    Grouping of metrics:
      risk: The analysis of metrics takes long.
      measure: Meaningful grouping of metrics helps to speed up analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 4
        resources: 2
      usefulness: 2
      level: 3
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Metrics are combined with tests:
      risk: Changes might cause high load due to programming errors.
      measure: Metrics during tests helps to identify programming errors.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 2
      usefulness: 5
      level: 4
      dependsOn:
      - Grouping of metrics
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001
      isImplemented: false
      evidence: ""
      comments: ""
    Monitoring of costs:
      risk: Not monitorig costs might lead to unexpected high resource consumption
        and a high invoice.
      measure: Implement cost budgets
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 2
      usefulness: 3
      level: 2
      dependsOn:
      - Simple application metrics
      - Simple system metrics
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - 12.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Screens with metric visualization:
      risk: Security related information is discovered too late during an incident.
      measure: By having an internal accessible screen with a security related dashboards
        helps to visualize incidents.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 5
      level: 4
      dependsOn:
      - Grouping of metrics
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.5
      isImplemented: false
      evidence: ""
      comments: ""
    Simple application metrics:
      risk: Attacks on an application are not recognized.
      measure: Gathering of application metrics helps to identify incidents like brute
        force attacks, login/logout.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 5
      level: 1
      implementation:
      - name: Prometheus
        tags: []
        url: https://prometheus.io/
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - 12.4.1
      isImplemented: false
      evidence: ""
      comments: ""
    Simple budget metrics:
      risk: Not getting notified about reaching the end of the budget (e.g. due to
        a denial of service) creates unexpected costs.
      measure: Cloud providers often provide insight into budgets. A threshold and
        alarming for the budget is set.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 5
      level: 1
      implementation:
      - name: collected
        tags: []
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - 12.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Simple system metrics:
      risk: Without simple metrics analysis of incidents are hard. In case an application
        uses a lot of CPU from time to time, it is hard for a developer to find out
        the source with Linux commands.
      measure: Gathering of system metrics helps to identify incidents and specially
        bottlenecks like in CPU usage, memory usage and hard disk usage.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 5
      assessment: |
        Are system metrics gathered?
      level: 1
      implementation:
      - name: collected
        tags: []
      references:
        samm2:
        - O-IM-1-A
        iso27001-2017:
        - 12.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Targeted alerting:
      risk: People are bored (ignorant) of incident alarm messages, as they are not
        responsible to react.
      measure: By the definition of target groups for incidents people are only getting
        alarms for incidents they are in charge for.
      difficultyOfImplementation:
        knowledge: 2
        time: 5
        resources: 5
      usefulness: 5
      level: 3
      dependsOn:
      - Alerting
      implementation: []
      references:
        samm2:
        - I-DM-A 3
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.5
      isImplemented: false
      evidence: ""
      comments: ""
    Visualized metrics:
      risk: Not visualized metrics lead to restricted usage of metrics.
      measure: Metrics are visualized in real time in a user friendly way.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 2
      usefulness: 3
      level: 2
      dependsOn:
      - Simple application metrics
      - Simple system metrics
      implementation: []
      references:
        samm2:
        - O-IM-2-A
        iso27001-2017:
        - 12.1.3
      isImplemented: false
      evidence: ""
      comments: ""
Test and Verification:
  Application tests:
    High coverage of security related module and integration tests:
      risk: Vulnerabilities are rising due to code changes in a complex microservice
        environment in not important components.
      measure: Implementation of security related tests via unit tests and integration
        tests. Including the test of libraries, in case the are not tested already.
      difficultyOfImplementation:
        knowledge: 5
        time: 5
        resources: 3
      usefulness: 3
      level: 4
      implementation: []
      references:
        samm2:
        - V-ST-3-B
        iso27001-2017:
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Security integration tests for important components:
      risk: Vulnerabilities are rising due to code changes in a complex microservice
        environment.
      measure: Implementation of essential security related integration tests. For
        example for authentication and authorization.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 2
      level: 3
      references:
        samm2:
        - V-ST-3-B
        iso27001-2017:
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Security unit tests for important components:
      risk: Vulnerabilities are rising due to code changes.
      measure: Usage of unit tests to test important security related features like
        authentication and authorization.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 3
      level: 2
      comment: |
        The integration of module tests takes place during development instead, it highlights vulnerabilities in sub-routines, functions, modules, libraries etc. checked.
        A sample implementation of unit tests are explained in the video [Shift-Left-Security with the Security Test Pyramid - Andreas Falk](https://www.youtube.com/watch?v=TzFZy3f7d8E) starting with minute 9.
      implementation:
      - name: JUnit
        tags:
        - unittest
        - d3f:UnitTestExecutionTool
        url: https://junit.org/junit5/
      - name: Karma
        description: Karma is a test runner for JavaScript.
        tags:
        - d3f:UnitTestExecutionTool
        url: https://karma-runner.github.io
      references:
        samm2:
        - V-ST-3-B
        iso27001-2017:
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Smoke Test:
      risk: During a deployment an error might happen which leads to non-availability
        of the system, a part of the system or a feature.
      measure: Integration tests are performed against the production environment
        after each deployment.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 2
      level: 4
      implementation: []
      dependsOn:
      - Defined deployment process
      references:
        samm2:
        - V-ST-3-B
        iso27001-2017:
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
  Consolidation:
    Advanced visualization of defects:
      risk: Correlation of the vulnerabilities of different tools to have an overview
        of the the overall security level per component/project/team is not given.
      measure: Findings are visualized per component/project/team.
      difficultyOfImplementation:
        knowledge: 2
        time: 4
        resources: 1
      usefulness: 2
      level: 4
      implementation:
      - name: OWASP DefectDojo
        tags:
        - vulnerability management system
        - owasp
        url: https://github.com/DefectDojo/django-DefectDojo
        description: DefectDojo is a security program and vulnerability management
          tool. DefectDojo allows you to manage your application security program,
          maintain product and application information, triage vulnerabilities and
          push findings into defect trackers. Consolidate your findings into one source
          of truth with DefectDojo.
      - name: Purify
        tags:
        - vulnerability management system
        url: https://github.com/faloker/purify/
        description: |
          The goal of Purify to be an easy-in-use and efficient tool to
          simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
      - name: Business friendly vulnerability management metrics
        url: https://medium.com/uber-security-privacy/business-friendly-vulnerability-management-metrics-cfd702fd7705
        tags:
        - documentation
        - vulnerability
        - vulnerability management system
      references:
        samm2:
        - I-DM-3-B
        iso27001-2017:
        - 16.1.4
        - 8.2.1
        - 8.2.2
        - 8.2.3
      isImplemented: false
      evidence: ""
      comments: ""
    Definition of quality gates:
      risk: Improper examination of vulnerabilities leads to no visibility at all.
      measure: |-
        Quality gates for found vulnerabilities are defined.
        In the beginning it is important to not overload the security analyst,
        therefore the recommendation
        is to start with alerting of high critical vulnerabilities.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 4
      level: 1
      references:
        samm2:
        - I-DM-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 16.1.4
      implementation:
      - name: See other actions, e.g. "Treatment of defects with severity high".
        tags: []
      isImplemented: false
      evidence: ""
      comments: ""
    Integration of vulnerability issues into the development process:
      risk: To read console output of the build server to search for vulnerabilities
        might be difficult. Also, to check a vulnerability management system might
        not be a daily task for a developer.
      measure: Vulnerabilities are tracked in the teams issue system (e.g. jira).
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 2
      level: 3
      implementation:
      - name: SAST
        tags:
        - d3f:StaticAnalysisTool
        description: 'At SAST (Static Application Security Testing): Server-side /
          client-side teams can easily be recorded. With microservice architecture
          individual microservices can be used usually Teams.'
        url: https://d3fend.mitre.org/dao/artifact/d3f:StaticAnalysisTool/
      - name: DAST
        tags:
        - d3f:DynamicAnalysisTool
        description: 'At DAST (Dynamic Application Security Testing): vulnerabilities
          are classified and can be assigned to server-side and client-side teams.'
        url: https://d3fend.mitre.org/dao/artifact/d3f:DynamicAnalysisTool/
      references:
        samm2:
        - I-DM-2-B
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.4
        - 16.1.5
        - 16.1.6
      isImplemented: false
      evidence: ""
      comments: ""
    Reproducible defect tickets:
      risk: Vulnerability descriptions are hard to understand by staff from operations
        and development.
      measure: Vulnerabilities include the test procedure to give the staff from operations
        and development the ability to reproduce vulnerabilities. This enhances the
        understanding of vulnerabilities and therefore the fix have a higher quality.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 2
      usefulness: 2
      level: 4
      implementation: []
      references:
        samm2:
        - I-DM-2-B
        iso27001-2017:
        - 16.1.4
        - 8.2.1
        - 8.2.2
        - 8.2.3
      isImplemented: false
      evidence: ""
      comments: ""
    Simple false positive treatment:
      risk: As false positive occur during each test, all vulnerabilities might be
        ignored.
      measure: False positives are suppressed so they will not show up on the next
        tests again. Most security tools have the possibility to suppress false positives.
        A Vulnerability Management System might be used.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 4
      level: 1
      implementation:
      - name: OWASP Defect Dojo
        tags: []
        url: https://github.com/DefectDojo/django-DefectDojo
      - name: Purify
        tags:
        - vulnerability management system
        url: https://github.com/faloker/purify/
        description: |
          The goal of Purify to be an easy-in-use and efficient tool to
          simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
      references:
        samm2:
        - I-DM-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.6
      isImplemented: false
      evidence: ""
      comments: ""
    Simple visualization of defects:
      risk: The security level of a component is not visible. Therefore, the motivation
        to enhance the security is not give.
      measure: Vulnerabilities are simple visualized.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 2
      implementation:
      - name: OWASP Dependency Check
        tags: []
        url: https://owasp.org/www-project-dependency-check/
      - name: LogParser Jenkins Plugins
        tags: []
      - name: OWASP DefectDojo
        tags:
        - vulnerability management system
        - owasp
        url: https://github.com/DefectDojo/django-DefectDojo
        description: DefectDojo is a security program and vulnerability management
          tool. DefectDojo allows you to manage your application security program,
          maintain product and application information, triage vulnerabilities and
          push findings into defect trackers. Consolidate your findings into one source
          of truth with DefectDojo.
      - name: Purify
        tags:
        - vulnerability management system
        url: https://github.com/faloker/purify/
        description: |
          The goal of Purify to be an easy-in-use and efficient tool to
          simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
      references:
        samm2:
        - I-DM-1-B
        iso27001-2017:
        - 16.1.4
        - 8.2.1
        - 8.2.2
        - 8.2.3
      isImplemented: false
      evidence: ""
      comments: ""
    Treatment of all defects:
      risk: Vulnerabilities with severity low are not visible.
      measure: All vulnerabilities are added to the quality gate.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 2
      level: 4
      implementation: []
      references:
        samm2:
        - I-DM-2-B
        iso27001-2017:
        - 16.1.4
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Treatment of defects with severity high or higher:
      risk: Vulnerabilities with severity high or higher are not visible.
      measure: Vulnerabilities with severity high or higher are added to the quality
        gate.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 1
      comment: False positive analysis, specially for static analysis, is time consuming.
      references:
        samm2:
        - I-DM-2-B
        iso27001-2017:
        - 16.1.4
        - 12.6.1
      implementation: []
      isImplemented: false
      evidence: ""
      comments: ""
    Treatment of defects with severity middle:
      risk: Vulnerabilities with severity middle are not visible.
      measure: Vulnerabilities with severity middle are added to the quality gate.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      comment: False positive analysis, specially for static analysis, is time consuming.
      references:
        samm2:
        - I-DM-2-B
        iso27001-2017:
        - 16.1.4
        - 12.6.1
      implementation: []
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of a vulnerability management system:
      risk: Maintenance of false positives in each tool enforces a high workload.
        In addition a correlation of the same finding from different tools is not
        possible.
      measure: Aggregation of vulnerabilities in one tool reduce the workload to mark
        false positives.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 2
      usefulness: 2
      level: 3
      implementation:
      - name: OWASP DefectDojo
        tags:
        - vulnerability management system
        - owasp
        url: https://github.com/DefectDojo/django-DefectDojo
        description: DefectDojo is a security program and vulnerability management
          tool. DefectDojo allows you to manage your application security program,
          maintain product and application information, triage vulnerabilities and
          push findings into defect trackers. Consolidate your findings into one source
          of truth with DefectDojo.
      - name: Purify
        tags:
        - vulnerability management system
        url: https://github.com/faloker/purify/
        description: |
          The goal of Purify to be an easy-in-use and efficient tool to
          simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
      references:
        samm2:
        - I-DM-1-B
        iso27001-2017:
        - 12.6.1
        - 16.1.3
        - 16.1.4
        - 16.1.5
        - 16.1.6
      isImplemented: false
      evidence: ""
      comments: ""
  Dynamic depth for applications:
    Coverage analysis:
      risk: Parts of the service are not still covered by tests.
      measure: Check that there are no missing paths in the application with coverage-tools.
      difficultyOfImplementation:
        knowledge: 4
        time: 5
        resources: 3
      usefulness: 4
      level: 4
      implementation:
      - name: OWASP Code Pulse
        tags: []
        url: https://www.owasp.org/index.php/OWASP_Code_Pulse
      - name: Coverage.py
        tags:
        - testing
        - coverage
        - d3f:DynamicAnalysisTool
        url: https://github.com/nedbat/coveragepy
        description: |
          Code coverage measurement for Python
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - part of periodic review, PDCA
      isImplemented: false
      evidence: ""
      comments: ""
    Coverage of client side dynamic components:
      risk: Parts of the service are not covered during the scan, because JavaScript
        is not getting executed. Therefore, the co
      measure: Usage of a spider which executes dynamic content like JavaScript, e.g.
        via Selenium.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 1
      usefulness: 4
      level: 2
      dependsOn:
      - Usage of different roles
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 14.2.3
        - 14.2.8
      implementation:
      - name: Ajax Spider
        tags:
        - d3f:DynamicAnalysisTool
        url: https://www.zaproxy.org/docs/desktop/addons/ajax-spider/
      isImplemented: false
      evidence: ""
      comments: ""
    Coverage of hidden endpoints:
      risk: Hidden endpoints of the service are not getting tracked.
      measure: Hidden endpoints are getting detected and included in the vulnerability
        scan.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 5
      level: 3
      implementation:
      - name: cURL
        tags: []
        url: https://curl.se/
      - name: OpenAPI Specifications
        tags: []
        url: https://spec.openapis.org/
      - name: OWASP Zap
        tags:
        - vulnerability
        - scanner
        - d3f:DynamicAnalysisTool
        url: https://github.com/zaproxy/zaproxy
        description: |
          The OWASP Zed Attack Proxy (ZAP) is one of the world's most popular free security tools
          and is actively maintained by a dedicated international team of ...
      - name: Schemathesis
        tags:
        - testing
        - api
        - documentation
        url: https://github.com/schemathesis/schemathesis
        description: |
          Schemathesis is a tool for testing web applications and services by sending requests based on the Open API / Swagger schema.
      dependsOn:
      - Usage of different roles
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
      isImplemented: false
      evidence: ""
      comments: ""
    Coverage of more input vectors:
      risk: Parts of the service are not covered. For example specially formatted
        or coded parameters are not getting detected as parameter (e.g. parameters
        in REST-like URLs, parameters in JSON-Format or base64-coded parameters).
      measure: Special parameter and special encodings are defined, so that they get
        fuzzed by the used vulnerability scanners.
      difficultyOfImplementation:
        knowledge: 5
        time: 5
        resources: 1
      usefulness: 4
      level: 3
      dependsOn:
      - Usage of different roles
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
      implementation:
      - name: Schemathesis
        tags:
        - testing
        - api
        - documentation
        url: https://github.com/schemathesis/schemathesis
        description: |
          Schemathesis is a tool for testing web applications and services by sending requests based on the Open API / Swagger schema.
      isImplemented: false
      evidence: ""
      comments: ""
    Coverage of sequential operations:
      risk: Sequential operations like workflows (e.g. login -> put products in the
        basket
      measure: Sequential operations are defined and checked by the vulnerability
        scanner in the defined order.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 1
      usefulness: 5
      level: 3
      implementation:
      - name: cURL
        tags: []
        url: https://curl.se/
      dependsOn:
      - Usage of different roles
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 14.2.8
        - 14.2.3
      isImplemented: false
      evidence: ""
      comments: ""
    Coverage of service to service communication:
      risk: Service to service communication is not covered.
      measure: Service to service communication is dumped and checked.
      difficultyOfImplementation:
        knowledge: 4
        time: 5
        resources: 2
      usefulness: 3
      level: 4
      dependsOn:
      - Simple Scan
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 14.2.3
        - 14.2.8
      implementation:
      - signing-of-commits-protection:
          name: Enforcement of commit signing
          tags:
          - signing
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
          description: Usage of branch protection rules
        signing-of-commits:
          name: Signing of commits
          tags:
          - signing
          url: https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work
          description: Signing of commits in git
        ci-cd-tools:
          name: CI/CD tools
          tags:
          - ci-cd
          url: https://martinfowler.com/articles/continuousIntegration.html
          description: CI/CD tools such as jenkins, gitlab-ci or github-actions
        apimaturity:
          name: API Security Maturity Model for Authorization
          tags:
          - api
          url: https://curity.io/resources/learn/the-api-security-maturity-model/
        container-orchestration:
          name: Container technologies and orchestration like Docker, Kubernetes
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
        cwe25:
          name: CWE Top 25 Most Dangerous Software Weaknesses
          tags:
          - documentation
          - threat
          url: https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html
        docker-content-trust:
          name: Docker Content Trust
          tags: []
          url: https://docs.docker.com/notary/getting_started/
        in-toto:
          name: in-toto
          tags: []
          url: https://in-toto.github.io/
        a-complete-backup-of:
          name: A complete backup of persisted data might be performed.
          tags: []
        a-point-in-time-reco:
          name: A Point in Time Recovery for databases should be implemented.
          tags: []
        blue-green-deploymen:
          name: Blue/Green Deployments
          tags: []
          url: https://martinfowler.com/bliki/BlueGreenDeployment.html
        docker:
          name: Docker
          url: https://github.com/moby/moby
          tags: []
        webserver:
          name: Webserver
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebServer/
        rolling-update:
          name: rolling update
          tags: []
        kubernetes-admission:
          name: Kubernetes Admission Controller can whitelist registries and/or whitelist
            a signing key.
          tags:
          - d3f:ContainerOrchestrationSoftware
        dependabot:
          name: dependabot
          tags: []
          url: https://dependabot.com/
        jenkins:
          name: Jenkins
          tags: []
          url: https://www.jenkins.io/
        sample-concept-1:
          name: Daily rebuild of container images
          tags: []
          description: |
            Sample concept:
            1. each container has a set lifetime and is killed/replaced with a new container
            multiple times a day where you have
            some form of a graceful replacement to ensure no (short) service outage will
            occur to the end users.
            2. twice a day a rebuild of images is done. The rebuilds are put into a automated testing pipeline.
            If the testing has no blocking issues the new images will be released for deployment during the
            next "restart" of a container. What has to be done, is to ensure the new
            containers are deployed in some canary deployment manner, this will ensure
            that if (and only if) something buggy has been introduced which breaks functionality
            the canary deployment will make sure the "older version" is being used and
                            not the buggy newer one.
        distroless:
          name: Distroless Container Images
          tags:
          - d3f:ContainerImage
          url: https://github.com/GoogleContainerTools/distroless
        fedora-coreos:
          name: Fedora CoreOS
          tags: []
          url: https://getfedora.org/coreos
        threat-modeling-play:
          name: Threat Modeling Playbook
          tags:
          - owasp
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/Toreon/threat-model-playbook
        owasp-samm:
          name: OWASP SAMM
          tags:
          - threat-modeling
          - owasp
          - defender
          url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
        whiteboard:
          name: Whiteboard
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://en.wikipedia.org/wiki/Whiteboard
        miro-or-any-other-c:
          name: Miro (or any other collaborative board)
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://miro.com/
        draw-io:
          name: Draw.io
          tags:
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/jgraph/drawio-desktop
        threagile:
          name: Threagile
          tags:
          - threat-modeling
          url: https://github.com/Threagile/threagile
        don-t-forget-evil-u:
          name: Don't Forget EVIL User stories
          tags: []
          url: https://www.owasp.org/index.php/Agile_Software_Development
          description: '[Do not Forget EVIL User Stories](https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories)
            and [Practical Security Stories and Security Tasks for Agile Development
            Environments](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
        owasp-juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: |-
            In case you do not have the budget to hire an external security expert,
            an option is to use the OWASP JuiceShop on a "hacking Friday"
        owasp-cheatsheet-ser:
          name: OWASP Cheatsheet Series
          tags:
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        https-cheatsheetse:
          name: https://cheatsheetseries.owasp.org/
          tags:
          - training
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        owasp-security-champ:
          name: OWASP Security Champions Playbook
          tags:
          - security champions
          url: https://github.com/c0rdis/security-champions-playbook
        build-it-break-it-fi:
          name: Build it Break it Fix it Contest
          tags: []
          url: https://builditbreakit.org/
        motivate-people:
          name: Motivate people
          tags:
          - security champions
          - gamification
          - nudging
          url: https://github.com/wurstbrot/security-pins
          description: |-
            Enhance motivation can be performed with the distribution of pins
            as a reward, see [OWASP Security Pins Project](https://github.com/wurstbrot/security-pins)
        owasp-top-10-maturit:
          name: OWASP Top 10 Maturity Categories for Security Champions
          tags:
          - security champions
          url: https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
        involve-security-sme:
          name: Involve Security SME
          tags: []
          description: Security SME are involved in discussion for requirements analysis,
            software design and sprint planning to provide guidance and suggestions.
        damn-vulnerable-web:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        example-all-docker:
          name: 'Example: All docker images used by teams need to be based on standard
            images.'
          tags: []
        owasp-asvs:
          name: OWASP ASVS
          tags: []
          url: https://owasp.org/www-project-application-security-verification-standard/
        owasp-masvs:
          name: OWASP MASVS
          tags: []
          url: https://github.com/OWASP/owasp-masvs
        cis-kubernetes-bench:
          name: CIS Kubernetes Bench for Security
          tags:
          - d3f:ContainerOrchestrationSoftware
          url: https://www.cisecurity.org/cis-benchmarks/
        cis-docker-bench-for:
          name: CIS Docker Bench for Security
          tags:
          - d3f:ContainerRuntime
          url: https://www.cisecurity.org/cis-benchmarks/
        container-execution-isolation:
          name: Isolate containers execution
          tags:
          - d3f:ContainerOrchestrationSoftware
          - d3f:ContainerImage
          description: 'For example for Containers: Deny running containers as root,
            deny using advanced privileges, deny mounting of the hole filesystem,
            ...'
          url: https://d3fend.mitre.org/technique/d3f:ExecutionIsolation/
        attack-matrix-cloud:
          name: Attack Matrix Cloud
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for cloud
        attack-matrix-contai:
          name: Attack Matrix Containers
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for containers
        attack-matrix-kubern:
          name: Attack Matrix Kubernetes
          tags:
          - mitre
          - d3f:ContainerOrchestrationSoftware
          url: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/
          description: Attack matrix for kubernetes
        istio:
          name: istio
          tags: []
          description: Istio is an open platform to connect, manage, and secure microservices.
          url: https://istio.io/
        bridges:
          name: bridges
          tags: []
        firewalls:
          name: firewalls
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Firewall/
        open-policy-agent:
          name: Open Policy Agent
          description: |-
            Open Policy Agent is an open source,
            general-purpose policy engine that unifies policy enforcement across the stack.
          tags: []
          url: https://www.openpolicyagent.org/
        gitops:
          name: GitOps
          description: |-
            GitOps is a way to do Kubernetes application delivery.
            It works by using Git as a single source of truth for Kubernetes resources
            and everything else.
          tags: []
          url: https://www.redhat.com/en/topics/devops/what-is-gitops
        ansible:
          name: Ansible
          description: |-
            Ansible is an open-source software provisioning, configuration management,
            and application-deployment tool enabling infrastructure as code.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/ansible/ansible
        chef:
          name: Chef
          description: |-
            Chef is an open-source software automation platform that
            helps system administrators manage infrastructure and applications.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/chef/chef
        puppet:
          description: Puppet is an open-source software configuration management
            tool.
          name: Puppet
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/puppetlabs/puppet
        argocd:
          name: ArgoCD
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/argoproj/argo-cd
        jenkinsfile:
          name: Jenkinsfile
          tags: []
          url: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
        seccomp:
          name: seccomp
          tags: []
          url: https://man7.org/linux/man-pages/man2/seccomp.2.html
        strace:
          name: strace
          tags: []
          url: https://man7.org/linux/man-pages/man1/strace.1.html
        remove-direct-access:
          name: Remove direct access to infrastructure
          tags: []
        directory-service:
          name: Directory Service
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:DirectoryService/
        plugins:
          name: Plugins
          tags: []
        smartcard:
          name: Smartcard
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        yubikey:
          name: YubiKey
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        sms:
          name: SMS
          tags:
          - d3f:Multi-factorAuthentication
        totp:
          name: TOTP
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:One-timePassword/
        http-basic-authentic:
          name: HTTP-Basic Authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebAuthentication/
        vpn:
          name: VPN
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:VPN/
        for-applications-ch:
          name: 'For applications: Check default encoding'
          tags: []
        managing-secrets:
          name: managing secrets
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:CredentialHardening/
        crypto:
          name: crypto
          tags: []
        authentication:
          name: authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Authentication/
        rsyslog:
          name: rsyslog
          url: https://www.rsyslog.com/
          tags:
          - tool
          - logging
        logstash:
          name: logstash
          url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
          tags:
          - tool
          - logging
        fluentd:
          name: fluentd
          tags:
          - tool
          url: https://www.fluentd.org/
        bash:
          name: bash
          tags:
          - tool
          url: https://www.gnu.org/software/bash/
        owasp-logging-cheats:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        elk-stack:
          name: ELK-Stack
          tags: []
          url: https://www.elastic.co/elk-stack
        https-ht-transpare:
          name: https://ht.transpare
          tags: []
          url: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD
          description: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD%20Fileserver/books/SICUREZZA/Addison.Wesley.Security.Metrics.Mar.2007.pdf
        prometheus:
          name: Prometheus
          tags: []
          url: https://prometheus.io/
        collected:
          name: collected
          tags: []
        httpunit:
          name: HttpUnit
          tags: []
          url: http://httpunit.sourceforge.net/
        junit:
          name: JUnit
          tags:
          - unittest
          - d3f:UnitTestExecutionTool
          url: https://junit.org/junit5/
        karma:
          name: Karma
          description: Karma is a test runner for JavaScript.
          tags:
          - d3f:UnitTestExecutionTool
          url: https://karma-runner.github.io
        owasp-defectdojo:
          name: OWASP DefectDojo
          tags:
          - vulnerability management system
          - owasp
          url: https://github.com/DefectDojo/django-DefectDojo
          description: DefectDojo is a security program and vulnerability management
            tool. DefectDojo allows you to manage your application security program,
            maintain product and application information, triage vulnerabilities and
            push findings into defect trackers. Consolidate your findings into one
            source of truth with DefectDojo.
        purify:
          name: Purify
          tags:
          - vulnerability management system
          url: https://github.com/faloker/purify/
          description: |
            The goal of Purify to be an easy-in-use and efficient tool to
            simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
        see-other-actions-e:
          name: See other actions, e.g. "Treatment of defects with severity high".
          tags: []
        sast:
          name: SAST
          tags:
          - d3f:StaticAnalysisTool
          description: 'At SAST (Static Application Security Testing): Server-side
            / client-side teams can easily be recorded. With microservice architecture
            individual microservices can be used usually Teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:StaticAnalysisTool/
        dast:
          name: DAST
          tags:
          - d3f:DynamicAnalysisTool
          description: 'At DAST (Dynamic Application Security Testing): vulnerabilities
            are classified and can be assigned to server-side and client-side teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:DynamicAnalysisTool/
        owasp-defect-dojo:
          name: OWASP Defect Dojo
          tags: []
          url: https://github.com/DefectDojo/django-DefectDojo
        owasp-dependency-che:
          name: OWASP Dependency Check
          tags: []
          url: https://owasp.org/www-project-dependency-check/
        logparser-jenkins-pl:
          name: LogParser Jenkins Plugins
          tags: []
        owasp-code-pulse:
          name: OWASP Code Pulse
          tags: []
          url: https://www.owasp.org/index.php/OWASP_Code_Pulse
        ajax-spider:
          name: Ajax Spider
          tags:
          - d3f:DynamicAnalysisTool
          url: https://www.zaproxy.org/docs/desktop/addons/ajax-spider/
        curl:
          name: cURL
          tags: []
          url: https://curl.se/
        openapi:
          name: OpenAPI Specifications
          tags: []
          url: https://spec.openapis.org/
        owasp-zap:
          name: OWASP Zap
          tags:
          - vulnerability
          - scanner
          - d3f:DynamicAnalysisTool
          url: https://github.com/zaproxy/zaproxy
          description: |
            The OWASP Zed Attack Proxy (ZAP) is one of the world's most popular free security tools
            and is actively maintained by a dedicated international team of ...
        arachni:
          name: Arachni
          description: Arachni is a feature-full, modular, high-performance Ruby framework
            aimed towards helping penetration testers and administrators evaluate
            the security of web applications.
          url: https://github.com/Arachni/arachni
        zest:
          name: Zest
          url: https://www.zaproxy.org/docs/desktop/addons/zest/
          tags:
          - zap
          description: Zest is an experimental specialized scripting language (also
            known as a domain-specific language) originally developed by the Mozilla
            security team and is intended to be used in web oriented security tools.
        owasp-securecodebox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: |
            secureCodeBox is a kubernetes based, modularized toolchain for continuous security scans of your software project. Its goal is to orchestrate and easily automate a bunch of security-testing tools out of the box.
        kube-hunter:
          name: kube-hunter
          description: kube-hunter is a tool that helps you to hunt for security weaknesses
            in Kubernetes clusters. It is a customizable, easy to use and powerful
            hunting framework that enables security researchers and developers to
            test the security of their Kubernetes clusters and workloads.
          tags:
          - d3f:DynamicAnalysisTool
          - d3f:ContainerOrchestrationSoftware
          url: https://github.com/aquasecurity/kube-hunter
        openvas:
          name: openVAS
          tags: []
          url: https://www.openvas.org/
        htc-hydra:
          name: HTC Hydra
          tags:
          - password
          url: https://www.htc-cs.com/en/products/htc-hydra/
        netassert:
          name: netassert
          tags: []
          url: https://github.com/controlplaneio/netassert
        nmap:
          name: nmap
          tags: []
          url: https://nmap.org/
        owasp-amass:
          name: OWASP Amass
          tags: []
          url: https://github.com/OWASP/Amass
        k8spurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          - d3f:ContainerOrchestrationSoftware
          - d3f:DynamicAnalysisTool
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        pmd:
          name: PMD
          tags: []
        eslint:
          name: eslint
          tags:
          - d3f:StaticAnalysisTool
          url: https://eslint.org/
        findsecuritybugs:
          name: FindSecurityBugs
          tags: []
        jsprime:
          name: jsprime
          description: jsprime is a static analysis tool for JavaScript that detects
            security vulnerabilities in web applications. It is based on the JavaScript
            parser Esprima and the static analysis framework TSLint.
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/dpnishant/jsprime
        bdd-mobile-security:
          name: '[bdd-mobile-security'
          tags: []
          url: https://github.com/ing-bank/bdd-mobile-security-automation-framework
          description: '[bdd-mobile-security-automation-framework](https://github.com/ing-bank/bdd-mobile-security-automation-framework)'
        retire-js:
          name: retire.js
          tags: []
          url: https://github.com/RetireJS/retire.js/
        npm-audit:
          name: npm audit
          tags:
          - d3f:StaticAnalysisTool
          url: https://docs.npmjs.com/cli/audit
        sigmahq:
          name: SigmaHQ
          tags: []
          url: https://github.com/SigmaHQ/sigma
        dive-to-inspect-a-co:
          name: Dive to inspect a container images
          tags: []
          url: https://github.com/wagoodman/dive
        clusterscanner:
          url: https://github.com/SDA-SE/clusterscanner
          name: ClusterScanner
          tags:
          - docker
          - image
          - container
          - vulnerability
          - misconfiguration
          - securiity-tools
          - scanning
          description: Discover vulnerabilities and container image misconfiguration
            in production environments.
        dockerfile-with-hado:
          name: Dockerfile with hadolint
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/hadolint/hadolint
        deployment-with-kube:
          name: Deployment with kube-score
          tags: []
          url: https://github.com/zegl/kube-score
        kubesec:
          name: kubesec
          tags: []
          url: https://kubesec.io
        anchore-io:
          name: Anchore.io
          description: Anchore is a container image analysis and policy engine that
            enables you to understand the contents of your container images and ensure
            that they are secure and compliant.
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://anchore.com/
        clair:
          name: Clair
          description: Clair is an open source project for the static analysis of
            vulnerabilities in application containers (currently including appc and
            docker).
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/quay/clair
        openscap:
          name: OpenSCAP
          tags: []
          url: https://www.open-scap.org/
        vuls:
          name: Vuls
          tags: []
          url: https://github.com/future-architect/vuls
        kube-bench:
          name: kube-bench
          tags: []
          url: https://github.com/aquasecurity/kube-bench
        trufflehog:
          name: truffleHog
          description: Searches through git repositories for high entropy strings,
            digging deep into commit history.
          tags: []
          url: https://github.com/dxa4481/truffleHog
        go-pillage-registrie:
          name: go-pillage-registries
          tags: []
          url: https://github.com/nccgroup/go-pillage-registries
        trivy:
          name: https://github.com/aquasecurity/trivy
          description: A Simple and Comprehensive Vulnerability Scanner for Containers,
            Suitable for CI
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/aquasecurity/trivy
        registries-like-quay:
          name: Registries like quay
          tags: []
          description: Registries like quay, dockerhub provide (commercial) offerings,
            often not suitable for distroless images
        dockerfilelint:
          name: dockerfilelint
          tags:
          - sast
          - docker
          - dockerfile
          - d3f:StaticAnalysisTool
          - d3f:ContainerBuildTool
          url: https://github.com/replicatedhq/dockerfilelint
          description: dockerfilelint is an node module that analyzes a Dockerfile
            and looks for common traps, mistakes and helps enforce best practices.
        threat-matrix-for-storage:
          name: Threat Matrix for Storage
          url: https://www.microsoft.com/security/blog/2021/04/08/threat-matrix-for-storage/
          tags:
          - documentation
          - storage
          - cluster
          - kubernetes
        defend-the-core-kubernetes:
          name: Defend the core kubernetes security at every layer
          url: https://thenewstack.io/defend-the-core-kubernetes-security-at-every-layer/
          tags:
          - documentation
          - cluster
          - kubernetes
        business-friendly-vulnerability-metrics:
          name: Business friendly vulnerability management metrics
          url: https://medium.com/uber-security-privacy/business-friendly-vulnerability-management-metrics-cfd702fd7705
          tags:
          - documentation
          - vulnerability
          - vulnerability management system
        kubescape:
          name: kubescape
          description: kubescape is a tool that helps you scan your Kubernetes clusters
            to identify security misconfigurations as defined in Kubernetes Hardening
            Guidance by to NSA and CISA_
          url: https://github.com/armosec/kubescape
          tags:
          - kubernetes
          - vulnerability
          - misconfiguration
        azuredevops:
          name: Improve code quality with branch policies
          url: https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops
          tags:
          - source-code-protection
          - scm
        github-policies:
          name: About protected branches
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
          tags:
          - source-code-protection
          - scm
        sonarqube:
          name: In-Depth Linting of Your TypeScript While Coding
          url: https://blog.sonarsource.com/in-depth-linting-of-your-typescript-while-coding
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        stylecop:
          name: How to enforce a consistent coding style in your projects
          url: https://www.meziantou.net/how-to-enforce-a-consistent-coding-style-in-your-projects.htm
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        fortify-vscode-extension:
          name: Fortify Extension for Visual Studio Code
          url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
          tags:
          - ide
          - sast
        appscan-vscode-extension:
          name: HCL AppScan CodeSweep
          url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
          tags:
          - ide
          - sast
        checkmarx-vscode-extension:
          name: Setting Up the Visual Studio Code Extension Plugin
          url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
          tags:
          - ide
          - sast
        pre-commit-microsoft:
          name: DevSecOps control Pre-commit
          url: https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls#plan-and-develop
          tags:
          - pre-commit
        pre-commit-synopsis:
          name: Building your DevSecOps pipeline 5 essential activities
          url: https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/
          tags:
          - pre-commit
        pre-commit-python:
          name: Pre-commit hooks in Python
          url: https://github.com/pre-commit/pre-commit
          tags:
          - pre-commit
          - d3f:StaticAnalysisTool
        dependencyTrack:
          name: Dependency-Track is an intelligent Component Analysis platform that
            allows organizations to identify and reduce risk in the software supply
            chain. Dependency-Track takes a unique and highly beneficial approach
            by leveraging the capabilities of Software Bill of Materials (SBOM).
          url: https://github.com/DependencyTrack/dependency-track
          tags:
          - sca
          - inventory
        juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: In case you do not have the budget to hire an external security
            expert, an option is to use the OWASP JuiceShop on a "hacking Friday"
        dvwa:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        loggingCheatSheet:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        secureCodeBox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: secureCodeBox is a kubernetes based, modularized toolchain
            for continuous security scans of your software project. Its goal is to
            orchestrate and easily automate a bunch of security-testing tools out
            of the box.
        K8sPurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        hashicorp-vault:
          name: Hashicorp Vault
          tags:
          - authentication
          - authorization
          - secrets
          - infrastructure
          url: https://github.com/hashicorp/vault
          description: |
            A tool for secrets management, encryption as a service, and privileged access management.
        stoplight-spectral:
          name: Spectral
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/stoplightio/spectral
          description: |
            Spectral is a flexible JSON/YAML linter built with extensibility in mind.
            It uses JSON/YAML path rules to describe the problems you want to find.
        api-oas-checker:
          name: API OAS Checker
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/italia/api-oas-checker
          description: |
            A tool to check OpenAPI specifications using a comprehensive ruleset based
            on API best practices.
        coveragepy:
          name: Coverage.py
          tags:
          - testing
          - coverage
          - d3f:DynamicAnalysisTool
          url: https://github.com/nedbat/coveragepy
          description: |
            Code coverage measurement for Python
        github-dependabot:
          name: Dependabot
          tags:
          - dependency
          - dependency-management
          - scm
          url: https://github.com/dependabot/dependabot-core
          description: |
            Dependabot creates pull requests to keep your dependencies secure and up-to-date.
        github-super-linter:
          name: Super-Linter
          tags:
          - linting
          - scm
          - d3f:StaticAnalysisTool
          url: https://github.com/github/super-linter
          description: |
            Lint code bases to catch common errors and enforce code style
        schemathesis:
          name: Schemathesis
          tags:
          - testing
          - api
          - documentation
          url: https://github.com/schemathesis/schemathesis
          description: |
            Schemathesis is a tool for testing web applications and services by sending requests based on the Open API / Swagger schema.
        martin-feature-toggles:
          name: Feature Toggles
          tags:
          - development
          - architecture
          url: https://martinfowler.com/articles/feature-toggles.html
          description: |
            Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. (Pete Hodgson)
        tw-talisman:
          name: Talisman
          tags:
          - scm
          - secrets
          - d3f:StaticAnalysisTool
          url: https://github.com/thoughtworks/talisman
          description: |
            Talisman is a git hook that scans your commits for secrets before you push them to a remote repository.
        spotbugs:
          name: SpotBugs
          tags:
          - static-analysis
          - java
          - d3f:StaticAnalysisTool
          url: https://github.com/spotbugs/spotbugs
          description: |
            SpotBugs is a program which uses static analysis to look for bugs in Java code.
      - signing-of-commits-protection:
          name: Enforcement of commit signing
          tags:
          - signing
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
          description: Usage of branch protection rules
        signing-of-commits:
          name: Signing of commits
          tags:
          - signing
          url: https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work
          description: Signing of commits in git
        ci-cd-tools:
          name: CI/CD tools
          tags:
          - ci-cd
          url: https://martinfowler.com/articles/continuousIntegration.html
          description: CI/CD tools such as jenkins, gitlab-ci or github-actions
        apimaturity:
          name: API Security Maturity Model for Authorization
          tags:
          - api
          url: https://curity.io/resources/learn/the-api-security-maturity-model/
        container-orchestration:
          name: Container technologies and orchestration like Docker, Kubernetes
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
        cwe25:
          name: CWE Top 25 Most Dangerous Software Weaknesses
          tags:
          - documentation
          - threat
          url: https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html
        docker-content-trust:
          name: Docker Content Trust
          tags: []
          url: https://docs.docker.com/notary/getting_started/
        in-toto:
          name: in-toto
          tags: []
          url: https://in-toto.github.io/
        a-complete-backup-of:
          name: A complete backup of persisted data might be performed.
          tags: []
        a-point-in-time-reco:
          name: A Point in Time Recovery for databases should be implemented.
          tags: []
        blue-green-deploymen:
          name: Blue/Green Deployments
          tags: []
          url: https://martinfowler.com/bliki/BlueGreenDeployment.html
        docker:
          name: Docker
          url: https://github.com/moby/moby
          tags: []
        webserver:
          name: Webserver
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebServer/
        rolling-update:
          name: rolling update
          tags: []
        kubernetes-admission:
          name: Kubernetes Admission Controller can whitelist registries and/or whitelist
            a signing key.
          tags:
          - d3f:ContainerOrchestrationSoftware
        dependabot:
          name: dependabot
          tags: []
          url: https://dependabot.com/
        jenkins:
          name: Jenkins
          tags: []
          url: https://www.jenkins.io/
        sample-concept-1:
          name: Daily rebuild of container images
          tags: []
          description: |
            Sample concept:
            1. each container has a set lifetime and is killed/replaced with a new container
            multiple times a day where you have
            some form of a graceful replacement to ensure no (short) service outage will
            occur to the end users.
            2. twice a day a rebuild of images is done. The rebuilds are put into a automated testing pipeline.
            If the testing has no blocking issues the new images will be released for deployment during the
            next "restart" of a container. What has to be done, is to ensure the new
            containers are deployed in some canary deployment manner, this will ensure
            that if (and only if) something buggy has been introduced which breaks functionality
            the canary deployment will make sure the "older version" is being used and
                            not the buggy newer one.
        distroless:
          name: Distroless Container Images
          tags:
          - d3f:ContainerImage
          url: https://github.com/GoogleContainerTools/distroless
        fedora-coreos:
          name: Fedora CoreOS
          tags: []
          url: https://getfedora.org/coreos
        threat-modeling-play:
          name: Threat Modeling Playbook
          tags:
          - owasp
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/Toreon/threat-model-playbook
        owasp-samm:
          name: OWASP SAMM
          tags:
          - threat-modeling
          - owasp
          - defender
          url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
        whiteboard:
          name: Whiteboard
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://en.wikipedia.org/wiki/Whiteboard
        miro-or-any-other-c:
          name: Miro (or any other collaborative board)
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://miro.com/
        draw-io:
          name: Draw.io
          tags:
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/jgraph/drawio-desktop
        threagile:
          name: Threagile
          tags:
          - threat-modeling
          url: https://github.com/Threagile/threagile
        don-t-forget-evil-u:
          name: Don't Forget EVIL User stories
          tags: []
          url: https://www.owasp.org/index.php/Agile_Software_Development
          description: '[Do not Forget EVIL User Stories](https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories)
            and [Practical Security Stories and Security Tasks for Agile Development
            Environments](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
        owasp-juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: |-
            In case you do not have the budget to hire an external security expert,
            an option is to use the OWASP JuiceShop on a "hacking Friday"
        owasp-cheatsheet-ser:
          name: OWASP Cheatsheet Series
          tags:
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        https-cheatsheetse:
          name: https://cheatsheetseries.owasp.org/
          tags:
          - training
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        owasp-security-champ:
          name: OWASP Security Champions Playbook
          tags:
          - security champions
          url: https://github.com/c0rdis/security-champions-playbook
        build-it-break-it-fi:
          name: Build it Break it Fix it Contest
          tags: []
          url: https://builditbreakit.org/
        motivate-people:
          name: Motivate people
          tags:
          - security champions
          - gamification
          - nudging
          url: https://github.com/wurstbrot/security-pins
          description: |-
            Enhance motivation can be performed with the distribution of pins
            as a reward, see [OWASP Security Pins Project](https://github.com/wurstbrot/security-pins)
        owasp-top-10-maturit:
          name: OWASP Top 10 Maturity Categories for Security Champions
          tags:
          - security champions
          url: https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
        involve-security-sme:
          name: Involve Security SME
          tags: []
          description: Security SME are involved in discussion for requirements analysis,
            software design and sprint planning to provide guidance and suggestions.
        damn-vulnerable-web:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        example-all-docker:
          name: 'Example: All docker images used by teams need to be based on standard
            images.'
          tags: []
        owasp-asvs:
          name: OWASP ASVS
          tags: []
          url: https://owasp.org/www-project-application-security-verification-standard/
        owasp-masvs:
          name: OWASP MASVS
          tags: []
          url: https://github.com/OWASP/owasp-masvs
        cis-kubernetes-bench:
          name: CIS Kubernetes Bench for Security
          tags:
          - d3f:ContainerOrchestrationSoftware
          url: https://www.cisecurity.org/cis-benchmarks/
        cis-docker-bench-for:
          name: CIS Docker Bench for Security
          tags:
          - d3f:ContainerRuntime
          url: https://www.cisecurity.org/cis-benchmarks/
        container-execution-isolation:
          name: Isolate containers execution
          tags:
          - d3f:ContainerOrchestrationSoftware
          - d3f:ContainerImage
          description: 'For example for Containers: Deny running containers as root,
            deny using advanced privileges, deny mounting of the hole filesystem,
            ...'
          url: https://d3fend.mitre.org/technique/d3f:ExecutionIsolation/
        attack-matrix-cloud:
          name: Attack Matrix Cloud
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for cloud
        attack-matrix-contai:
          name: Attack Matrix Containers
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for containers
        attack-matrix-kubern:
          name: Attack Matrix Kubernetes
          tags:
          - mitre
          - d3f:ContainerOrchestrationSoftware
          url: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/
          description: Attack matrix for kubernetes
        istio:
          name: istio
          tags: []
          description: Istio is an open platform to connect, manage, and secure microservices.
          url: https://istio.io/
        bridges:
          name: bridges
          tags: []
        firewalls:
          name: firewalls
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Firewall/
        open-policy-agent:
          name: Open Policy Agent
          description: |-
            Open Policy Agent is an open source,
            general-purpose policy engine that unifies policy enforcement across the stack.
          tags: []
          url: https://www.openpolicyagent.org/
        gitops:
          name: GitOps
          description: |-
            GitOps is a way to do Kubernetes application delivery.
            It works by using Git as a single source of truth for Kubernetes resources
            and everything else.
          tags: []
          url: https://www.redhat.com/en/topics/devops/what-is-gitops
        ansible:
          name: Ansible
          description: |-
            Ansible is an open-source software provisioning, configuration management,
            and application-deployment tool enabling infrastructure as code.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/ansible/ansible
        chef:
          name: Chef
          description: |-
            Chef is an open-source software automation platform that
            helps system administrators manage infrastructure and applications.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/chef/chef
        puppet:
          description: Puppet is an open-source software configuration management
            tool.
          name: Puppet
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/puppetlabs/puppet
        argocd:
          name: ArgoCD
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/argoproj/argo-cd
        jenkinsfile:
          name: Jenkinsfile
          tags: []
          url: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
        seccomp:
          name: seccomp
          tags: []
          url: https://man7.org/linux/man-pages/man2/seccomp.2.html
        strace:
          name: strace
          tags: []
          url: https://man7.org/linux/man-pages/man1/strace.1.html
        remove-direct-access:
          name: Remove direct access to infrastructure
          tags: []
        directory-service:
          name: Directory Service
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:DirectoryService/
        plugins:
          name: Plugins
          tags: []
        smartcard:
          name: Smartcard
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        yubikey:
          name: YubiKey
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        sms:
          name: SMS
          tags:
          - d3f:Multi-factorAuthentication
        totp:
          name: TOTP
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:One-timePassword/
        http-basic-authentic:
          name: HTTP-Basic Authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebAuthentication/
        vpn:
          name: VPN
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:VPN/
        for-applications-ch:
          name: 'For applications: Check default encoding'
          tags: []
        managing-secrets:
          name: managing secrets
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:CredentialHardening/
        crypto:
          name: crypto
          tags: []
        authentication:
          name: authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Authentication/
        rsyslog:
          name: rsyslog
          url: https://www.rsyslog.com/
          tags:
          - tool
          - logging
        logstash:
          name: logstash
          url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
          tags:
          - tool
          - logging
        fluentd:
          name: fluentd
          tags:
          - tool
          url: https://www.fluentd.org/
        bash:
          name: bash
          tags:
          - tool
          url: https://www.gnu.org/software/bash/
        owasp-logging-cheats:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        elk-stack:
          name: ELK-Stack
          tags: []
          url: https://www.elastic.co/elk-stack
        https-ht-transpare:
          name: https://ht.transpare
          tags: []
          url: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD
          description: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD%20Fileserver/books/SICUREZZA/Addison.Wesley.Security.Metrics.Mar.2007.pdf
        prometheus:
          name: Prometheus
          tags: []
          url: https://prometheus.io/
        collected:
          name: collected
          tags: []
        httpunit:
          name: HttpUnit
          tags: []
          url: http://httpunit.sourceforge.net/
        junit:
          name: JUnit
          tags:
          - unittest
          - d3f:UnitTestExecutionTool
          url: https://junit.org/junit5/
        karma:
          name: Karma
          description: Karma is a test runner for JavaScript.
          tags:
          - d3f:UnitTestExecutionTool
          url: https://karma-runner.github.io
        owasp-defectdojo:
          name: OWASP DefectDojo
          tags:
          - vulnerability management system
          - owasp
          url: https://github.com/DefectDojo/django-DefectDojo
          description: DefectDojo is a security program and vulnerability management
            tool. DefectDojo allows you to manage your application security program,
            maintain product and application information, triage vulnerabilities and
            push findings into defect trackers. Consolidate your findings into one
            source of truth with DefectDojo.
        purify:
          name: Purify
          tags:
          - vulnerability management system
          url: https://github.com/faloker/purify/
          description: |
            The goal of Purify to be an easy-in-use and efficient tool to
            simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
        see-other-actions-e:
          name: See other actions, e.g. "Treatment of defects with severity high".
          tags: []
        sast:
          name: SAST
          tags:
          - d3f:StaticAnalysisTool
          description: 'At SAST (Static Application Security Testing): Server-side
            / client-side teams can easily be recorded. With microservice architecture
            individual microservices can be used usually Teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:StaticAnalysisTool/
        dast:
          name: DAST
          tags:
          - d3f:DynamicAnalysisTool
          description: 'At DAST (Dynamic Application Security Testing): vulnerabilities
            are classified and can be assigned to server-side and client-side teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:DynamicAnalysisTool/
        owasp-defect-dojo:
          name: OWASP Defect Dojo
          tags: []
          url: https://github.com/DefectDojo/django-DefectDojo
        owasp-dependency-che:
          name: OWASP Dependency Check
          tags: []
          url: https://owasp.org/www-project-dependency-check/
        logparser-jenkins-pl:
          name: LogParser Jenkins Plugins
          tags: []
        owasp-code-pulse:
          name: OWASP Code Pulse
          tags: []
          url: https://www.owasp.org/index.php/OWASP_Code_Pulse
        ajax-spider:
          name: Ajax Spider
          tags:
          - d3f:DynamicAnalysisTool
          url: https://www.zaproxy.org/docs/desktop/addons/ajax-spider/
        curl:
          name: cURL
          tags: []
          url: https://curl.se/
        openapi:
          name: OpenAPI Specifications
          tags: []
          url: https://spec.openapis.org/
        owasp-zap:
          name: OWASP Zap
          tags:
          - vulnerability
          - scanner
          - d3f:DynamicAnalysisTool
          url: https://github.com/zaproxy/zaproxy
          description: |
            The OWASP Zed Attack Proxy (ZAP) is one of the world's most popular free security tools
            and is actively maintained by a dedicated international team of ...
        arachni:
          name: Arachni
          description: Arachni is a feature-full, modular, high-performance Ruby framework
            aimed towards helping penetration testers and administrators evaluate
            the security of web applications.
          url: https://github.com/Arachni/arachni
        zest:
          name: Zest
          url: https://www.zaproxy.org/docs/desktop/addons/zest/
          tags:
          - zap
          description: Zest is an experimental specialized scripting language (also
            known as a domain-specific language) originally developed by the Mozilla
            security team and is intended to be used in web oriented security tools.
        owasp-securecodebox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: |
            secureCodeBox is a kubernetes based, modularized toolchain for continuous security scans of your software project. Its goal is to orchestrate and easily automate a bunch of security-testing tools out of the box.
        kube-hunter:
          name: kube-hunter
          description: kube-hunter is a tool that helps you to hunt for security weaknesses
            in Kubernetes clusters. It is a customizable, easy to use and powerful
            hunting framework that enables security researchers and developers to
            test the security of their Kubernetes clusters and workloads.
          tags:
          - d3f:DynamicAnalysisTool
          - d3f:ContainerOrchestrationSoftware
          url: https://github.com/aquasecurity/kube-hunter
        openvas:
          name: openVAS
          tags: []
          url: https://www.openvas.org/
        htc-hydra:
          name: HTC Hydra
          tags:
          - password
          url: https://www.htc-cs.com/en/products/htc-hydra/
        netassert:
          name: netassert
          tags: []
          url: https://github.com/controlplaneio/netassert
        nmap:
          name: nmap
          tags: []
          url: https://nmap.org/
        owasp-amass:
          name: OWASP Amass
          tags: []
          url: https://github.com/OWASP/Amass
        k8spurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          - d3f:ContainerOrchestrationSoftware
          - d3f:DynamicAnalysisTool
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        pmd:
          name: PMD
          tags: []
        eslint:
          name: eslint
          tags:
          - d3f:StaticAnalysisTool
          url: https://eslint.org/
        findsecuritybugs:
          name: FindSecurityBugs
          tags: []
        jsprime:
          name: jsprime
          description: jsprime is a static analysis tool for JavaScript that detects
            security vulnerabilities in web applications. It is based on the JavaScript
            parser Esprima and the static analysis framework TSLint.
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/dpnishant/jsprime
        bdd-mobile-security:
          name: '[bdd-mobile-security'
          tags: []
          url: https://github.com/ing-bank/bdd-mobile-security-automation-framework
          description: '[bdd-mobile-security-automation-framework](https://github.com/ing-bank/bdd-mobile-security-automation-framework)'
        retire-js:
          name: retire.js
          tags: []
          url: https://github.com/RetireJS/retire.js/
        npm-audit:
          name: npm audit
          tags:
          - d3f:StaticAnalysisTool
          url: https://docs.npmjs.com/cli/audit
        sigmahq:
          name: SigmaHQ
          tags: []
          url: https://github.com/SigmaHQ/sigma
        dive-to-inspect-a-co:
          name: Dive to inspect a container images
          tags: []
          url: https://github.com/wagoodman/dive
        clusterscanner:
          url: https://github.com/SDA-SE/clusterscanner
          name: ClusterScanner
          tags:
          - docker
          - image
          - container
          - vulnerability
          - misconfiguration
          - securiity-tools
          - scanning
          description: Discover vulnerabilities and container image misconfiguration
            in production environments.
        dockerfile-with-hado:
          name: Dockerfile with hadolint
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/hadolint/hadolint
        deployment-with-kube:
          name: Deployment with kube-score
          tags: []
          url: https://github.com/zegl/kube-score
        kubesec:
          name: kubesec
          tags: []
          url: https://kubesec.io
        anchore-io:
          name: Anchore.io
          description: Anchore is a container image analysis and policy engine that
            enables you to understand the contents of your container images and ensure
            that they are secure and compliant.
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://anchore.com/
        clair:
          name: Clair
          description: Clair is an open source project for the static analysis of
            vulnerabilities in application containers (currently including appc and
            docker).
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/quay/clair
        openscap:
          name: OpenSCAP
          tags: []
          url: https://www.open-scap.org/
        vuls:
          name: Vuls
          tags: []
          url: https://github.com/future-architect/vuls
        kube-bench:
          name: kube-bench
          tags: []
          url: https://github.com/aquasecurity/kube-bench
        trufflehog:
          name: truffleHog
          description: Searches through git repositories for high entropy strings,
            digging deep into commit history.
          tags: []
          url: https://github.com/dxa4481/truffleHog
        go-pillage-registrie:
          name: go-pillage-registries
          tags: []
          url: https://github.com/nccgroup/go-pillage-registries
        trivy:
          name: https://github.com/aquasecurity/trivy
          description: A Simple and Comprehensive Vulnerability Scanner for Containers,
            Suitable for CI
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/aquasecurity/trivy
        registries-like-quay:
          name: Registries like quay
          tags: []
          description: Registries like quay, dockerhub provide (commercial) offerings,
            often not suitable for distroless images
        dockerfilelint:
          name: dockerfilelint
          tags:
          - sast
          - docker
          - dockerfile
          - d3f:StaticAnalysisTool
          - d3f:ContainerBuildTool
          url: https://github.com/replicatedhq/dockerfilelint
          description: dockerfilelint is an node module that analyzes a Dockerfile
            and looks for common traps, mistakes and helps enforce best practices.
        threat-matrix-for-storage:
          name: Threat Matrix for Storage
          url: https://www.microsoft.com/security/blog/2021/04/08/threat-matrix-for-storage/
          tags:
          - documentation
          - storage
          - cluster
          - kubernetes
        defend-the-core-kubernetes:
          name: Defend the core kubernetes security at every layer
          url: https://thenewstack.io/defend-the-core-kubernetes-security-at-every-layer/
          tags:
          - documentation
          - cluster
          - kubernetes
        business-friendly-vulnerability-metrics:
          name: Business friendly vulnerability management metrics
          url: https://medium.com/uber-security-privacy/business-friendly-vulnerability-management-metrics-cfd702fd7705
          tags:
          - documentation
          - vulnerability
          - vulnerability management system
        kubescape:
          name: kubescape
          description: kubescape is a tool that helps you scan your Kubernetes clusters
            to identify security misconfigurations as defined in Kubernetes Hardening
            Guidance by to NSA and CISA_
          url: https://github.com/armosec/kubescape
          tags:
          - kubernetes
          - vulnerability
          - misconfiguration
        azuredevops:
          name: Improve code quality with branch policies
          url: https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops
          tags:
          - source-code-protection
          - scm
        github-policies:
          name: About protected branches
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
          tags:
          - source-code-protection
          - scm
        sonarqube:
          name: In-Depth Linting of Your TypeScript While Coding
          url: https://blog.sonarsource.com/in-depth-linting-of-your-typescript-while-coding
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        stylecop:
          name: How to enforce a consistent coding style in your projects
          url: https://www.meziantou.net/how-to-enforce-a-consistent-coding-style-in-your-projects.htm
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        fortify-vscode-extension:
          name: Fortify Extension for Visual Studio Code
          url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
          tags:
          - ide
          - sast
        appscan-vscode-extension:
          name: HCL AppScan CodeSweep
          url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
          tags:
          - ide
          - sast
        checkmarx-vscode-extension:
          name: Setting Up the Visual Studio Code Extension Plugin
          url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
          tags:
          - ide
          - sast
        pre-commit-microsoft:
          name: DevSecOps control Pre-commit
          url: https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls#plan-and-develop
          tags:
          - pre-commit
        pre-commit-synopsis:
          name: Building your DevSecOps pipeline 5 essential activities
          url: https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/
          tags:
          - pre-commit
        pre-commit-python:
          name: Pre-commit hooks in Python
          url: https://github.com/pre-commit/pre-commit
          tags:
          - pre-commit
          - d3f:StaticAnalysisTool
        dependencyTrack:
          name: Dependency-Track is an intelligent Component Analysis platform that
            allows organizations to identify and reduce risk in the software supply
            chain. Dependency-Track takes a unique and highly beneficial approach
            by leveraging the capabilities of Software Bill of Materials (SBOM).
          url: https://github.com/DependencyTrack/dependency-track
          tags:
          - sca
          - inventory
        juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: In case you do not have the budget to hire an external security
            expert, an option is to use the OWASP JuiceShop on a "hacking Friday"
        dvwa:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        loggingCheatSheet:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        secureCodeBox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: secureCodeBox is a kubernetes based, modularized toolchain
            for continuous security scans of your software project. Its goal is to
            orchestrate and easily automate a bunch of security-testing tools out
            of the box.
        K8sPurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        hashicorp-vault:
          name: Hashicorp Vault
          tags:
          - authentication
          - authorization
          - secrets
          - infrastructure
          url: https://github.com/hashicorp/vault
          description: |
            A tool for secrets management, encryption as a service, and privileged access management.
        stoplight-spectral:
          name: Spectral
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/stoplightio/spectral
          description: |
            Spectral is a flexible JSON/YAML linter built with extensibility in mind.
            It uses JSON/YAML path rules to describe the problems you want to find.
        api-oas-checker:
          name: API OAS Checker
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/italia/api-oas-checker
          description: |
            A tool to check OpenAPI specifications using a comprehensive ruleset based
            on API best practices.
        coveragepy:
          name: Coverage.py
          tags:
          - testing
          - coverage
          - d3f:DynamicAnalysisTool
          url: https://github.com/nedbat/coveragepy
          description: |
            Code coverage measurement for Python
        github-dependabot:
          name: Dependabot
          tags:
          - dependency
          - dependency-management
          - scm
          url: https://github.com/dependabot/dependabot-core
          description: |
            Dependabot creates pull requests to keep your dependencies secure and up-to-date.
        github-super-linter:
          name: Super-Linter
          tags:
          - linting
          - scm
          - d3f:StaticAnalysisTool
          url: https://github.com/github/super-linter
          description: |
            Lint code bases to catch common errors and enforce code style
        schemathesis:
          name: Schemathesis
          tags:
          - testing
          - api
          - documentation
          url: https://github.com/schemathesis/schemathesis
          description: |
            Schemathesis is a tool for testing web applications and services by sending requests based on the Open API / Swagger schema.
        martin-feature-toggles:
          name: Feature Toggles
          tags:
          - development
          - architecture
          url: https://martinfowler.com/articles/feature-toggles.html
          description: |
            Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. (Pete Hodgson)
        tw-talisman:
          name: Talisman
          tags:
          - scm
          - secrets
          - d3f:StaticAnalysisTool
          url: https://github.com/thoughtworks/talisman
          description: |
            Talisman is a git hook that scans your commits for secrets before you push them to a remote repository.
        spotbugs:
          name: SpotBugs
          tags:
          - static-analysis
          - java
          - d3f:StaticAnalysisTool
          url: https://github.com/spotbugs/spotbugs
          description: |
            SpotBugs is a program which uses static analysis to look for bugs in Java code.
      isImplemented: false
      evidence: ""
      comments: ""
    Simple Scan:
      risk: Deficient security tests are performed. Simple vulnerabilities are not
        detected and missing security configurations (e.g. headers) are not set. Fast
        feedback is not given.
      measure: A simple scan is performed to get a security baseline. In case the
        test is done in under 10 minutes, it should be part of the build and deployment
        process.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 1
      usefulness: 2
      level: 1
      dependsOn:
      - Defined build process
      implementation:
      - name: OWASP Zap
        tags:
        - vulnerability
        - scanner
        - d3f:DynamicAnalysisTool
        url: https://github.com/zaproxy/zaproxy
        description: |
          The OWASP Zed Attack Proxy (ZAP) is one of the world's most popular free security tools
          and is actively maintained by a dedicated international team of ...
      - name: Arachni
        description: Arachni is a feature-full, modular, high-performance Ruby framework
          aimed towards helping penetration testers and administrators evaluate the
          security of web applications.
        url: https://github.com/Arachni/arachni
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of different roles:
      risk: Parts of the service are not covered during the scan, because a login
        is not performed.
      measure: Integration of authentication with all roles used in the service.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 1
      usefulness: 2
      level: 2
      dependsOn:
      - Simple Scan
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.3
        - 14.2.8
      implementation:
      - name: Zest
        url: https://www.zaproxy.org/docs/desktop/addons/zest/
        tags:
        - zap
        description: Zest is an experimental specialized scripting language (also
          known as a domain-specific language) originally developed by the Mozilla
          security team and is intended to be used in web oriented security tools.
      isImplemented: false
      assessment: For REST APIs, multiple OAuth2 scopes are used.
      evidence: ""
      comments: ""
    Usage of multiple scanners:
      risk: Each vulnerability scanner has different opportunities. By using just
        one scanner, some vulnerabilities might not be found.
      measure: Usage of multiple spiders and scanner enhance the coverage and the
        vulnerabilities.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 5
      usefulness: 1
      level: 3
      dependsOn:
      - Usage of different roles
      implementation:
      - name: OWASP secureCodeBox
        tags:
        - vulnerability
        - scanner-orchestration
        url: https://github.com/secureCodeBox/secureCodeBox
        description: |
          secureCodeBox is a kubernetes based, modularized toolchain for continuous security scans of your software project. Its goal is to orchestrate and easily automate a bunch of security-testing tools out of the box.
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
  Dynamic depth for infrastructure:
    Load tests:
      risk: As it is unknown how many requests the systems and applications can serve,
        due to an unexpected load the availability is disturbed.
      measure: Load test against the production system or a production near system
        is performed.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 5
      usefulness: 3
      level: 4
      implementation: []
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 12.1.3
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Test for exposed services:
      risk: Standard network segmentation and firewalling has not been performed,
        leading to world open cluster management ports.
      measure: With the help of tools the network configuration of unintentional exposed
        cluster(s) are tested. To identify clusters, all subdomains might need to
        be identified with a tool like OWASP Amass to perform portscans based o the
        result.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 3
      level: 1
      implementation:
      - name: nmap
        tags: []
        url: https://nmap.org/
      - name: OWASP Amass
        tags: []
        url: https://github.com/OWASP/Amass
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 13.1.3
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Test for unused Resources:
      risk: Unused resources, specially secrets, might be still valid, but are exposing
        information. As an attacker, I compromise a system, gather credentials and
        try to use them.
      measure: Test for unused resources helps to identify unused resources.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 2
      level: 4
      implementation:
      - name: K8sPurger
        tags:
        - vulnerability
        - scanner
        - dast
        - infrastructure
        - d3f:ContainerOrchestrationSoftware
        - d3f:DynamicAnalysisTool
        url: https://github.com/yogeshkk/K8sPurger
        description: |
          Hunt Unused Resources In Kubernetes.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 13.1.3
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Test network segmentation:
      risk: Wrong or no network segmentation of pods makes it easier for an attacker
        to access a database and extract or modify data.
      measure: Cluster internal test needs to be performed. Integration of fine granulated
        network segmentation (also between pods in the same namespace).
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 2
      implementation:
      - name: netassert
        tags: []
        url: https://github.com/controlplaneio/netassert
      dependsOn:
      - Segmented networks for virtual environments
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 13.1.3
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Test of the configuration of cloud environments:
      risk: Standard hardening practices for cloud environments are not performed
        leading to vulnerabilities.
      measure: With the help of tools the configuration of virtual environments are
        tested.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - name: kubescape
        description: kubescape is a tool that helps you scan your Kubernetes clusters
          to identify security misconfigurations as defined in Kubernetes Hardening
          Guidance by to NSA and CISA_
        url: https://github.com/armosec/kubescape
        tags:
        - kubernetes
        - vulnerability
        - misconfiguration
      - name: kube-hunter
        description: kube-hunter is a tool that helps you to hunt for security weaknesses
          in Kubernetes clusters. It is a customizable, easy to use and powerful hunting
          framework that enables security researchers and developers to test the security
          of their Kubernetes clusters and workloads.
        tags:
        - d3f:DynamicAnalysisTool
        - d3f:ContainerOrchestrationSoftware
        url: https://github.com/aquasecurity/kube-hunter
      - name: openVAS
        tags: []
        url: https://www.openvas.org/
      references:
        samm2: []
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Weak password test:
      risk: Weak passwords in components like applications or systems, specially for
        privileged accounts, lead to take over of that account.
      measure: Automatic brute force attacks are performed. Specially the usage of
        standard accounts like 'admin' and employee user-ids is recommended.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 1
      level: 3
      implementation:
      - name: HTC Hydra
        tags:
        - password
        url: https://www.htc-cs.com/en/products/htc-hydra/
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 9.4.3
      isImplemented: false
      evidence: ""
      comments: ""
  Static depth for applications:
    API design validation:
      risk: Creation of insecure or non-compliant API.
      measure: |
        Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP
        and validate the specification using specific tools.
        Checks should be integrated in IDEs and CI/CD pipelines.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - name: Spectral
        tags:
        - linting
        - api
        - d3f:StaticAnalysisTool
        url: https://github.com/stoplightio/spectral
        description: |
          Spectral is a flexible JSON/YAML linter built with extensibility in mind.
          It uses JSON/YAML path rules to describe the problems you want to find.
      - name: API OAS Checker
        tags:
        - linting
        - api
        - d3f:StaticAnalysisTool
        url: https://github.com/italia/api-oas-checker
        description: |
          A tool to check OpenAPI specifications using a comprehensive ruleset based
          on API best practices.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 8.25
        - 8.27
        - 8.28
        d3f:
        - AccessModeling
        - DataExchangeMapping
      isImplemented: false
      evidence: ""
      comments: ""
    Dead code elimination:
      risk: Dead code increases the attack surface (use of hard coded credentials
        and variables, sensitive information)
      measure: Collection of unused code and then manual removal of unused code.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 4
      implementation:
      - name: PMD
        tags: []
      dependsOn:
      - Defined build process
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Exclusion of source code duplicates:
      risk: Duplicates in source code might influence the stability of the application.
      measure: Automatic Detection and manual removal of duplicates in source code.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 4
      implementation:
      - name: PMD
        tags: []
      dependsOn:
      - Defined build process
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Local development security checks performed:
      risk: Creating and developing code contains code smells and quality issues.
      measure: |
        Integration of quality and linting plugins with interactive development environment (IDEs).
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - name: Fortify Extension for Visual Studio Code
        url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
        tags:
        - ide
        - sast
      - name: Setting Up the Visual Studio Code Extension Plugin
        url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
        tags:
        - ide
        - sast
      - name: HCL AppScan CodeSweep
        url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
        tags:
        - ide
        - sast
      - signing-of-commits-protection:
          name: Enforcement of commit signing
          tags:
          - signing
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
          description: Usage of branch protection rules
        signing-of-commits:
          name: Signing of commits
          tags:
          - signing
          url: https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work
          description: Signing of commits in git
        ci-cd-tools:
          name: CI/CD tools
          tags:
          - ci-cd
          url: https://martinfowler.com/articles/continuousIntegration.html
          description: CI/CD tools such as jenkins, gitlab-ci or github-actions
        apimaturity:
          name: API Security Maturity Model for Authorization
          tags:
          - api
          url: https://curity.io/resources/learn/the-api-security-maturity-model/
        container-orchestration:
          name: Container technologies and orchestration like Docker, Kubernetes
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:ContainerOrchestrationSoftware/
        cwe25:
          name: CWE Top 25 Most Dangerous Software Weaknesses
          tags:
          - documentation
          - threat
          url: https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html
        docker-content-trust:
          name: Docker Content Trust
          tags: []
          url: https://docs.docker.com/notary/getting_started/
        in-toto:
          name: in-toto
          tags: []
          url: https://in-toto.github.io/
        a-complete-backup-of:
          name: A complete backup of persisted data might be performed.
          tags: []
        a-point-in-time-reco:
          name: A Point in Time Recovery for databases should be implemented.
          tags: []
        blue-green-deploymen:
          name: Blue/Green Deployments
          tags: []
          url: https://martinfowler.com/bliki/BlueGreenDeployment.html
        docker:
          name: Docker
          url: https://github.com/moby/moby
          tags: []
        webserver:
          name: Webserver
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebServer/
        rolling-update:
          name: rolling update
          tags: []
        kubernetes-admission:
          name: Kubernetes Admission Controller can whitelist registries and/or whitelist
            a signing key.
          tags:
          - d3f:ContainerOrchestrationSoftware
        dependabot:
          name: dependabot
          tags: []
          url: https://dependabot.com/
        jenkins:
          name: Jenkins
          tags: []
          url: https://www.jenkins.io/
        sample-concept-1:
          name: Daily rebuild of container images
          tags: []
          description: |
            Sample concept:
            1. each container has a set lifetime and is killed/replaced with a new container
            multiple times a day where you have
            some form of a graceful replacement to ensure no (short) service outage will
            occur to the end users.
            2. twice a day a rebuild of images is done. The rebuilds are put into a automated testing pipeline.
            If the testing has no blocking issues the new images will be released for deployment during the
            next "restart" of a container. What has to be done, is to ensure the new
            containers are deployed in some canary deployment manner, this will ensure
            that if (and only if) something buggy has been introduced which breaks functionality
            the canary deployment will make sure the "older version" is being used and
                            not the buggy newer one.
        distroless:
          name: Distroless Container Images
          tags:
          - d3f:ContainerImage
          url: https://github.com/GoogleContainerTools/distroless
        fedora-coreos:
          name: Fedora CoreOS
          tags: []
          url: https://getfedora.org/coreos
        threat-modeling-play:
          name: Threat Modeling Playbook
          tags:
          - owasp
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/Toreon/threat-model-playbook
        owasp-samm:
          name: OWASP SAMM
          tags:
          - threat-modeling
          - owasp
          - defender
          url: https://owaspsamm.org/model/design/threat-assessment/stream-b/
        whiteboard:
          name: Whiteboard
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://en.wikipedia.org/wiki/Whiteboard
        miro-or-any-other-c:
          name: Miro (or any other collaborative board)
          tags:
          - defender
          - threat-modeling
          - collaboration
          - whiteboard
          url: https://miro.com/
        draw-io:
          name: Draw.io
          tags:
          - defender
          - threat-modeling
          - whiteboard
          url: https://github.com/jgraph/drawio-desktop
        threagile:
          name: Threagile
          tags:
          - threat-modeling
          url: https://github.com/Threagile/threagile
        don-t-forget-evil-u:
          name: Don't Forget EVIL User stories
          tags: []
          url: https://www.owasp.org/index.php/Agile_Software_Development
          description: '[Do not Forget EVIL User Stories](https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories)
            and [Practical Security Stories and Security Tasks for Agile Development
            Environments](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
        owasp-juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: |-
            In case you do not have the budget to hire an external security expert,
            an option is to use the OWASP JuiceShop on a "hacking Friday"
        owasp-cheatsheet-ser:
          name: OWASP Cheatsheet Series
          tags:
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        https-cheatsheetse:
          name: https://cheatsheetseries.owasp.org/
          tags:
          - training
          - secure coding
          url: https://cheatsheetseries.owasp.org/
        owasp-security-champ:
          name: OWASP Security Champions Playbook
          tags:
          - security champions
          url: https://github.com/c0rdis/security-champions-playbook
        build-it-break-it-fi:
          name: Build it Break it Fix it Contest
          tags: []
          url: https://builditbreakit.org/
        motivate-people:
          name: Motivate people
          tags:
          - security champions
          - gamification
          - nudging
          url: https://github.com/wurstbrot/security-pins
          description: |-
            Enhance motivation can be performed with the distribution of pins
            as a reward, see [OWASP Security Pins Project](https://github.com/wurstbrot/security-pins)
        owasp-top-10-maturit:
          name: OWASP Top 10 Maturity Categories for Security Champions
          tags:
          - security champions
          url: https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
        involve-security-sme:
          name: Involve Security SME
          tags: []
          description: Security SME are involved in discussion for requirements analysis,
            software design and sprint planning to provide guidance and suggestions.
        damn-vulnerable-web:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        example-all-docker:
          name: 'Example: All docker images used by teams need to be based on standard
            images.'
          tags: []
        owasp-asvs:
          name: OWASP ASVS
          tags: []
          url: https://owasp.org/www-project-application-security-verification-standard/
        owasp-masvs:
          name: OWASP MASVS
          tags: []
          url: https://github.com/OWASP/owasp-masvs
        cis-kubernetes-bench:
          name: CIS Kubernetes Bench for Security
          tags:
          - d3f:ContainerOrchestrationSoftware
          url: https://www.cisecurity.org/cis-benchmarks/
        cis-docker-bench-for:
          name: CIS Docker Bench for Security
          tags:
          - d3f:ContainerRuntime
          url: https://www.cisecurity.org/cis-benchmarks/
        container-execution-isolation:
          name: Isolate containers execution
          tags:
          - d3f:ContainerOrchestrationSoftware
          - d3f:ContainerImage
          description: 'For example for Containers: Deny running containers as root,
            deny using advanced privileges, deny mounting of the hole filesystem,
            ...'
          url: https://d3fend.mitre.org/technique/d3f:ExecutionIsolation/
        attack-matrix-cloud:
          name: Attack Matrix Cloud
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for cloud
        attack-matrix-contai:
          name: Attack Matrix Containers
          tags:
          - mitre
          url: https://attack.mitre.org/matrices/enterprise/cloud/
          description: Attack matrix for containers
        attack-matrix-kubern:
          name: Attack Matrix Kubernetes
          tags:
          - mitre
          - d3f:ContainerOrchestrationSoftware
          url: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/
          description: Attack matrix for kubernetes
        istio:
          name: istio
          tags: []
          description: Istio is an open platform to connect, manage, and secure microservices.
          url: https://istio.io/
        bridges:
          name: bridges
          tags: []
        firewalls:
          name: firewalls
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Firewall/
        open-policy-agent:
          name: Open Policy Agent
          description: |-
            Open Policy Agent is an open source,
            general-purpose policy engine that unifies policy enforcement across the stack.
          tags: []
          url: https://www.openpolicyagent.org/
        gitops:
          name: GitOps
          description: |-
            GitOps is a way to do Kubernetes application delivery.
            It works by using Git as a single source of truth for Kubernetes resources
            and everything else.
          tags: []
          url: https://www.redhat.com/en/topics/devops/what-is-gitops
        ansible:
          name: Ansible
          description: |-
            Ansible is an open-source software provisioning, configuration management,
            and application-deployment tool enabling infrastructure as code.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/ansible/ansible
        chef:
          name: Chef
          description: |-
            Chef is an open-source software automation platform that
            helps system administrators manage infrastructure and applications.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/chef/chef
        puppet:
          description: Puppet is an open-source software configuration management
            tool.
          name: Puppet
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/puppetlabs/puppet
        argocd:
          name: ArgoCD
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          tags:
          - d3f:SoftwareDeploymentTool
          url: https://github.com/argoproj/argo-cd
        jenkinsfile:
          name: Jenkinsfile
          tags: []
          url: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
        seccomp:
          name: seccomp
          tags: []
          url: https://man7.org/linux/man-pages/man2/seccomp.2.html
        strace:
          name: strace
          tags: []
          url: https://man7.org/linux/man-pages/man1/strace.1.html
        remove-direct-access:
          name: Remove direct access to infrastructure
          tags: []
        directory-service:
          name: Directory Service
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:DirectoryService/
        plugins:
          name: Plugins
          tags: []
        smartcard:
          name: Smartcard
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        yubikey:
          name: YubiKey
          tags:
          - d3f:Multi-factorAuthentication
          url: https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication/
        sms:
          name: SMS
          tags:
          - d3f:Multi-factorAuthentication
        totp:
          name: TOTP
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:One-timePassword/
        http-basic-authentic:
          name: HTTP-Basic Authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:WebAuthentication/
        vpn:
          name: VPN
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:VPN/
        for-applications-ch:
          name: 'For applications: Check default encoding'
          tags: []
        managing-secrets:
          name: managing secrets
          tags: []
          url: https://d3fend.mitre.org/technique/d3f:CredentialHardening/
        crypto:
          name: crypto
          tags: []
        authentication:
          name: authentication
          tags: []
          url: https://d3fend.mitre.org/dao/artifact/d3f:Authentication/
        rsyslog:
          name: rsyslog
          url: https://www.rsyslog.com/
          tags:
          - tool
          - logging
        logstash:
          name: logstash
          url: https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html
          tags:
          - tool
          - logging
        fluentd:
          name: fluentd
          tags:
          - tool
          url: https://www.fluentd.org/
        bash:
          name: bash
          tags:
          - tool
          url: https://www.gnu.org/software/bash/
        owasp-logging-cheats:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        elk-stack:
          name: ELK-Stack
          tags: []
          url: https://www.elastic.co/elk-stack
        https-ht-transpare:
          name: https://ht.transpare
          tags: []
          url: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD
          description: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD%20Fileserver/books/SICUREZZA/Addison.Wesley.Security.Metrics.Mar.2007.pdf
        prometheus:
          name: Prometheus
          tags: []
          url: https://prometheus.io/
        collected:
          name: collected
          tags: []
        httpunit:
          name: HttpUnit
          tags: []
          url: http://httpunit.sourceforge.net/
        junit:
          name: JUnit
          tags:
          - unittest
          - d3f:UnitTestExecutionTool
          url: https://junit.org/junit5/
        karma:
          name: Karma
          description: Karma is a test runner for JavaScript.
          tags:
          - d3f:UnitTestExecutionTool
          url: https://karma-runner.github.io
        owasp-defectdojo:
          name: OWASP DefectDojo
          tags:
          - vulnerability management system
          - owasp
          url: https://github.com/DefectDojo/django-DefectDojo
          description: DefectDojo is a security program and vulnerability management
            tool. DefectDojo allows you to manage your application security program,
            maintain product and application information, triage vulnerabilities and
            push findings into defect trackers. Consolidate your findings into one
            source of truth with DefectDojo.
        purify:
          name: Purify
          tags:
          - vulnerability management system
          url: https://github.com/faloker/purify/
          description: |
            The goal of Purify to be an easy-in-use and efficient tool to
            simplify a workflow of managing vulnerabilities delivered from various (even custom) tools.
        see-other-actions-e:
          name: See other actions, e.g. "Treatment of defects with severity high".
          tags: []
        sast:
          name: SAST
          tags:
          - d3f:StaticAnalysisTool
          description: 'At SAST (Static Application Security Testing): Server-side
            / client-side teams can easily be recorded. With microservice architecture
            individual microservices can be used usually Teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:StaticAnalysisTool/
        dast:
          name: DAST
          tags:
          - d3f:DynamicAnalysisTool
          description: 'At DAST (Dynamic Application Security Testing): vulnerabilities
            are classified and can be assigned to server-side and client-side teams.'
          url: https://d3fend.mitre.org/dao/artifact/d3f:DynamicAnalysisTool/
        owasp-defect-dojo:
          name: OWASP Defect Dojo
          tags: []
          url: https://github.com/DefectDojo/django-DefectDojo
        owasp-dependency-che:
          name: OWASP Dependency Check
          tags: []
          url: https://owasp.org/www-project-dependency-check/
        logparser-jenkins-pl:
          name: LogParser Jenkins Plugins
          tags: []
        owasp-code-pulse:
          name: OWASP Code Pulse
          tags: []
          url: https://www.owasp.org/index.php/OWASP_Code_Pulse
        ajax-spider:
          name: Ajax Spider
          tags:
          - d3f:DynamicAnalysisTool
          url: https://www.zaproxy.org/docs/desktop/addons/ajax-spider/
        curl:
          name: cURL
          tags: []
          url: https://curl.se/
        openapi:
          name: OpenAPI Specifications
          tags: []
          url: https://spec.openapis.org/
        owasp-zap:
          name: OWASP Zap
          tags:
          - vulnerability
          - scanner
          - d3f:DynamicAnalysisTool
          url: https://github.com/zaproxy/zaproxy
          description: |
            The OWASP Zed Attack Proxy (ZAP) is one of the world's most popular free security tools
            and is actively maintained by a dedicated international team of ...
        arachni:
          name: Arachni
          description: Arachni is a feature-full, modular, high-performance Ruby framework
            aimed towards helping penetration testers and administrators evaluate
            the security of web applications.
          url: https://github.com/Arachni/arachni
        zest:
          name: Zest
          url: https://www.zaproxy.org/docs/desktop/addons/zest/
          tags:
          - zap
          description: Zest is an experimental specialized scripting language (also
            known as a domain-specific language) originally developed by the Mozilla
            security team and is intended to be used in web oriented security tools.
        owasp-securecodebox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: |
            secureCodeBox is a kubernetes based, modularized toolchain for continuous security scans of your software project. Its goal is to orchestrate and easily automate a bunch of security-testing tools out of the box.
        kube-hunter:
          name: kube-hunter
          description: kube-hunter is a tool that helps you to hunt for security weaknesses
            in Kubernetes clusters. It is a customizable, easy to use and powerful
            hunting framework that enables security researchers and developers to
            test the security of their Kubernetes clusters and workloads.
          tags:
          - d3f:DynamicAnalysisTool
          - d3f:ContainerOrchestrationSoftware
          url: https://github.com/aquasecurity/kube-hunter
        openvas:
          name: openVAS
          tags: []
          url: https://www.openvas.org/
        htc-hydra:
          name: HTC Hydra
          tags:
          - password
          url: https://www.htc-cs.com/en/products/htc-hydra/
        netassert:
          name: netassert
          tags: []
          url: https://github.com/controlplaneio/netassert
        nmap:
          name: nmap
          tags: []
          url: https://nmap.org/
        owasp-amass:
          name: OWASP Amass
          tags: []
          url: https://github.com/OWASP/Amass
        k8spurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          - d3f:ContainerOrchestrationSoftware
          - d3f:DynamicAnalysisTool
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        pmd:
          name: PMD
          tags: []
        eslint:
          name: eslint
          tags:
          - d3f:StaticAnalysisTool
          url: https://eslint.org/
        findsecuritybugs:
          name: FindSecurityBugs
          tags: []
        jsprime:
          name: jsprime
          description: jsprime is a static analysis tool for JavaScript that detects
            security vulnerabilities in web applications. It is based on the JavaScript
            parser Esprima and the static analysis framework TSLint.
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/dpnishant/jsprime
        bdd-mobile-security:
          name: '[bdd-mobile-security'
          tags: []
          url: https://github.com/ing-bank/bdd-mobile-security-automation-framework
          description: '[bdd-mobile-security-automation-framework](https://github.com/ing-bank/bdd-mobile-security-automation-framework)'
        retire-js:
          name: retire.js
          tags: []
          url: https://github.com/RetireJS/retire.js/
        npm-audit:
          name: npm audit
          tags:
          - d3f:StaticAnalysisTool
          url: https://docs.npmjs.com/cli/audit
        sigmahq:
          name: SigmaHQ
          tags: []
          url: https://github.com/SigmaHQ/sigma
        dive-to-inspect-a-co:
          name: Dive to inspect a container images
          tags: []
          url: https://github.com/wagoodman/dive
        clusterscanner:
          url: https://github.com/SDA-SE/clusterscanner
          name: ClusterScanner
          tags:
          - docker
          - image
          - container
          - vulnerability
          - misconfiguration
          - securiity-tools
          - scanning
          description: Discover vulnerabilities and container image misconfiguration
            in production environments.
        dockerfile-with-hado:
          name: Dockerfile with hadolint
          tags:
          - d3f:StaticAnalysisTool
          url: https://github.com/hadolint/hadolint
        deployment-with-kube:
          name: Deployment with kube-score
          tags: []
          url: https://github.com/zegl/kube-score
        kubesec:
          name: kubesec
          tags: []
          url: https://kubesec.io
        anchore-io:
          name: Anchore.io
          description: Anchore is a container image analysis and policy engine that
            enables you to understand the contents of your container images and ensure
            that they are secure and compliant.
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://anchore.com/
        clair:
          name: Clair
          description: Clair is an open source project for the static analysis of
            vulnerabilities in application containers (currently including appc and
            docker).
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/quay/clair
        openscap:
          name: OpenSCAP
          tags: []
          url: https://www.open-scap.org/
        vuls:
          name: Vuls
          tags: []
          url: https://github.com/future-architect/vuls
        kube-bench:
          name: kube-bench
          tags: []
          url: https://github.com/aquasecurity/kube-bench
        trufflehog:
          name: truffleHog
          description: Searches through git repositories for high entropy strings,
            digging deep into commit history.
          tags: []
          url: https://github.com/dxa4481/truffleHog
        go-pillage-registrie:
          name: go-pillage-registries
          tags: []
          url: https://github.com/nccgroup/go-pillage-registries
        trivy:
          name: https://github.com/aquasecurity/trivy
          description: A Simple and Comprehensive Vulnerability Scanner for Containers,
            Suitable for CI
          tags:
          - d3f:StaticAnalysisTool
          - d3f:ContainerImage
          url: https://github.com/aquasecurity/trivy
        registries-like-quay:
          name: Registries like quay
          tags: []
          description: Registries like quay, dockerhub provide (commercial) offerings,
            often not suitable for distroless images
        dockerfilelint:
          name: dockerfilelint
          tags:
          - sast
          - docker
          - dockerfile
          - d3f:StaticAnalysisTool
          - d3f:ContainerBuildTool
          url: https://github.com/replicatedhq/dockerfilelint
          description: dockerfilelint is an node module that analyzes a Dockerfile
            and looks for common traps, mistakes and helps enforce best practices.
        threat-matrix-for-storage:
          name: Threat Matrix for Storage
          url: https://www.microsoft.com/security/blog/2021/04/08/threat-matrix-for-storage/
          tags:
          - documentation
          - storage
          - cluster
          - kubernetes
        defend-the-core-kubernetes:
          name: Defend the core kubernetes security at every layer
          url: https://thenewstack.io/defend-the-core-kubernetes-security-at-every-layer/
          tags:
          - documentation
          - cluster
          - kubernetes
        business-friendly-vulnerability-metrics:
          name: Business friendly vulnerability management metrics
          url: https://medium.com/uber-security-privacy/business-friendly-vulnerability-management-metrics-cfd702fd7705
          tags:
          - documentation
          - vulnerability
          - vulnerability management system
        kubescape:
          name: kubescape
          description: kubescape is a tool that helps you scan your Kubernetes clusters
            to identify security misconfigurations as defined in Kubernetes Hardening
            Guidance by to NSA and CISA_
          url: https://github.com/armosec/kubescape
          tags:
          - kubernetes
          - vulnerability
          - misconfiguration
        azuredevops:
          name: Improve code quality with branch policies
          url: https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops
          tags:
          - source-code-protection
          - scm
        github-policies:
          name: About protected branches
          url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
          tags:
          - source-code-protection
          - scm
        sonarqube:
          name: In-Depth Linting of Your TypeScript While Coding
          url: https://blog.sonarsource.com/in-depth-linting-of-your-typescript-while-coding
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        stylecop:
          name: How to enforce a consistent coding style in your projects
          url: https://www.meziantou.net/how-to-enforce-a-consistent-coding-style-in-your-projects.htm
          tags:
          - ide
          - linting
          - d3f:StaticAnalysisTool
        fortify-vscode-extension:
          name: Fortify Extension for Visual Studio Code
          url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
          tags:
          - ide
          - sast
        appscan-vscode-extension:
          name: HCL AppScan CodeSweep
          url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
          tags:
          - ide
          - sast
        checkmarx-vscode-extension:
          name: Setting Up the Visual Studio Code Extension Plugin
          url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
          tags:
          - ide
          - sast
        pre-commit-microsoft:
          name: DevSecOps control Pre-commit
          url: https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls#plan-and-develop
          tags:
          - pre-commit
        pre-commit-synopsis:
          name: Building your DevSecOps pipeline 5 essential activities
          url: https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/
          tags:
          - pre-commit
        pre-commit-python:
          name: Pre-commit hooks in Python
          url: https://github.com/pre-commit/pre-commit
          tags:
          - pre-commit
          - d3f:StaticAnalysisTool
        dependencyTrack:
          name: Dependency-Track is an intelligent Component Analysis platform that
            allows organizations to identify and reduce risk in the software supply
            chain. Dependency-Track takes a unique and highly beneficial approach
            by leveraging the capabilities of Software Bill of Materials (SBOM).
          url: https://github.com/DependencyTrack/dependency-track
          tags:
          - sca
          - inventory
        juiceshop:
          name: OWASP Juice Shop
          tags:
          - training
          url: https://github.com/bkimminich/juiceshop
          description: In case you do not have the budget to hire an external security
            expert, an option is to use the OWASP JuiceShop on a "hacking Friday"
        dvwa:
          name: Damn Vulnerable Web Application
          tags:
          - training
          description: Simple Application with intended vulnerabilities. HTML based.
        loggingCheatSheet:
          name: OWASP Logging CheatSheet
          url: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html
          tags:
          - logging
          - documentation
        secureCodeBox:
          name: OWASP secureCodeBox
          tags:
          - vulnerability
          - scanner-orchestration
          url: https://github.com/secureCodeBox/secureCodeBox
          description: secureCodeBox is a kubernetes based, modularized toolchain
            for continuous security scans of your software project. Its goal is to
            orchestrate and easily automate a bunch of security-testing tools out
            of the box.
        K8sPurger:
          name: K8sPurger
          tags:
          - vulnerability
          - scanner
          - dast
          - infrastructure
          url: https://github.com/yogeshkk/K8sPurger
          description: |
            Hunt Unused Resources In Kubernetes.
        hashicorp-vault:
          name: Hashicorp Vault
          tags:
          - authentication
          - authorization
          - secrets
          - infrastructure
          url: https://github.com/hashicorp/vault
          description: |
            A tool for secrets management, encryption as a service, and privileged access management.
        stoplight-spectral:
          name: Spectral
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/stoplightio/spectral
          description: |
            Spectral is a flexible JSON/YAML linter built with extensibility in mind.
            It uses JSON/YAML path rules to describe the problems you want to find.
        api-oas-checker:
          name: API OAS Checker
          tags:
          - linting
          - api
          - d3f:StaticAnalysisTool
          url: https://github.com/italia/api-oas-checker
          description: |
            A tool to check OpenAPI specifications using a comprehensive ruleset based
            on API best practices.
        coveragepy:
          name: Coverage.py
          tags:
          - testing
          - coverage
          - d3f:DynamicAnalysisTool
          url: https://github.com/nedbat/coveragepy
          description: |
            Code coverage measurement for Python
        github-dependabot:
          name: Dependabot
          tags:
          - dependency
          - dependency-management
          - scm
          url: https://github.com/dependabot/dependabot-core
          description: |
            Dependabot creates pull requests to keep your dependencies secure and up-to-date.
        github-super-linter:
          name: Super-Linter
          tags:
          - linting
          - scm
          - d3f:StaticAnalysisTool
          url: https://github.com/github/super-linter
          description: |
            Lint code bases to catch common errors and enforce code style
        schemathesis:
          name: Schemathesis
          tags:
          - testing
          - api
          - documentation
          url: https://github.com/schemathesis/schemathesis
          description: |
            Schemathesis is a tool for testing web applications and services by sending requests based on the Open API / Swagger schema.
        martin-feature-toggles:
          name: Feature Toggles
          tags:
          - development
          - architecture
          url: https://martinfowler.com/articles/feature-toggles.html
          description: |
            Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. (Pete Hodgson)
        tw-talisman:
          name: Talisman
          tags:
          - scm
          - secrets
          - d3f:StaticAnalysisTool
          url: https://github.com/thoughtworks/talisman
          description: |
            Talisman is a git hook that scans your commits for secrets before you push them to a remote repository.
        spotbugs:
          name: SpotBugs
          tags:
          - static-analysis
          - java
          - d3f:StaticAnalysisTool
          url: https://github.com/spotbugs/spotbugs
          description: |
            SpotBugs is a program which uses static analysis to look for bugs in Java code.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for all components/libraries:
      risk: Used components like libraries and legacy applications might have vulnerabilities
      measure: Usage of a static analysis for all used components.
      difficultyOfImplementation:
        knowledge: 2
        time: 4
        resources: 2
      usefulness: 3
      level: 4
      dependsOn:
      - Static analysis for important client side components
      - Static analysis for important server side components
      implementation: []
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for all self written components:
      risk: Parts in the source code of the frontend or middleware have vulnerabilities.
      measure: Usage of static analysis tools for all parts of the middleware and
        frontend. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 4
      implementation:
      - name: eslint
        tags:
        - d3f:StaticAnalysisTool
        url: https://eslint.org/
      - name: FindSecurityBugs
        tags: []
      - name: jsprime
        description: jsprime is a static analysis tool for JavaScript that detects
          security vulnerabilities in web applications. It is based on the JavaScript
          parser Esprima and the static analysis framework TSLint.
        tags:
        - d3f:StaticAnalysisTool
        url: https://github.com/dpnishant/jsprime
      - name: Fortify Extension for Visual Studio Code
        url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
        tags:
        - ide
        - sast
      - name: Setting Up the Visual Studio Code Extension Plugin
        url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
        tags:
        - ide
        - sast
      - name: HCL AppScan CodeSweep
        url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
        tags:
        - ide
        - sast
      dependsOn:
      - Static analysis for important client side components
      - Static analysis for important server side components
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for important client side components:
      risk: Important parts in the source code of the frontend have vulnerabilities.
      measure: Usage of static analysis tools for important parts of the frontend
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      implementation:
      - name: eslint
        tags:
        - d3f:StaticAnalysisTool
        url: https://eslint.org/
      - name: FindSecurityBugs
        tags: []
      - name: jsprime
        description: jsprime is a static analysis tool for JavaScript that detects
          security vulnerabilities in web applications. It is based on the JavaScript
          parser Esprima and the static analysis framework TSLint.
        tags:
        - d3f:StaticAnalysisTool
        url: https://github.com/dpnishant/jsprime
      - name: '[bdd-mobile-security'
        tags: []
        url: https://github.com/ing-bank/bdd-mobile-security-automation-framework
        description: '[bdd-mobile-security-automation-framework](https://github.com/ing-bank/bdd-mobile-security-automation-framework)'
      - name: Fortify Extension for Visual Studio Code
        url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
        tags:
        - ide
        - sast
      - name: Setting Up the Visual Studio Code Extension Plugin
        url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
        tags:
        - ide
        - sast
      - name: HCL AppScan CodeSweep
        url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
        tags:
        - ide
        - sast
      dependsOn:
      - Defined build process
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for important server side components:
      risk: Important parts in the source code of the middleware have vulnerabilities.
      measure: Usage of static analysis tools for important parts of the middleware
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - name: eslint
        tags:
        - d3f:StaticAnalysisTool
        url: https://eslint.org/
      - name: FindSecurityBugs
        tags: []
      - name: jsprime
        description: jsprime is a static analysis tool for JavaScript that detects
          security vulnerabilities in web applications. It is based on the JavaScript
          parser Esprima and the static analysis framework TSLint.
        tags:
        - d3f:StaticAnalysisTool
        url: https://github.com/dpnishant/jsprime
      - name: Fortify Extension for Visual Studio Code
        url: https://marketplace.visualstudio.com/items?itemName=fortifyvsts.fortify-extension-for-vs-code
        tags:
        - ide
        - sast
      - name: Setting Up the Visual Studio Code Extension Plugin
        url: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1759216424/Setting+Up+the+Visual+Studio+Code+Extension+Plugin
        tags:
        - ide
        - sast
      - name: HCL AppScan CodeSweep
        url: https://marketplace.visualstudio.com/items?itemName=HCLTechnologies.hclappscancodesweep
        tags:
        - ide
        - sast
      dependsOn:
      - Defined build process
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Stylistic analysis:
      risk: Unclear or obfuscated code might have unexpected behavior.
      measure: Analysis of compliance to style guides of the source code ensures that
        source code formatting rules are met (e.g. indentation, loops, ...).
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 4
      implementation:
      - name: PMD
        tags: []
      - name: How to enforce a consistent coding style in your projects
        url: https://www.meziantou.net/how-to-enforce-a-consistent-coding-style-in-your-projects.htm
        tags:
        - ide
        - linting
        - d3f:StaticAnalysisTool
      - name: In-Depth Linting of Your TypeScript While Coding
        url: https://blog.sonarsource.com/in-depth-linting-of-your-typescript-while-coding
        tags:
        - ide
        - linting
        - d3f:StaticAnalysisTool
      - name: Super-Linter
        tags:
        - linting
        - scm
        - d3f:StaticAnalysisTool
        url: https://github.com/github/super-linter
        description: |
          Lint code bases to catch common errors and enforce code style
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Test of client side components with known vulnerabilities:
      risk: Client side components might have vulnerabilities.
      measure: Tests for known vulnerabilities in components via Software Composition
        Analysis of the frontend are performed.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 2
      level: 3
      dependsOn:
      - Defined build process
      implementation:
      - name: retire.js
        tags: []
        url: https://github.com/RetireJS/retire.js/
      - name: npm audit
        tags:
        - d3f:StaticAnalysisTool
        url: https://docs.npmjs.com/cli/audit
      - name: Dependency-Track is an intelligent Component Analysis platform that
          allows organizations to identify and reduce risk in the software supply
          chain. Dependency-Track takes a unique and highly beneficial approach by
          leveraging the capabilities of Software Bill of Materials (SBOM).
        url: https://github.com/DependencyTrack/dependency-track
        tags:
        - sca
        - inventory
      - name: Dependabot
        tags:
        - dependency
        - dependency-management
        - scm
        url: https://github.com/dependabot/dependabot-core
        description: |
          Dependabot creates pull requests to keep your dependencies secure and up-to-date.
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Test of server side components with known vulnerabilities:
      risk: Server side components might have vulnerabilities.
      measure: Tests for known vulnerabilities in server side components (e.g. backend/middleware)
        are performed.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 5
      level: 1
      dependsOn:
      - Defined build process
      implementation:
      - name: OWASP Dependency Check
        tags: []
        url: https://owasp.org/www-project-dependency-check/
      - name: Dependency-Track is an intelligent Component Analysis platform that
          allows organizations to identify and reduce risk in the software supply
          chain. Dependency-Track takes a unique and highly beneficial approach by
          leveraging the capabilities of Software Bill of Materials (SBOM).
        url: https://github.com/DependencyTrack/dependency-track
        tags:
        - sca
        - inventory
      - name: retire.js
        tags: []
        url: https://github.com/RetireJS/retire.js/
      - name: npm audit
        tags:
        - d3f:StaticAnalysisTool
        url: https://docs.npmjs.com/cli/audit
      - name: Dependabot
        tags:
        - dependency
        - dependency-management
        - scm
        url: https://github.com/dependabot/dependabot-core
        description: |
          Dependabot creates pull requests to keep your dependencies secure and up-to-date.
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Usage of multiple analyzers:
      risk: Each vulnerability analyzer has different opportunities. By using just
        one analyzer, some vulnerabilities might not be found.
      measure: Usage of multiple static tools to find more vulnerabilities.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 5
      usefulness: 1
      level: 4
      dependsOn:
      - Test of server side components with known vulnerabilities
      - Test of client side components with known vulnerabilities
      - Static analysis for all self written components
      implementation: []
      references:
        samm2:
        - V-ST-3-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
  Static depth for infrastructure:
    Analyze logs:
      risk: Not aware of attacks happening.
      measure: Check logs for keywords.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 3
      implementation:
      - name: SigmaHQ
        tags: []
        url: https://github.com/SigmaHQ/sigma
      references:
        samm2: []
        iso27001-2017: []
        d3f:
        - PlatformMonitoring
      isImplemented: false
      evidence: ""
      comments: ""
    Check for image lifetime:
      risk: Old container images in production indicate that patch management is not
        performed and therefore vulnerabilities might exists.
      measure: Check the image age of containers in production.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 2
      level: 2
      implementation:
      - url: https://github.com/SDA-SE/clusterscanner
        name: ClusterScanner
        tags:
        - docker
        - image
        - container
        - vulnerability
        - misconfiguration
        - securiity-tools
        - scanning
        description: Discover vulnerabilities and container image misconfiguration
          in production environments.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 12.6.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Check for known vulnerabilities:
      risk: Known vulnerabilities in infrastructure components like container images
        might get exploited.
      measure: Check for known vulnerabilities
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 4
      level: 4
      implementation:
      - name: https://github.com/aquasecurity/trivy
        description: A Simple and Comprehensive Vulnerability Scanner for Containers,
          Suitable for CI
        tags:
        - d3f:StaticAnalysisTool
        - d3f:ContainerImage
        url: https://github.com/aquasecurity/trivy
      - name: Registries like quay
        tags: []
        description: Registries like quay, dockerhub provide (commercial) offerings,
          often not suitable for distroless images
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
        d3f:
        - AssetVulnerabilityEnumeration
      isImplemented: false
      evidence: ""
      comments: ""
    Check for malware:
      risk: Third party might include  malware. Ether due to the maintainer (e.g.
        typo squatting of an image name and using the wrong image) or by an attacker
        on behalf of the maintainer with stolen credentials.
      measure: Check for malware in components (e.g. container images, VM baseline
        images, libraries).
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 3
      implementation:
      - url: https://github.com/SDA-SE/clusterscanner
        name: ClusterScanner
        tags:
        - docker
        - image
        - container
        - vulnerability
        - misconfiguration
        - securiity-tools
        - scanning
        description: Discover vulnerabilities and container image misconfiguration
          in production environments.
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.2.1
        d3f:
        - FileAnalysis
      isImplemented: false
      evidence: ""
      comments: ""
    Check for new image version:
      risk: When a new version of an image is available, it might fix security vulnerabilities.
      measure: Check for new images of containers in production.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 1
      usefulness: 2
      level: 3
      implementation: []
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
        - 14.2.5
        - 12.2.1
        d3f:
        - SoftwareUpdate
      isImplemented: false
      evidence: ""
      comments: ""
    Correlate known vulnerabilities in infrastructure with new image versions:
      risk: TODO.
      measure: TODO
      difficultyOfImplementation:
        knowledge: 2
        time: 5
        resources: 4
      usefulness: 1
      level: 4
      dependsOn:
      - Usage of a maximum lifetime for images
      implementation:
      - name: Anchore.io
        description: Anchore is a container image analysis and policy engine that
          enables you to understand the contents of your container images and ensure
          that they are secure and compliant.
        tags:
        - d3f:StaticAnalysisTool
        - d3f:ContainerImage
        url: https://anchore.com/
      - name: Clair
        description: Clair is an open source project for the static analysis of vulnerabilities
          in application containers (currently including appc and docker).
        tags:
        - d3f:StaticAnalysisTool
        - d3f:ContainerImage
        url: https://github.com/quay/clair
      - name: OpenSCAP
        tags: []
        url: https://www.open-scap.org/
      - name: Vuls
        tags: []
        url: https://github.com/future-architect/vuls
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        d3f:
        - AssetVulnerabilityEnumeration
      isImplemented: false
      evidence: ""
      comments: ""
    Stored Secrets:
      risk: Confidential information exposure via git history, in container images
        or in code.
      measure: Test for secrets presence in code, container images and commit history.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 2
      level: 1
      implementation:
      - name: truffleHog
        description: Searches through git repositories for high entropy strings, digging
          deep into commit history.
        tags: []
        url: https://github.com/dxa4481/truffleHog
      - name: Talisman
        tags:
        - scm
        - secrets
        - d3f:StaticAnalysisTool
        url: https://github.com/thoughtworks/talisman
        description: |
          Talisman is a git hook that scans your commits for secrets before you push them to a remote repository.
      - name: go-pillage-registries
        tags: []
        url: https://github.com/nccgroup/go-pillage-registries
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - vcs usage is not explicitly covered by ISO 27001 - too specific
        - 9.4.3
        - 10.1.2
        d3f:
        - ApplicationConfigurationHardening
      isImplemented: false
      evidence: ""
      comments: ""
    Test cluster deployment resources:
      risk: The deployment configuration (e.g. kubernetes deployment resources) might
        contain unsecured configurations.
      measure: Test the deployment configuration for virtualized environments for
        unsecured configurations.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 3
      level: 2
      implementation:
      - name: kubesec
        tags: []
        url: https://kubesec.io
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
        d3f:
        - ApplicationConfigurationHardening
      isImplemented: false
      evidence: ""
      comments: ""
    Test of infrastructure components for known vulnerabilities:
      risk: Infrastructure components might have vulnerabilities.
      measure: Test for known vulnerabilities in infrastructure components. Often,
        the only way to respond to known vulnerabilities in operating system packages
        is to accept the risk and wait for a patch. As the patch needs to be applied
        fast when it is available, this activity depends on 'Usage of a maximum life
        for images'.
      difficultyOfImplementation:
        knowledge: 2
        time: 5
        resources: 2
      usefulness: 1
      level: 4
      dependsOn:
      - Usage of a maximum lifetime for images
      implementation:
      - name: Anchore.io
        description: Anchore is a container image analysis and policy engine that
          enables you to understand the contents of your container images and ensure
          that they are secure and compliant.
        tags:
        - d3f:StaticAnalysisTool
        - d3f:ContainerImage
        url: https://anchore.com/
      - name: Clair
        description: Clair is an open source project for the static analysis of vulnerabilities
          in application containers (currently including appc and docker).
        tags:
        - d3f:StaticAnalysisTool
        - d3f:ContainerImage
        url: https://github.com/quay/clair
      - name: OpenSCAP
        tags: []
        url: https://www.open-scap.org/
      - name: Vuls
        tags: []
        url: https://github.com/future-architect/vuls
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        d3f:
        - SystemVulnerabilityAssessment
      isImplemented: false
      evidence: ""
      comments: ""
    Test of virtualized environments:
      risk: Virtualized environments (e.g. via Container Images) might contains unsecure
        configurations.
      measure: Test virtualized environments for unsecured configurations.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 3
      level: 2
      implementation:
      - name: Dive to inspect a container images
        tags: []
        url: https://github.com/wagoodman/dive
      - url: https://github.com/SDA-SE/clusterscanner
        name: ClusterScanner
        tags:
        - docker
        - image
        - container
        - vulnerability
        - misconfiguration
        - securiity-tools
        - scanning
        description: Discover vulnerabilities and container image misconfiguration
          in production environments.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017: []
        d3f:
        - ApplicationConfigurationHardening
      isImplemented: false
      evidence: ""
      comments: ""
    Test the cloud configuration:
      risk: Standard hardening practices for cloud environments are not performed
        leading to vulnerabilities.
      measure: With the help of tools, the configuration of virtual environments are
        tested.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      implementation:
      - name: kube-bench
        tags: []
        url: https://github.com/aquasecurity/kube-bench
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
      isImplemented: false
      evidence: ""
      comments: ""
    Test the definition of virtualized environments:
      risk: The definition of virtualized environments (e.g. via <i>Dockerfile</i>)
        might contain unsecure configurations.
      measure: Test the definition of virtualized environments for unsecured configurations.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 3
      level: 2
      meta:
        implementationGuide: For containier (images), test that the images are following
          best practices like distroless or non-root.
      implementation:
      - name: Dockerfile with hadolint
        tags:
        - d3f:StaticAnalysisTool
        url: https://github.com/hadolint/hadolint
      - name: Deployment with kube-score
        tags: []
        url: https://github.com/zegl/kube-score
      - name: dockerfilelint
        tags:
        - sast
        - docker
        - dockerfile
        - d3f:StaticAnalysisTool
        - d3f:ContainerBuildTool
        url: https://github.com/replicatedhq/dockerfilelint
        description: dockerfilelint is an node module that analyzes a Dockerfile and
          looks for common traps, mistakes and helps enforce best practices.
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - system hardening, virtual environments are not explicitly covered by ISO
          27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
  Test-Intensity:
    Creation and application of a testing concept:
      risk: Scans might use a too small or too high test intensity.
      measure: A testing concept considering the amount of time per scan/intensity
        is created and applied. A dynamic analysis needs more time than a static analysis.
        The dynamic scan, depending on the test intensity might be performed on every
        commit, every night, every week or once in a month.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 2
      level: 3
      implementation: []
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 14.2.2
        - 14.2.3
        - 14.2.1
        - 14.2.5
        - 12.6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Deactivating of unneeded tests:
      risk: As tools cover a wide range of different vulnerability tests, they might
        not match the used components. Therefore, they need more time and resources
        as they need and the feedback loops takes too much time.
      measure: Unneeded tests are deactivated. For example in case the service is
        using a Mongo database and no mysql database, the dynamic scan doesn't need
        to test for sql injections.
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 1
      usefulness: 1
      level: 2
      implementation: []
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Default settings for intensity:
      risk: Time pressure and ignorance might lead to false predictions for the test
        intensity.
      measure: The intensity of the used tools are not modified to safe time.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 1
      implementation: []
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    High test intensity:
      risk: A too small intensity or a too high confidence might lead to not visible
        vulnerabilities.
      measure: A deep scan with high test intensity and a low confidence threshold
        is performed.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 5
      usefulness: 3
      level: 1
      implementation: []
      references:
        samm2:
        - V-ST-2-A
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
      isImplemented: false
      evidence: ""
      comments: ""
    Regular tests:
      risk: After pushing source code to the version control system, any delay in
        receiving feedback on defects makes them harder for the developer to remediate.
      measure: On each push and/or at given intervals automatic security tests are
        performed.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 2
      level: 2
      implementation: []
      references:
        samm2:
        - I-SB-3-A
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        - 14.2.9
      isImplemented: false
      evidence: ""
      comments: ""
...
