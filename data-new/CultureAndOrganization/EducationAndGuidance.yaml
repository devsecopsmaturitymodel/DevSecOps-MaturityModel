_yaml_references:
  tools:
    juice-shop: &juice-shop
      name: OWASP Juice Shop
      tags: [training]
      url: https://github.com/bkimminich/juice-shop
      description: |-
        In case you do not have the budget to hire an external security expert, an option is to use the OWASP JuiceShop on a "hacking Friday"
    dvwa: &dvwa
      name: Damn Vulnerable Web Application
      tags: [training]
      description: |-
        Simple Application with intended vulnerabilities. HTML based.
Education and Guidance:
  Ad-Hoc Security trainings for software developers:
    risk:
    - Understanding security is hard and personnel needs to be trained on it. Otherwise,
      flaws like an SQL Injection might be introduced into the software which might
      get exploited.
    measure: Provide security awareness training for all personnel involved in software
      development Ad-Hoc.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 3
    level: 1
    samm2:
      - education-and-guidance|A|1
    implementation:
    - *juice-shop
    - name: OWASP Cheatsheet Series
      tags: ["secure coding"]
      url: https://cheatsheetseries.owasp.org/
    iso27001-2017:
    - 7.2.2
  Regular security training for externals:
    risk:
      - Understanding security is hard.
    measure: Provide security awareness training for all personnel including externals involved in software
      development on a regular basis.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 3
    usefulness: 4
    level: 4
    samm2:
      - education-and-guidance|A|3
    iso27001-2017:
      - 7.2.2
    implementation:
      - name: OWASP JuiceShop
        tags: ["training"]
        url: https://github.com/bkimminich/juice-shop
        description: "In case you do not have the budget to hire an external security\
        \ expert, an option\nis to use the [OWASP JuiceShop](https://github.com/bkimminich/juice-shop)\
        \ on a \"hacking Friday\""
      - name: https://cheatsheetseries.owasp.org/
        tags: ["training", "secure coding"]
        url: https://cheatsheetseries.owasp.org/
  Regular security training for all:
    risk:
    - Understanding security is hard.
    measure: Provide security awareness training for all internal personnel involved in software
      development on a regular basis like twice in a year for 1-3 days.
    difficultyOfImplementation:
      knowledge: 3
      time: 4
      resources: 2
    usefulness: 4
    level: 2
    samm2:
      - education-and-guidance|A|1
    iso27001-2017:
    - 7.2.2
    md-description: |
      Conduct security awareness training for all roles currently involved in the management, development, testing, or auditing of the software. The goal is to increase the awareness of application security threats and risks, security best practices, and secure software design principles. Develop training internally or procure it externally. Ideally, deliver training in person so participants can have discussions as a team, but Computer-Based Training (CBT) is also an option.

      Course content should include a range of topics relevant to application security and privacy, while remaining accessible to a non-technical audience. Suitable concepts are secure design principles including Least Privilege, Defense-in-Depth, Fail Secure (Safe), Complete Mediation, Session Management, Open Design, and Psychological Acceptability. Additionally, the training should include references to any organization-wide standards, policies, and procedures defined to improve application security. The OWASP Top 10 vulnerabilities should be covered at a high level.

      Training is mandatory for all employees and contractors involved with software development and includes an auditable sign-off to demonstrate compliance. Consider incorporating innovative ways of delivery (such as gamification) to maximize its effectiveness and combat desensitization.

      [Source: OWASP SAMM 2](https://owaspsamm.org/model/governance/education-and-guidance/stream-a/)
    implementation:
    - name: OWASP JuiceShop
      tags: []
      url: https://github.com/bkimminich/juice-shop
      description: "In case you do not have the budget to hire an external security\
        \ expert, an option\nis to use the [OWASP JuiceShop](https://github.com/bkimminich/juice-shop)\
        \ on a \"hacking Friday\""
    - name: OWASP Cheatsheet Series
      tags: ["secure coding"]
      url: https://cheatsheetseries.owasp.org/
  Security consulting on request:
    risk:
    - Not asking a security expert when questions regarding security appear might
      lead to flaws.
    measure: Security consulting to teams is given on request. The security consultants
      can be internal or external.
    difficultyOfImplementation:
      knowledge: 3
      time: 1
      resources: 1
    usefulness: 3
    level: 1
    samm2:
      - education-and-guidance|A|1
    iso27001-2017:
    - security consulting is missing in ISO 27001 may be
    - 6.1.1
    - 6.1.4
    - 6.1.5
    implementation:
      - name: OWASP Cheatsheet Series
        tags: ["secure coding"]
        url: https://cheatsheetseries.owasp.org/
  Regular security training of security champions:
    risk:
    - Understanding security is hard, even for security champions.
    measure: Regular security training of security champions.
    evidence: |
      - Process Documentation: TODO
      - Training Content: TOODO
    difficultyOfImplementation:
      knowledge: 4
      time: 2
      resources: 2
    usefulness: 5
    level: 2
    samm2:
      - threat-assessment|B|2
      - education-and-guidance|A|1
    iso27001-2017:
    - security champions are missing in ISO 27001
    - 7.2.2
    implementation:
      - name: OWASP Cheatsheet Series
        tags: ["secure coding"]
        url: https://cheatsheetseries.owasp.org/
    dependsOn:
      - Each team has a security champion
  Each team has a security champion:
    risk:
    - No one feels directly responsible for security and the security champion does
      not have enough time to allocate to each team.
    measure: Each team defines an individual to be responsible for security. These
      individuals are often referred to as 'security champions'
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    md-description: |
      Implement a program where each software development team has a member considered a “Security Champion” who is the liaison between Information Security and developers. Depending on the size and structure of the team the “Security Champion” may be a software developer, tester, or a product manager. The “Security Champion” has a set number of hours per week for Information Security related activities. They participate in periodic briefings to increase awareness and expertise in different security disciplines. “Security Champions” have additional training to help develop these roles as Software Security subject-matter experts. You may need to customize the way you create and support “Security Champions” for cultural reasons.

      The goals of the position are to increase effectiveness and efficiency of application security and compliance and to strengthen the relationship between various teams and Information Security. To achieve these objectives, “Security Champions” assist with researching, verifying, and prioritizing security and compliance related software defects. They are involved in all Risk Assessments, Threat Assessments, and Architectural Reviews to help identify opportunities to remediate security defects by making the architecture of the application more resilient and reducing the attack threat surface.
      Source: [OWASP SAMM](https://owaspsamm.org/model/governance/education-and-guidance/stream-b/)
    samm2:
      - education-and-guidance|B|1
      - education-and-guidance|B|2
      - education-and-guidance|B|3
    iso27001-2017:
    - security champions are missing in ISO 27001 most likely
    - 7.2.1
    - 7.2.2
    implementation:
    - name: 'OWASP Security Champions Playbook'
      tags: ["security champions"]
      url: https://github.com/c0rdis/security-champions-playbook
  Security-Lessoned-Learned:
    risk:
    - After an incident, a similar incident might reoccur.
    measure: Running a 'lessons learned' session after an incident helps drive continuous
      improvement. Regular meetings with security champions are a good place to share
      and discuss lessons learned.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 3
    level: 3
    samm2:
      - strategy-and-metrics|B|1
    iso27001-2017:
    - 16.1.6
    implementation: []
  Conduction of collaborative security checks with developers and system administrators:
    risk:
    - Security checks by external companies do not increase the understanding of an
      application/system for internal employees.
    measure: Periodically security reviews of source code (SCA), in which security
      SME, developers and operations are involved, are effective at increasing the
      robustness of software and the security knowledge of the teams involved.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 3
    level: 3
    samm: IR1-B
    iso27001-2017:
    - Mutual review of source code is not explicitly required in ISO 27001 may be
    - 7.2.2
    - 12.6.1
    - 12.7.1
    implementation: []
    samm2:
      - education-and-guidance|A|2
  Conduction of collaborative team security checks:
    risk:
    - Development teams limited insight over security practices.
    measure: Mutual security testing the security of other teams project enhances
      security awareness and knowledge.
    difficultyOfImplementation:
      resources: 2
      knowledge: 4
      time: 4
    usefulness: 2
    level: 4
    samm2:
      - education-and-guidance|A|1
      - education-and-guidance|A|2
    iso27001-2017:
    - Mutual security testing is not explicitly required in ISO 27001 may be
    - 7.2.2
    implementation: []
  Conduction of build-it, break-it, fix-it contests:
    risk:
    - Understanding security is hard, even for security champions and the conduction
      of security training often focuses on breaking a component instead of building
      a component secure.
    measure: The build-it, break-it, fix-it contest allows to train people with security
      related roles like security champions the build, break and fix part of a secure
      application. This increases the learning of building secure components.
    difficultyOfImplementation:
      knowledge: 5
      time: 3
      resources: 1
    usefulness: 3
    level: 3
    iso27001-2017:
    - 7.2.2
    implementation:
    - name: Build it Break it Fix it Contest
      tags: []
      url: https://builditbreakit.org/
    samm2:
      - education-and-guidance|A|2
  Conduction of war games:
    risk:
    - Understanding incident response plans during an incident is hard and ineffective.
    measure: War Games like activities help train for incidents. Security SMEs create
      attack scenarios in a testing environment enabling the trainees to learn how
      to react in case of an incident.
    difficultyOfImplementation:
      knowledge: 4
      time: 5
      resources: 4
    usefulness: 3
    level: 4
    iso27001-2017:
    - ware games are not explicitly required in ISO 27001 may be
    - 7.2.2
    - '16.1'
    - 16.1.5
    implementation: []
    samm2:
      - education-and-guidance|A|2
  Reward of good communication:
    risk:
    - Employees are not getting excited about security.
    measure: Good communication and transparency encourages cross-organizational support.
      Gamification of security is also known to help, examples include T-Shirts, mugs,
      cups, giftcards and 'High-Fives'.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 3
    level: 2
    samm2: education-and-guidance|B|1
    iso27001-2017:
    - not required by ISO 27001
    - interestingly enough A7.2.3 is requiring a process to handle misconduct but
      nothing to promote good behavior.
    implementation:
    - name: Motivate people
      tags: ["security champions", "gamification", "nudging"]
      url: https://github.com/wurstbrot/security-pins
      description: |-
        Enhance motivation can be performed with the distribution of pins
        as a reward, see [OWASP Security Pins Project](https://github.com/wurstbrot/security-pins)
    - name: OWASP Top 10 Maturity Categories for Security Champions
      tags: ["security champions"]
      url: https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
  Aligning security in teams:
    risk:
    - The concept of Security Champions might suggest that only he/she is responsible
      for security. However, everyone in the project team should be responsible for
      security.
    measure: By aligning security SME with project teams, a higher security standard
      can be achieved.
    difficultyOfImplementation:
      knowledge: 4
      time: 4
      resources: 1
    usefulness: 5
    implementation:
    - name: Involve Security SME
      tags: []
      description: Security SME are involved in discussion for requirements analysis,
        software design and sprint planning to provide guidance and suggestions.
    level: 4
    samm2:
      - education-and-guidance|B|3
    iso27001-2017:
    - 7.1.1
  Simple Mob Hacking:
    risk: Understanding security is hard.
    measure: |
      Participate with your whole team in a simple mob hacking session organized by the Security Champion Guild.
      In the session the guild presents a vulnerable application and together you look at possible exploits.
      Just like in mob programming there is one driver and several navigators.
    md-description: |
      ### Guidelines for your simple mob hacking session
      - All exploits happen via the user interface.
      - No need for security/hacking tools.
      - No need for deep technical or security knowledge.
      - Use an insecure training app, e.g., [DVWA](https://dvwa.co.uk/) or [OWASP Juice Shop](https://owasp.org/www-project-juice-shop/).
      - Encourage active participation, e.g., use small groups.
      - Allow enough time for everyone to run at least one exploit.

      ### Benefits
      - The team gets an idea of how exploits can look like and how easy applications can be attacked.
      - The team understands functional correct working software can be highly insecure and easy to exploit.

    difficultyOfImplementation:
      knowledge: 5
      time: 3
      resources: 1
    usefulness: 3
    level: 2
    credits: |
      AppSecure-nrw [Security Belts](https://github.com/AppSecure-nrw/security-belts/)
    iso27001-2017:
      - 7.2.2
    implementation:
      - *juice-shop
      - *dvwa
    samm2:
      - education-and-guidance|A|1
