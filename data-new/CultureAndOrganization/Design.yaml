Design:
  Conduction of advanced threat modelling:
    risk: Inadequate identification of business and technical risks.
    measure: Threat modelling is performed by using reviewing user stories and producing
      security driven data flow diagrams.
    difficultyOfImplementation:
      knowledge: 4
      time: 3
      resources: 2
    usefulness: 3
    level: 3
    md-description: |
      **Example High Maturity Scenario:**

      Based on a detailed threat model defined and updated through code, the team decides the following:

      * Local encrypted caches need to expire and auto-purged.
      * Communication channels encrypted and authenticated.
      * All secrets persisted in shared secrets store.
      * Frontend designed with permissions model integration.
      * Permissions matrix defined.
      * Input is escaped output is encoded appropriately using well established libraries.

      Source: OWASP Project Integration Project
    references:
    - samm:TA2-B
    - iso27001-2017:not explicitly covered by ISO 27001
    - iso27001-2017:may be part of risk assessment
    - iso27001-2017:8.2.1
    - iso27001-2017:14.2.1
  Conduction of simple threat modelling on business level:
    risk: Business related threats are discovered too late in the development and
      deployment process.
    measure: Threat modelling of business functionality is performed during the product
      backlog creation to facilitate early detection of security defects.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 1
    usefulness: 3
    level: 2
    references:
    - samm:TA1-A
    - iso27001-2017:not explicitly covered by ISO 27001
    - iso27001-2017:may be part of risk assessment
    - iso27001-2017:8.2.1
    - iso27001-2017:14.2.1
  Conduction of simple threat modelling on technical level:
    risk: Technical related threats are discovered too late in the development and
      deployment process.
    measure: Threat modelling of technical features is performed during the product
      sprint planning.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 1
    usefulness: 3
    level: 1
    implementation:
    - <a href="https://github.com/Toreon/threat-model-playbook">Threat modelling Playbook</a>
    md-description: |2

      Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage.

        There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one.

        A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/).

        OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/).

        There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another.

        > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._

        ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png "Threat Model")

        Last, if the organisation maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function.

        ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png "SKF")

        This practice has the side effect that it trains non-security specialists to think like attackers.

        The outcomes of this stage should help lay the foundation of secure design and considerations.

        **Example Low Maturity Scenario:**

        Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password.

        Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext.

        Frontend serves data over GraphQL as a thin layer between caching system and end user.

        GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes.

        Source: OWASP Project Integration Project
    references:
    - samm:TA1-A
    - iso27001-2017:not explicitly covered by ISO 27001
    - iso27001-2017:may be part of risk assessment
    - iso27001-2017:8.2.1
    - iso27001-2017:14.2.1
  Creation of advanced abuse stories:
    risk: Simple user stories are not going deep enough. Relevant security considerations
      are performed. Security flaws are discovered too late in the development and
      deployment process
    measure: Advanced abuse stories are created as part of threat modelling activities.
    difficultyOfImplementation:
      knowledge: 4
      time: 2
      resources: 1
    usefulness: 4
    level: 4
    dependsOn:
    - Creation of simple abuse stories
    implementation: <a href='https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories'>Don't
      Forget EVIL User Stories</a> and <a href='http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf'>Practical
      Security Stories and Security Tasks for Agile Development Environments</a>
    references:
    - samm:TA2-A
    - iso27001-2017:not explicitly covered by ISO 27001
    - iso27001-2017:may be part of project management
    - iso27001-2017:6.1.5
    - iso27001-2017:may be part of risk assesment
    - iso27001-2017:8.1.2
  Creation of simple abuse stories:
    risk: User stories mostly don't consider security implications. Security flaws
      are discovered too late in the development and deployment process.
    measure: Abuse stories are created during the creation of user stories.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: <a href='https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories'>Don't
      Forget EVIL User Stories</a> and <a href='http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf'>Practical
      Security Stories and Security Tasks for Agile Development Environments</a>
    references:
    - samm:TA2-A
    - iso27001-2017:not explicitly covered by ISO 27001
    - iso27001-2017:may be part of project management
    - iso27001-2017:6.1.5
    - iso27001-2017:may be part of risk assesment
    - iso27001-2017:8.1.2
  Information security targets are communicated:
    risk: Employees don't known their organisation security targets. Therefore security
      is not considered during development and administration as much as it should
      be.
    measure: Transparent and timely communication of the security targets by senior
      management is essential to ensure teams' buy-in and support.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 4
    level: 0
    references:
    - samm:SM1-B
    - iso27001-2017:5.1.1
    - iso27001-2017:7.2.1
