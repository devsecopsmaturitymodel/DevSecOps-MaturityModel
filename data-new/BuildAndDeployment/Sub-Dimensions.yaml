_meta:
  label: Build and deployment
  icon: Build and Deployment.png
  description: |-
    A markdown description of this dimension.
_yaml_references:
  tools:
    ci-cd: &ci-cd
      name: CI/CD tools
      tags: [ci-cd]
      description: |-
        CI/CD tools such as jenkins, gitlab-ci or github-actions

Build:
  Building and testing of artifacts in virtual environments:
    description: |-
      While building and testing artifacts, third party systems, application frameworks
      and 3rd party libraries are used. These might be malicious as a result of
      vulnerable libraries or because they are altered during the delivery phase.
    risk:
    - |-
      While building and testing artifacts, third party systems, application frameworks
      and 3rd party libraries are used. These might be malicious as a result of
      vulnerable libraries or because they are altered during the delivery phase.
    measure: Each step during within the build and testing phase is performed in a
      separate virtual environments, which is destroyed afterward.
    meta:
      implementationGuide: Depending on your environment, usage of virtual machines
        or container technology is a good way. After the build, the filesystem should
        not be used again in other builds.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 2
    implementation:
    - *ci-cd
    - name: Container technologies and orchestration like Docker, Kubernetes
      tags: []
    references:
      samm2:
      - i-secure-build|A|2
      iso27001-2017:
      - iso27001-2017:14.2.6
  Defined build process:
    risk:
    - Performing builds without a defined process is error prone; for example, as
      a result of incorrect security related configuration.
    measure: A well defined build process lowers the possibility of errors during
      the build process.
    evidence: The build process is defined in <a href="REPLACE-ME">REPLACE-ME Pipeline</a>
      in the folder <i>vars</>. Projects are using a <i>Jenkinsfile</i> to use the
      defined process.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 2
    usefulness: 4
    level: 1
    implementation:
    - *ci-cd
    - name: Container technologies and orchestration like Docker, Kubernetes
      tags: []
    references:
      samm2:
      - i-secure-build|A|1
      iso27001-2017:
      - 12.1.1
      - 14.2.2
  Signing of code:
    risk:
    - Unauthorized manipulation of source code might be difficult to spot.
    measure: Digitally signing commits helps to prevent unauthorized manipulation
      of source code.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 3
    level: 3
    implementation: []
    dependsOn:
    - Defined build process
    references:
      samm2: i-secure-build|A|2
      iso27001-2017:
      - 14.2.6
  Signing of artifacts:
    risk:
    - Unauthorized manipulation of artifacts might be difficult to spot. For example,
      this may result in images with malicious code in the Docker registry.
    measure: Digitally signing artifacts for all steps during the build and especially
      docker images, helps to ensure their integrity.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 4
    level: 3
    implementation:
    - name: Docker Content Trust
      tags: []
      url: https://docs.docker.com/notary/getting_started/
    - name: in-toto
      tags: []
      url: https://in-toto.github.io/
    dependsOn:
    - Defined build process
    references:
      samm:
      - OA3-B
      samm2:
      - i-secure-build|A|1
      iso27001-2017:
      - 14.2.6
Deployment:
  Backup before deployment:
    risk:
    - If errors are experienced during the deployment process you want to deploy an
      old release. However, due to changes in the database this is often unfeasible.
    measure: Performing automated backups before deployment can help facilitate deployments
      whilst testing the backup restore processes.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation:
    - name: A complete database backup might be performed*. For large and complex
        environments
      tags: []
    - name: a Point in Time Recovery for databases should be implemented.
      tags: []
    dependsOn:
    - Defined deployment process
    references:
      samm:
      - OE2-A
      samm2:
      - TODO
      iso27001-2017:
      - '12.3'
      - 14.2.6
  Blue/Green Deployment:
    risk:
    - A new artifacts version can have unknown defects.
    measure: By having multiple production environments, a deployment can be performant
      on the first environment to spot possible defects before it is deployment in
      the production environment(s)
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 2
    level: 4
    implementation:
    - name: Blue/Green Deployments
      tags: []
      url: https://martinfowler.com/bliki/BlueGreenDeployment.html
    dependsOn:
    - Smoke Test
    references:
      samm2:
      - TODO
      iso27001-2017:
      - 17.2.1
      - 12.1.1
      - 12.1.2
      - 12.1.4
      - 12.5.1
      - 14.2.9
  Defined deployment process:
    risk:
    - Deployments without a defined process are error prone thus allowing old or untested
      artifact to be deployed.
    measure: A defined deployment process significantly lowers the likelihood of errors
      during the deployment phase.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 1
    implementation:
    - *ci-cd
    - name: Docker
      tags: []
    references:
      samm2: i-secure-deployment|A|1
      iso27001-2017:
      - 12.1.1
      - 14.2.2
  Environment depending configuration parameters:
    risk:
    - Attackers who compromise source code can see confidential access information
      like database credentials.
    measure: Configuration parameters are set for each environment not in the source
      code.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: []
    references:
      samm:
      - SA2-A
      samm2:
      - i-secure-deployment|B|1
      iso27001-2017:
      - 9.4.5
      - 14.2.6
  Handover of confidential parameters:
    risk:
    - Attackers who compromise a system can see confidential access information like
      database credentials.
    - Parameters are often used to set credentials, for example by starting containers
      or applications; these parameters can often be seen by any one listing running
      processes on the target system.
    measure: By using encryption, it is harder to read credentials , e.g. from the
      file system. Also, the usage of a credential management system can help protect
      credentials.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 3
    implementation: []
    dependsOn:
    - Environment depending configuration parameters
    references:
      samm2: i-secure-deployment|B|2 TODO might be 1
      iso27001-2017:
      - 14.1.3
      - 13.1.3
      - 9.4.3
      - 9.4.1
      - 10.1.2
  Rolling update on deployment:
    risk:
    - While a deployment is performed, the application can not be reached.
    measure: A deployment without downtime is performed*.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 3
    implementation:
    - name: Docker
      tags: []
    - name: Webserver
      tags: []
    - name: rolling update
      tags: []
    dependsOn:
    - Defined deployment process
    samm2: i-secure-deployment|A|1
    iso27001-2017:
    - 12.5.1
    - 14.2.2
    - 17.2.1
  Same artifact for environments:
    risk:
    - Building of an artifact for different environments means that an untested artifact
      might reach the production environment.
    measure: Building an artifact once and deploying it to different environments
      means that only tested artifacts are allowed to reach the production environment
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 3
    implementation:
    - name: Docker
      tags: []
    dependsOn:
    - Defined build process
    samm2: i-secure-deployment|A|2
    iso27001-2017:
    - 14.3.1
    - 14.2.8
    - 12.1.4
  Usage of feature toggles:
    risk:
    - By using environment dependent configuration, some parameters will not be tested
      correctly. i.e. <pre>if (host == 'production') {} else {}</pre>
    measure: Usage of environment independent configuration parameter, called feature
      toggles, helps to enhance the test coverage. Only what has been tested, goes
      to production.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 2
    level: 3
    implementation:
    - name: Docker
      tags: []
    dependsOn:
    - Same artifact for environments
    iso27001-2017:
    - 14.3.1
    - 14.2.8
    - 14.2.9
    - 12.1.4
  Usage of trusted images:
    risk:
    - Developers or operations might start random images in the production cluster
      which have malicious code or known vulnerabilities.
    measure: Create image assessment criteria, perform an evaluation of images and
      create a whitelist of artifacts/container images/virtual machine images.
    implementation:
    - name: Kubernetes Admission Controller can whitelist registries and/or whitelist
        a signing key.
      tags: []
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 3
    level: 2
    samm2: i-secure-deployment|A|2
    iso27001-2017:
    - 15.1.1
    - 15.1.2
    - 15.1.3
    - 14.1.3
  Inventory of running artifacts:
    risk:
    - In case a vulnerability of severity high or critical exists, it needs to be
      known where an artifacts with that vulnerability is deployed with which dependencies.
    measure: A documented inventory or a possibility to gather the needed information
      (e.g. the documentation of which script needs to be run by whom) must be in
      place.
    dependsOn:
    - Defined deployment process
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 3
    usefulness: 3
    level: 3
    samm2: o-incident-management|TODO
    iso27001-2017:
    - '8.1'
    - '8.2'
    implementation: []
Patch Management:
  A patch policy is defined:
    risk:
    - Vulnerabilities in running containers stay for long and might get exploited.
    measure: A patch policy for all artifacts (e.g. in images) is defined. How often
      is an image rebuilt?
    difficultyOfImplementation:
      knowledge: 3
      time: 1
      resources: 2
    usefulness: 4
    level: 1
    samm2: o-environment-management|B|1
    iso27001-2017:
    - 12.6.1
    - 12.5.1
    - 14.2.5
    implementation: []
  Nightly build of images:
    risk:
    - Vulnerabilities in running containers stay for too long and might get exploited.
    measure: Images are built at least nightly.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 2
    usefulness: 3
    level: 2
    samm2: o-environment-management|B|1
    iso27001-2017:
    - 12.6.1
    implementation: []
  Automated PRs for patches:
    risk:
    - Known vulnerabilities components might stay for long and get exploited, even
      when a patch is available.
    measure: Fast patching of third party component is needed. The DevOps way is to
      have an automated pull request for new components. This includes <ul> <li>Applications</li><li>Virtualized
      operating system components (e.g. container images)</li> <li>Operating Systems</li><li>Infrastructure
      as Code/GitOps (e.g. argocd)</li> </ul>
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 5
    level: 1
    samm2: o-environment-management|B|1
    iso27001-2017:
    - 12.6.1
    - 14.2.5
    implementation:
    - name: dependabot
      tags: []
      url: https://dependabot.com/
    - name: Jenkins
      tags: []
  Usage of a maximum lifetime for images:
    risk:
    - Vulnerabilities in images of running containers stay for too long and might
      get exploited. Long running containers have potential memory leaks. A compromised
      container might get killed by restarting the container (e.g. in case the attacker
      has not reached the persistence layer).
    measure: The periodically built images are deployed minimum every 30 days (better
      hourly/daily/weekly). Meaning an image is not in production for longer than
      30 days.
    difficultyOfImplementation:
      knowledge: 3
      time: 4
      resources: 2
    usefulness: 3
    level: 2
    samm2: o-environment-management|B|1
    iso27001-2017:
    - 12.6.1
    implementation: []
  Usage of a short maximum lifetime for images:
    risk:
    - Vulnerabilities in running containers stay for too long and might get exploited.
    measure: Nightly built images are deployed at minimum every 1 day.
    difficultyOfImplementation:
      knowledge: 3
      time: 4
      resources: 2
    usefulness: 3
    level: 4
    samm2: o-environment-management|B|1
    iso27001-2017:
    - 12.6.1
    implementation:
    - name: "Sample concept:  \n(1"
      tags: []
      description: "Sample concept:  \n(1) each container has a set lifetime and is\
        \ killed / replaced with a new container multiple times a day where you have\
        \ some form of a graceful replacement to ensure no (short) service outage\
        \ will occur to the end users.  \n(2) twice a day a rebuild of images is done.\
        \ The rebuilds are put into a automated testing pipeline. If the testing has\
        \ no blocking issues the new images will be released for deployment during\
        \ the next \"restart\" of a container. What has to be done, is to ensure the\
        \ new containers are deployed in some canary deployment manner, this will\
        \ ensure that if (and only if) something buggy has been introduced which breaks\
        \ functionality the canary deployment will make sure the \"older version\"\
        \ is being used and not the buggy newer one."
  Reduction of the attack surface:
    risk:
    - Components, dependencies, files or file access rights might have vulnerabilities,
      but the they are not needed.
    measure: Removal of unneeded components, dependencies, files or file access rights.
      For container images the usage of distroless images is recommended.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 2
    usefulness: 3
    level: 2
    samm2: o-environment-management|B|1
    iso27001-2017:
    - hardening is missing in ISO 27001
    - 14.2.1
    implementation:
    - name: Distroless
      tags: []
      url: https://github.com/GoogleContainerTools/distroless
    - name: Fedora CoreOS
      tags: []
      url: https://getfedora.org/coreos
