---
_yaml_references:
  tools:
    ci-cd: &ci-cd CI/CD tools, eg. Jenkins
    containers: &containers Container technologies and orchestration like Docker, Kubernetes
    dependabot: &dependabot >-
      [dependabot](https://dependabot.com)
    httpunit: &httpunit HttpUnit
    junit: &junit junit
    karma-runner: &karma https://github.com/karma-runner/karma
    curl: &curl cURL
    owasp-zap: &owasp-zap OWASP Zed Attack Proxy
    selenium: &selenium Selenium
    eslint: &eslint eslint, pylint, black, google-java-format
    find-sec-bugs: &find-sec-bugs https://find-sec-bugs.github.io/
    bandit: &bandit https://github.com/PyCQA/bandit
    owasp-dependency-check: &owasp-dependency-check OWASP Dependency Check Jenkins Plugin
    npm-audit: &npm-audit >-
      [npm audit](https://docs.npmjs.com/cli/audit)
    retire-js: &retire-js https://github.com/RetireJS/retire.js
    bdd-mobile-security-automation-framework: &bdd-mobile-security-automation-framework >-
      https://github.com/ing-bank/bdd-mobile-security-automation-framework (Archived gh repo)
    jsprime: &jsprime jsprime
Static depth for applications:
  Exclusion of source code duplicates:
    risk: Duplicates in source code might influence the stability of the application.
    measure: Automatic Detection and manual removal of duplicates in source code.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 1
    level: 4
    implementation:
    - PMD
    dependsOn:
    - Defined build process
    samm2: v-security-testing|A|2
    iso27001-2017:
    - not explicitly covered by ISO 27001 - too specific
    - 14.2.1
    - 14.2.5
  Static analysis for all components/libraries:
    risk: Used components like libraries and legacy applications might have vulnerabilities
    measure: Usage of a static analysis for all used components.
    difficultyOfImplementation:
      knowledge: 2
      time: 4
      resources: 2
    usefulness: 3
    level: 4
    dependsOn:
    - Static analysis for important client side components
    - Static analysis for important server side components
    samm2: v-security-testing|A|2
    iso27001-2017:
    - 12.6.1
  Static analysis for all self written components:
    risk: Parts in the source code of the frontend or middleware have vulnerabilities.
    measure: Usage of static analysis tools for all parts of the middleware and frontend.
      Static analysis uses for example string matching algorithms and/or dataflow
      analysis.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 4
    implementation:
    - *eslint
    - *find-sec-bugs
    - jsprime
    - *bandit
    dependsOn:
    - Static analysis for important client side components
    - Static analysis for important server side components
    samm2: v-security-testing|A|2
    iso27001-2017:
    - 12.6.1
  Static analysis for important client side components:
    risk: Important parts in the source code of the frontend have vulnerabilities.
    measure: Usage of static analysis tools for important parts of the frontend are
      used. Static analysis uses for example string matching algorithms and/or dataflow
      analysis.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 3
    implementation:
    - *eslint
    - *find-sec-bugs
    - jsprime
    - *bdd-mobile-security-automation-framework
    samm2: v-security-testing|A|2
    iso27001-2017:
    - 12.6.1
    dependsOn:
    - Defined build process
  Static analysis for important server side components:
    risk: Important parts in the source code of the middleware have vulnerabilities.
    measure: Usage of static analysis tools for important parts of the middleware
      are used. Static analysis uses for example string matching algorithms and/or
      dataflow analysis.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation:
    - *eslint
    - *find-sec-bugs
    - *jsprime
    dependsOn:
    - Defined build process
    samm2: v-security-testing|A|2
    iso27001-2017:
    - 12.6.1
  Stylistic analysis:
    risk: False source code indenting might lead to vulnerabilities.
    measure: Analysis of compliance to style guides of the source code ensures that
      source code indenting rules are met.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 1
    level: 4
    implementation:
    - PMD
    samm2: v-security-testing|A|2
    iso27001-2017:
    - 12.6.1
    - 14.2.1
    - 14.2.5
  Test of client side components with known vulnerabilities:
    risk: Client side components might have vulnerabilities.
    measure: Tests for known vulnerabilities in components of the frontend are performed.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 2
    level: 3
    dependsOn:
    - Defined build process
    implementation:
    - *npm-audit
    - *retire-js
    samm2: v-security-testing|A|2
    iso27001-2017:
    - 12.6.1
  Test of server side components with known vulnerabilities:
    risk: Server side components might have vulnerabilities.
    measure: Tests for known vulnerabilities in server side components (e.g. backend/middleware)
      are performed.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 5
    level: 1
    dependsOn:
    - Defined build process
    implementation:
    - *owasp-dependency-check
    samm: SA
    samm2: v-security-testing|A|2
    iso27001-2017:
    - 12.6.1
  Usage of multiple analysers:
    risk: Each vulnerability analyser has different opportunities. By using just one
      analyser, some vulnerabilities might not be found.
    measure: Usage of multiple static tools to find more vulnerabilities.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 1
    level: 4
    samm2: v-security-testing|A|3
    iso27001-2017:
    - 12.6.1
    - 14.2.1
    - 14.2.5
    dependsOn:
    - Test of server side components with known vulnerabilities
    - Test of client side components with known vulnerabilities
    - Static analysis for all self written components
...
