_yaml_references:
  tools:
    ci-cd: &ci-cd CI/CD tools, eg. Jenkins
    containers: &containers Container technologies and orchestration like Docker,
      Kubernetes
    dependabot: &dependabot https://dependabot.com/
    httpunit: &httpunit HttpUnit
    junit: &junit junit
    karma-runner: &karma https://github.com/karma-runner/karma
    curl: &curl cURL
    owasp-zap: &owasp-zap OWASP Zed Attack Proxy
    selenium: &selenium Selenium
    wagoodman-dive: &wagoodman-dive >-
      [Dive to inspect a container images](https://github.com/wagoodman/dive)
    hadolint: &hadolint >-
      [Lint Dockerfile with hadolint](https://github.com/hadolint/hadolint)
    kube-score: &kube-score >-
      [Deployment with kube-score](https://github.com/zegl/kube-score)
    github-super-linter: &github-super-linter https://github.com/github/super-linter
    kube-sec: &kube-sec https://github.com/controlplaneio/kubesec
    vuls: &vuls >-
      [Vuls](https://github.com/future-architect/vuls)
    Clair: &Clair Clair
    OpenSCAP: &OpenSCAP OpenSCAP
    anchore-io: &anchore-io https://anchore.com/enterprise/
    kube-bench: &kube-bench >-
      https://github.com/aquasecurity/kube-bench
    trufflehog: &trufflehog >-
      [truffleHog](https://github.com/dxa4481/truffleHog)
    go-pillage-registries: &go-pillage-registries >-
      [go-pillage-registries](https://github.com/nccgroup/go-pillage-registries)
    trivy: &trivy https://github.com/aquasecurity/trivy


Static depth for infrastructure:
  Analyse logs:
    risk: Not getting are of happend attacks.
    measure: Check logs for keywords.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 3
    level: 3
    implementation:
    - https://github.com/Neo23x0/sigma
    references: []
  Test of virtualized environments:
    risk: Virtualized environments (e.g. via <i>Container Images</i>) might contains
      unsecure configurations.
    measure: Test virtualized environments for unsecured configurations.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 2
    usefulness: 3
    level: 2
    implementation:
    - *wagoodman-dive
    - Cluster Scanner (will be open sourced soon) to check different aspects
    references:
    - samm2:V-ST-1-A
  Test the definition of virtualized environments:
    risk: The definition of virtualized environments (e.g. via <i>Dockerfile</i>)
      might contains unsecure configurations.
    measure: Test the definition of virtualized environments for unsecured configurations.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 2
    usefulness: 3
    level: 2
    implementation:
    - *hadolint
    - *kube-score
    references:
    - samm2:V-ST-1-A
    - iso27001-2017:system hardening, virtual environments are not explicitly covered
      by ISO 27001 - too specific
    - iso27001-2017:12.6.1
    - iso27001-2017:14.2.3
    - iso27001-2017:14.2.8
    - iso27001-2017:14.2.1
  Test cluster deployment resources:
    risk: The deployment configuration (e.g. kubernetes deployment resources) might
      contain unsecured configurations.
    measure: Test the deployment configuration for virtualized environments for unsecured
      configurations.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 2
    usefulness: 3
    level: 2
    implementation:
    - *kube-sec
    references:
    - samm2:V-ST-1-A
    - iso27001-2017:system hardening is not explicitly covered by ISO 27001 - too
      specific
    - iso27001-2017:12.6.1
    - iso27001-2017:14.2.3
    - iso27001-2017:14.2.8
  Test of infrastructure components for known vulnerabilities:
    risk: Infrastructure components might have vulnerabilities.
    measure: Test for known vulnerabilities in infrastructure components. Often, the
      only way to respond to known vulnerabilities in operating system packages is
      to accept the risk and wait for a patch. As the patch needs to be applied fast
      when it is available, this activity depends on 'Usage of a maximum life for
      images'.
    difficultyOfImplementation:
      knowledge: 2
      time: 5
      resources: 2
    usefulness: 1
    level: 4
    dependsOn:
    - Usage of a maximum lifetime for images
    implementation:
    - *anchore-io
    - *Clair
    - *OpenSCAP
    - *vuls
    references:
    - samm2:V-ST-1-A
    - iso27001-2017:12.6.1
    - iso27001-2017:14.2.1
  Correlate known vulnerabilities in infrastructure with new image versions:
    risk: TODO.
    measure: TODO
    difficultyOfImplementation:
      knowledge: 2
      time: 5
      resources: 4
    usefulness: 1
    level: 4
    dependsOn:
    - Usage of a maximum lifetime for images
    implementation:
    - *anchore-io
    - *Clair
    - *OpenSCAP
    - *vuls
    references:
    - samm2:V-ST-1-A
    - iso27001-2017:12.6.1
    - iso27001-2017:14.2.1
  Test the cloud configuration:
    risk: Standard hardening practices for cloud environments are not performed leading
      to vulnerabilities.
    measure: With the help of tools the configuration of virtual environments are
      tested.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation:
    - *kube-bench
    references:
    - samm:EH2-B
    - samm2:V-ST-1-A
    - iso27001-2017:system hardening is not explicitly covered by ISO 27001 - too
      specific
    - iso27001-2017:12.6.1
    - iso27001-2017:14.2.3
    - iso27001-2017:14.2.8
  Stored Secrets:
    risk: Stored secrets in git history, in container images or directly in code shouldn't
      exists because they might be read unauthorized.
    measure: Test for secrets in code, container images and history
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 2
    usefulness: 2
    level: 1
    implementation:
    - *trufflehog
    - *go-pillage-registries
    references:
    - samm2:V-ST-1-A
    - iso27001-2017:vcs usage is not explicitly covered by ISO 27001 - too specific
    - iso27001-2017:9.4.3
    - iso27001-2017:10.1.2
  Check for image lifetime:
    risk: Old container images in production indicate that patch management is not
      performed and therefore vulnerabilities might exists.
    measure: Check the image age of containers in production.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 2
    level: 3
    implementation:
    references:
    - samm2:V-ST-1-A
    - iso27001-2017:12.6.1
    - iso27001-2017:14.2.5
  Check for known vulnerabilities:
    risk: Known vulnerabilities in infrastructure components like container images
      might get exploited.
    measure: Check for known vulnerabilities
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 4
    level: 4
    implementation:
    - *trivy
    - Registries like quay, dockerhub provide (commercial) offerings, often not suitable
      for distroless images
    references:
    - samm2:V-ST-2-A
    - iso27001-2017:12.6.1
  Check for new image version:
    risk: When a new version of an image is available, it might fixes security vulnerabilities.
    measure: Check for new images of containers in production.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 2
    level: 3
    implementation:
    references:
    - samm2:V-ST-2-A
    - iso27001-2017:12.6.1
    - iso27001-2017:14.2.5
    - iso27001-2017:12.2.1
  Check for malware:
    risk: Third party might include  malware. Ether due to the maintainer (e.g. typo
      squatting of an image name and using the wrong image) or by an attacker on behalf
      of the maintainer with stolen credentials.
    measure: Check for malware in components (e.g. container images, VM baseline images,
      libaries).
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 3
    level: 3
    implementation:
    references:
    - samm2:V-ST-2-A
    - iso27001-2017:12.2.1
